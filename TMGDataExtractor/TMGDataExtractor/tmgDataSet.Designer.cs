//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1022
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TMG.DataExtractor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("tmgDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class tmgDataSet : global::System.Data.DataSet {
        
        private DataSetDataTable tableDataSet;
        
        private DNADataTable tableDNA;
        
        private EventDataTable tableEvent;
        
        private EventWitnessDataTable tableEventWitness;
        
        private ExhibitDataTable tableExhibit;
        
        private FlagDataTable tableFlag;
        
        private FocusGroupDataTable tableFocusGroup;
        
        private FocusGroupMemberDataTable tableFocusGroupMember;
        
        private NameDataTable tableName;
        
        private NameDictionaryDataTable tableNameDictionary;
        
        private NamePartTypeDataTable tableNamePartType;
        
        private NamePartValueDataTable tableNamePartValue;
        
        private ParentChildRelationshipDataTable tableParentChildRelationship;
        
        private personDataTable tableperson;
        
        private PlaceDictionaryDataTable tablePlaceDictionary;
        
        private PlaceFileDataTable tablePlaceFile;
        
        private PlacePartTypeDataTable tablePlacePartType;
        
        private PlacePartValueDataTable tablePlacePartValue;
        
        private RepositoryDataTable tableRepository;
        
        private ResearchLogDataTable tableResearchLog;
        
        private SourceDataTable tableSource;
        
        private SourceCitationDataTable tableSourceCitation;
        
        private sourcetypeDataTable tablesourcetype;
        
        private StyleDataTable tableStyle;
        
        private TagTypeDataTable tableTagType;
        
        private TimelineLockDataTable tableTimelineLock;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public tmgDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected tmgDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataSet"] != null)) {
                    base.Tables.Add(new DataSetDataTable(ds.Tables["DataSet"]));
                }
                if ((ds.Tables["DNA"] != null)) {
                    base.Tables.Add(new DNADataTable(ds.Tables["DNA"]));
                }
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                if ((ds.Tables["EventWitness"] != null)) {
                    base.Tables.Add(new EventWitnessDataTable(ds.Tables["EventWitness"]));
                }
                if ((ds.Tables["Exhibit"] != null)) {
                    base.Tables.Add(new ExhibitDataTable(ds.Tables["Exhibit"]));
                }
                if ((ds.Tables["Flag"] != null)) {
                    base.Tables.Add(new FlagDataTable(ds.Tables["Flag"]));
                }
                if ((ds.Tables["FocusGroup"] != null)) {
                    base.Tables.Add(new FocusGroupDataTable(ds.Tables["FocusGroup"]));
                }
                if ((ds.Tables["FocusGroupMember"] != null)) {
                    base.Tables.Add(new FocusGroupMemberDataTable(ds.Tables["FocusGroupMember"]));
                }
                if ((ds.Tables["Name"] != null)) {
                    base.Tables.Add(new NameDataTable(ds.Tables["Name"]));
                }
                if ((ds.Tables["NameDictionary"] != null)) {
                    base.Tables.Add(new NameDictionaryDataTable(ds.Tables["NameDictionary"]));
                }
                if ((ds.Tables["NamePartType"] != null)) {
                    base.Tables.Add(new NamePartTypeDataTable(ds.Tables["NamePartType"]));
                }
                if ((ds.Tables["NamePartValue"] != null)) {
                    base.Tables.Add(new NamePartValueDataTable(ds.Tables["NamePartValue"]));
                }
                if ((ds.Tables["ParentChildRelationship"] != null)) {
                    base.Tables.Add(new ParentChildRelationshipDataTable(ds.Tables["ParentChildRelationship"]));
                }
                if ((ds.Tables["person"] != null)) {
                    base.Tables.Add(new personDataTable(ds.Tables["person"]));
                }
                if ((ds.Tables["PlaceDictionary"] != null)) {
                    base.Tables.Add(new PlaceDictionaryDataTable(ds.Tables["PlaceDictionary"]));
                }
                if ((ds.Tables["PlaceFile"] != null)) {
                    base.Tables.Add(new PlaceFileDataTable(ds.Tables["PlaceFile"]));
                }
                if ((ds.Tables["PlacePartType"] != null)) {
                    base.Tables.Add(new PlacePartTypeDataTable(ds.Tables["PlacePartType"]));
                }
                if ((ds.Tables["PlacePartValue"] != null)) {
                    base.Tables.Add(new PlacePartValueDataTable(ds.Tables["PlacePartValue"]));
                }
                if ((ds.Tables["Repository"] != null)) {
                    base.Tables.Add(new RepositoryDataTable(ds.Tables["Repository"]));
                }
                if ((ds.Tables["ResearchLog"] != null)) {
                    base.Tables.Add(new ResearchLogDataTable(ds.Tables["ResearchLog"]));
                }
                if ((ds.Tables["Source"] != null)) {
                    base.Tables.Add(new SourceDataTable(ds.Tables["Source"]));
                }
                if ((ds.Tables["SourceCitation"] != null)) {
                    base.Tables.Add(new SourceCitationDataTable(ds.Tables["SourceCitation"]));
                }
                if ((ds.Tables["sourcetype"] != null)) {
                    base.Tables.Add(new sourcetypeDataTable(ds.Tables["sourcetype"]));
                }
                if ((ds.Tables["Style"] != null)) {
                    base.Tables.Add(new StyleDataTable(ds.Tables["Style"]));
                }
                if ((ds.Tables["TagType"] != null)) {
                    base.Tables.Add(new TagTypeDataTable(ds.Tables["TagType"]));
                }
                if ((ds.Tables["TimelineLock"] != null)) {
                    base.Tables.Add(new TimelineLockDataTable(ds.Tables["TimelineLock"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataSetDataTable DataSet {
            get {
                return this.tableDataSet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DNADataTable DNA {
            get {
                return this.tableDNA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventDataTable Event {
            get {
                return this.tableEvent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventWitnessDataTable EventWitness {
            get {
                return this.tableEventWitness;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExhibitDataTable Exhibit {
            get {
                return this.tableExhibit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlagDataTable Flag {
            get {
                return this.tableFlag;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FocusGroupDataTable FocusGroup {
            get {
                return this.tableFocusGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FocusGroupMemberDataTable FocusGroupMember {
            get {
                return this.tableFocusGroupMember;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NameDataTable Name {
            get {
                return this.tableName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NameDictionaryDataTable NameDictionary {
            get {
                return this.tableNameDictionary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NamePartTypeDataTable NamePartType {
            get {
                return this.tableNamePartType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NamePartValueDataTable NamePartValue {
            get {
                return this.tableNamePartValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParentChildRelationshipDataTable ParentChildRelationship {
            get {
                return this.tableParentChildRelationship;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public personDataTable person {
            get {
                return this.tableperson;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlaceDictionaryDataTable PlaceDictionary {
            get {
                return this.tablePlaceDictionary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlaceFileDataTable PlaceFile {
            get {
                return this.tablePlaceFile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlacePartTypeDataTable PlacePartType {
            get {
                return this.tablePlacePartType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlacePartValueDataTable PlacePartValue {
            get {
                return this.tablePlacePartValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RepositoryDataTable Repository {
            get {
                return this.tableRepository;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResearchLogDataTable ResearchLog {
            get {
                return this.tableResearchLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SourceDataTable Source {
            get {
                return this.tableSource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SourceCitationDataTable SourceCitation {
            get {
                return this.tableSourceCitation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sourcetypeDataTable sourcetype {
            get {
                return this.tablesourcetype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StyleDataTable Style {
            get {
                return this.tableStyle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TagTypeDataTable TagType {
            get {
                return this.tableTagType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimelineLockDataTable TimelineLock {
            get {
                return this.tableTimelineLock;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            tmgDataSet cln = ((tmgDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataSet"] != null)) {
                    base.Tables.Add(new DataSetDataTable(ds.Tables["DataSet"]));
                }
                if ((ds.Tables["DNA"] != null)) {
                    base.Tables.Add(new DNADataTable(ds.Tables["DNA"]));
                }
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                if ((ds.Tables["EventWitness"] != null)) {
                    base.Tables.Add(new EventWitnessDataTable(ds.Tables["EventWitness"]));
                }
                if ((ds.Tables["Exhibit"] != null)) {
                    base.Tables.Add(new ExhibitDataTable(ds.Tables["Exhibit"]));
                }
                if ((ds.Tables["Flag"] != null)) {
                    base.Tables.Add(new FlagDataTable(ds.Tables["Flag"]));
                }
                if ((ds.Tables["FocusGroup"] != null)) {
                    base.Tables.Add(new FocusGroupDataTable(ds.Tables["FocusGroup"]));
                }
                if ((ds.Tables["FocusGroupMember"] != null)) {
                    base.Tables.Add(new FocusGroupMemberDataTable(ds.Tables["FocusGroupMember"]));
                }
                if ((ds.Tables["Name"] != null)) {
                    base.Tables.Add(new NameDataTable(ds.Tables["Name"]));
                }
                if ((ds.Tables["NameDictionary"] != null)) {
                    base.Tables.Add(new NameDictionaryDataTable(ds.Tables["NameDictionary"]));
                }
                if ((ds.Tables["NamePartType"] != null)) {
                    base.Tables.Add(new NamePartTypeDataTable(ds.Tables["NamePartType"]));
                }
                if ((ds.Tables["NamePartValue"] != null)) {
                    base.Tables.Add(new NamePartValueDataTable(ds.Tables["NamePartValue"]));
                }
                if ((ds.Tables["ParentChildRelationship"] != null)) {
                    base.Tables.Add(new ParentChildRelationshipDataTable(ds.Tables["ParentChildRelationship"]));
                }
                if ((ds.Tables["person"] != null)) {
                    base.Tables.Add(new personDataTable(ds.Tables["person"]));
                }
                if ((ds.Tables["PlaceDictionary"] != null)) {
                    base.Tables.Add(new PlaceDictionaryDataTable(ds.Tables["PlaceDictionary"]));
                }
                if ((ds.Tables["PlaceFile"] != null)) {
                    base.Tables.Add(new PlaceFileDataTable(ds.Tables["PlaceFile"]));
                }
                if ((ds.Tables["PlacePartType"] != null)) {
                    base.Tables.Add(new PlacePartTypeDataTable(ds.Tables["PlacePartType"]));
                }
                if ((ds.Tables["PlacePartValue"] != null)) {
                    base.Tables.Add(new PlacePartValueDataTable(ds.Tables["PlacePartValue"]));
                }
                if ((ds.Tables["Repository"] != null)) {
                    base.Tables.Add(new RepositoryDataTable(ds.Tables["Repository"]));
                }
                if ((ds.Tables["ResearchLog"] != null)) {
                    base.Tables.Add(new ResearchLogDataTable(ds.Tables["ResearchLog"]));
                }
                if ((ds.Tables["Source"] != null)) {
                    base.Tables.Add(new SourceDataTable(ds.Tables["Source"]));
                }
                if ((ds.Tables["SourceCitation"] != null)) {
                    base.Tables.Add(new SourceCitationDataTable(ds.Tables["SourceCitation"]));
                }
                if ((ds.Tables["sourcetype"] != null)) {
                    base.Tables.Add(new sourcetypeDataTable(ds.Tables["sourcetype"]));
                }
                if ((ds.Tables["Style"] != null)) {
                    base.Tables.Add(new StyleDataTable(ds.Tables["Style"]));
                }
                if ((ds.Tables["TagType"] != null)) {
                    base.Tables.Add(new TagTypeDataTable(ds.Tables["TagType"]));
                }
                if ((ds.Tables["TimelineLock"] != null)) {
                    base.Tables.Add(new TimelineLockDataTable(ds.Tables["TimelineLock"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableDataSet = ((DataSetDataTable)(base.Tables["DataSet"]));
            if ((initTable == true)) {
                if ((this.tableDataSet != null)) {
                    this.tableDataSet.InitVars();
                }
            }
            this.tableDNA = ((DNADataTable)(base.Tables["DNA"]));
            if ((initTable == true)) {
                if ((this.tableDNA != null)) {
                    this.tableDNA.InitVars();
                }
            }
            this.tableEvent = ((EventDataTable)(base.Tables["Event"]));
            if ((initTable == true)) {
                if ((this.tableEvent != null)) {
                    this.tableEvent.InitVars();
                }
            }
            this.tableEventWitness = ((EventWitnessDataTable)(base.Tables["EventWitness"]));
            if ((initTable == true)) {
                if ((this.tableEventWitness != null)) {
                    this.tableEventWitness.InitVars();
                }
            }
            this.tableExhibit = ((ExhibitDataTable)(base.Tables["Exhibit"]));
            if ((initTable == true)) {
                if ((this.tableExhibit != null)) {
                    this.tableExhibit.InitVars();
                }
            }
            this.tableFlag = ((FlagDataTable)(base.Tables["Flag"]));
            if ((initTable == true)) {
                if ((this.tableFlag != null)) {
                    this.tableFlag.InitVars();
                }
            }
            this.tableFocusGroup = ((FocusGroupDataTable)(base.Tables["FocusGroup"]));
            if ((initTable == true)) {
                if ((this.tableFocusGroup != null)) {
                    this.tableFocusGroup.InitVars();
                }
            }
            this.tableFocusGroupMember = ((FocusGroupMemberDataTable)(base.Tables["FocusGroupMember"]));
            if ((initTable == true)) {
                if ((this.tableFocusGroupMember != null)) {
                    this.tableFocusGroupMember.InitVars();
                }
            }
            this.tableName = ((NameDataTable)(base.Tables["Name"]));
            if ((initTable == true)) {
                if ((this.tableName != null)) {
                    this.tableName.InitVars();
                }
            }
            this.tableNameDictionary = ((NameDictionaryDataTable)(base.Tables["NameDictionary"]));
            if ((initTable == true)) {
                if ((this.tableNameDictionary != null)) {
                    this.tableNameDictionary.InitVars();
                }
            }
            this.tableNamePartType = ((NamePartTypeDataTable)(base.Tables["NamePartType"]));
            if ((initTable == true)) {
                if ((this.tableNamePartType != null)) {
                    this.tableNamePartType.InitVars();
                }
            }
            this.tableNamePartValue = ((NamePartValueDataTable)(base.Tables["NamePartValue"]));
            if ((initTable == true)) {
                if ((this.tableNamePartValue != null)) {
                    this.tableNamePartValue.InitVars();
                }
            }
            this.tableParentChildRelationship = ((ParentChildRelationshipDataTable)(base.Tables["ParentChildRelationship"]));
            if ((initTable == true)) {
                if ((this.tableParentChildRelationship != null)) {
                    this.tableParentChildRelationship.InitVars();
                }
            }
            this.tableperson = ((personDataTable)(base.Tables["person"]));
            if ((initTable == true)) {
                if ((this.tableperson != null)) {
                    this.tableperson.InitVars();
                }
            }
            this.tablePlaceDictionary = ((PlaceDictionaryDataTable)(base.Tables["PlaceDictionary"]));
            if ((initTable == true)) {
                if ((this.tablePlaceDictionary != null)) {
                    this.tablePlaceDictionary.InitVars();
                }
            }
            this.tablePlaceFile = ((PlaceFileDataTable)(base.Tables["PlaceFile"]));
            if ((initTable == true)) {
                if ((this.tablePlaceFile != null)) {
                    this.tablePlaceFile.InitVars();
                }
            }
            this.tablePlacePartType = ((PlacePartTypeDataTable)(base.Tables["PlacePartType"]));
            if ((initTable == true)) {
                if ((this.tablePlacePartType != null)) {
                    this.tablePlacePartType.InitVars();
                }
            }
            this.tablePlacePartValue = ((PlacePartValueDataTable)(base.Tables["PlacePartValue"]));
            if ((initTable == true)) {
                if ((this.tablePlacePartValue != null)) {
                    this.tablePlacePartValue.InitVars();
                }
            }
            this.tableRepository = ((RepositoryDataTable)(base.Tables["Repository"]));
            if ((initTable == true)) {
                if ((this.tableRepository != null)) {
                    this.tableRepository.InitVars();
                }
            }
            this.tableResearchLog = ((ResearchLogDataTable)(base.Tables["ResearchLog"]));
            if ((initTable == true)) {
                if ((this.tableResearchLog != null)) {
                    this.tableResearchLog.InitVars();
                }
            }
            this.tableSource = ((SourceDataTable)(base.Tables["Source"]));
            if ((initTable == true)) {
                if ((this.tableSource != null)) {
                    this.tableSource.InitVars();
                }
            }
            this.tableSourceCitation = ((SourceCitationDataTable)(base.Tables["SourceCitation"]));
            if ((initTable == true)) {
                if ((this.tableSourceCitation != null)) {
                    this.tableSourceCitation.InitVars();
                }
            }
            this.tablesourcetype = ((sourcetypeDataTable)(base.Tables["sourcetype"]));
            if ((initTable == true)) {
                if ((this.tablesourcetype != null)) {
                    this.tablesourcetype.InitVars();
                }
            }
            this.tableStyle = ((StyleDataTable)(base.Tables["Style"]));
            if ((initTable == true)) {
                if ((this.tableStyle != null)) {
                    this.tableStyle.InitVars();
                }
            }
            this.tableTagType = ((TagTypeDataTable)(base.Tables["TagType"]));
            if ((initTable == true)) {
                if ((this.tableTagType != null)) {
                    this.tableTagType.InitVars();
                }
            }
            this.tableTimelineLock = ((TimelineLockDataTable)(base.Tables["TimelineLock"]));
            if ((initTable == true)) {
                if ((this.tableTimelineLock != null)) {
                    this.tableTimelineLock.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "tmgDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/tmgDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataSet = new DataSetDataTable();
            base.Tables.Add(this.tableDataSet);
            this.tableDNA = new DNADataTable();
            base.Tables.Add(this.tableDNA);
            this.tableEvent = new EventDataTable();
            base.Tables.Add(this.tableEvent);
            this.tableEventWitness = new EventWitnessDataTable();
            base.Tables.Add(this.tableEventWitness);
            this.tableExhibit = new ExhibitDataTable();
            base.Tables.Add(this.tableExhibit);
            this.tableFlag = new FlagDataTable();
            base.Tables.Add(this.tableFlag);
            this.tableFocusGroup = new FocusGroupDataTable();
            base.Tables.Add(this.tableFocusGroup);
            this.tableFocusGroupMember = new FocusGroupMemberDataTable();
            base.Tables.Add(this.tableFocusGroupMember);
            this.tableName = new NameDataTable();
            base.Tables.Add(this.tableName);
            this.tableNameDictionary = new NameDictionaryDataTable();
            base.Tables.Add(this.tableNameDictionary);
            this.tableNamePartType = new NamePartTypeDataTable();
            base.Tables.Add(this.tableNamePartType);
            this.tableNamePartValue = new NamePartValueDataTable();
            base.Tables.Add(this.tableNamePartValue);
            this.tableParentChildRelationship = new ParentChildRelationshipDataTable();
            base.Tables.Add(this.tableParentChildRelationship);
            this.tableperson = new personDataTable();
            base.Tables.Add(this.tableperson);
            this.tablePlaceDictionary = new PlaceDictionaryDataTable();
            base.Tables.Add(this.tablePlaceDictionary);
            this.tablePlaceFile = new PlaceFileDataTable();
            base.Tables.Add(this.tablePlaceFile);
            this.tablePlacePartType = new PlacePartTypeDataTable();
            base.Tables.Add(this.tablePlacePartType);
            this.tablePlacePartValue = new PlacePartValueDataTable();
            base.Tables.Add(this.tablePlacePartValue);
            this.tableRepository = new RepositoryDataTable();
            base.Tables.Add(this.tableRepository);
            this.tableResearchLog = new ResearchLogDataTable();
            base.Tables.Add(this.tableResearchLog);
            this.tableSource = new SourceDataTable();
            base.Tables.Add(this.tableSource);
            this.tableSourceCitation = new SourceCitationDataTable();
            base.Tables.Add(this.tableSourceCitation);
            this.tablesourcetype = new sourcetypeDataTable();
            base.Tables.Add(this.tablesourcetype);
            this.tableStyle = new StyleDataTable();
            base.Tables.Add(this.tableStyle);
            this.tableTagType = new TagTypeDataTable();
            base.Tables.Add(this.tableTagType);
            this.tableTimelineLock = new TimelineLockDataTable();
            base.Tables.Add(this.tableTimelineLock);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDataSet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDNA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeEvent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeEventWitness() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeExhibit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFlag() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFocusGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFocusGroupMember() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeNameDictionary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeNamePartType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeNamePartValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeParentChildRelationship() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeperson() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePlaceDictionary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePlaceFile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePlacePartType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePlacePartValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRepository() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeResearchLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSourceCitation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializesourcetype() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeStyle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTagType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTimelineLock() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            tmgDataSet ds = new tmgDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DataSetRowChangeEventHandler(object sender, DataSetRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DNARowChangeEventHandler(object sender, DNARowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EventRowChangeEventHandler(object sender, EventRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EventWitnessRowChangeEventHandler(object sender, EventWitnessRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ExhibitRowChangeEventHandler(object sender, ExhibitRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FlagRowChangeEventHandler(object sender, FlagRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FocusGroupRowChangeEventHandler(object sender, FocusGroupRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FocusGroupMemberRowChangeEventHandler(object sender, FocusGroupMemberRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NameRowChangeEventHandler(object sender, NameRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NameDictionaryRowChangeEventHandler(object sender, NameDictionaryRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NamePartTypeRowChangeEventHandler(object sender, NamePartTypeRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void NamePartValueRowChangeEventHandler(object sender, NamePartValueRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ParentChildRelationshipRowChangeEventHandler(object sender, ParentChildRelationshipRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void personRowChangeEventHandler(object sender, personRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PlaceDictionaryRowChangeEventHandler(object sender, PlaceDictionaryRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PlaceFileRowChangeEventHandler(object sender, PlaceFileRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PlacePartTypeRowChangeEventHandler(object sender, PlacePartTypeRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PlacePartValueRowChangeEventHandler(object sender, PlacePartValueRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RepositoryRowChangeEventHandler(object sender, RepositoryRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ResearchLogRowChangeEventHandler(object sender, ResearchLogRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SourceRowChangeEventHandler(object sender, SourceRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SourceCitationRowChangeEventHandler(object sender, SourceCitationRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void sourcetypeRowChangeEventHandler(object sender, sourcetypeRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void StyleRowChangeEventHandler(object sender, StyleRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TagTypeRowChangeEventHandler(object sender, TagTypeRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TimelineLockRowChangeEventHandler(object sender, TimelineLockRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataSetDataTable : global::System.Data.TypedTableBase<DataSetRow> {
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnDSNAME;
            
            private global::System.Data.DataColumn columnDSLOCATION;
            
            private global::System.Data.DataColumn columnDSTYPE;
            
            private global::System.Data.DataColumn columnDSLOCKED;
            
            private global::System.Data.DataColumn columnDSENABLED;
            
            private global::System.Data.DataColumn columnPROPERTY;
            
            private global::System.Data.DataColumn columnDSP;
            
            private global::System.Data.DataColumn columnDSP2;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDCOMMENT;
            
            private global::System.Data.DataColumn columnHOST;
            
            private global::System.Data.DataColumn columnNAMESTYLE;
            
            private global::System.Data.DataColumn columnPLACESTYLE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSetDataTable() {
                this.TableName = "DataSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataSetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DataSetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSNAMEColumn {
                get {
                    return this.columnDSNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSLOCATIONColumn {
                get {
                    return this.columnDSLOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSTYPEColumn {
                get {
                    return this.columnDSTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSLOCKEDColumn {
                get {
                    return this.columnDSLOCKED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSENABLEDColumn {
                get {
                    return this.columnDSENABLED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PROPERTYColumn {
                get {
                    return this.columnPROPERTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSPColumn {
                get {
                    return this.columnDSP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSP2Column {
                get {
                    return this.columnDSP2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DCOMMENTColumn {
                get {
                    return this.columnDCOMMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HOSTColumn {
                get {
                    return this.columnHOST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NAMESTYLEColumn {
                get {
                    return this.columnNAMESTYLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PLACESTYLEColumn {
                get {
                    return this.columnPLACESTYLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSetRow this[int index] {
                get {
                    return ((DataSetRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataSetRowChangeEventHandler DataSetRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataSetRowChangeEventHandler DataSetRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataSetRowChangeEventHandler DataSetRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataSetRowChangeEventHandler DataSetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDataSetRow(DataSetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSetRow AddDataSetRow(long DSID, string DSNAME, string DSLOCATION, decimal DSTYPE, bool DSLOCKED, bool DSENABLED, string PROPERTY, string DSP, string DSP2, string TT, string DCOMMENT, string HOST, long NAMESTYLE, long PLACESTYLE) {
                DataSetRow rowDataSetRow = ((DataSetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DSID,
                        DSNAME,
                        DSLOCATION,
                        DSTYPE,
                        DSLOCKED,
                        DSENABLED,
                        PROPERTY,
                        DSP,
                        DSP2,
                        TT,
                        DCOMMENT,
                        HOST,
                        NAMESTYLE,
                        PLACESTYLE};
                rowDataSetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataSetRow);
                return rowDataSetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSetRow FindByDSID(long DSID) {
                return ((DataSetRow)(this.Rows.Find(new object[] {
                            DSID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                DataSetDataTable cln = ((DataSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataSetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDSID = base.Columns["DSID"];
                this.columnDSNAME = base.Columns["DSNAME"];
                this.columnDSLOCATION = base.Columns["DSLOCATION"];
                this.columnDSTYPE = base.Columns["DSTYPE"];
                this.columnDSLOCKED = base.Columns["DSLOCKED"];
                this.columnDSENABLED = base.Columns["DSENABLED"];
                this.columnPROPERTY = base.Columns["PROPERTY"];
                this.columnDSP = base.Columns["DSP"];
                this.columnDSP2 = base.Columns["DSP2"];
                this.columnTT = base.Columns["TT"];
                this.columnDCOMMENT = base.Columns["DCOMMENT"];
                this.columnHOST = base.Columns["HOST"];
                this.columnNAMESTYLE = base.Columns["NAMESTYLE"];
                this.columnPLACESTYLE = base.Columns["PLACESTYLE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnDSNAME = new global::System.Data.DataColumn("DSNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSNAME);
                this.columnDSLOCATION = new global::System.Data.DataColumn("DSLOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSLOCATION);
                this.columnDSTYPE = new global::System.Data.DataColumn("DSTYPE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSTYPE);
                this.columnDSLOCKED = new global::System.Data.DataColumn("DSLOCKED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSLOCKED);
                this.columnDSENABLED = new global::System.Data.DataColumn("DSENABLED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSENABLED);
                this.columnPROPERTY = new global::System.Data.DataColumn("PROPERTY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROPERTY);
                this.columnDSP = new global::System.Data.DataColumn("DSP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSP);
                this.columnDSP2 = new global::System.Data.DataColumn("DSP2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSP2);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDCOMMENT = new global::System.Data.DataColumn("DCOMMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDCOMMENT);
                this.columnHOST = new global::System.Data.DataColumn("HOST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOST);
                this.columnNAMESTYLE = new global::System.Data.DataColumn("NAMESTYLE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAMESTYLE);
                this.columnPLACESTYLE = new global::System.Data.DataColumn("PLACESTYLE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLACESTYLE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDSID}, true));
                this.columnDSID.AllowDBNull = false;
                this.columnDSID.Unique = true;
                this.columnDSNAME.MaxLength = 100;
                this.columnDSLOCATION.MaxLength = 253;
                this.columnPROPERTY.MaxLength = 2147483647;
                this.columnDSP.MaxLength = 2147483647;
                this.columnDSP2.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnDCOMMENT.MaxLength = 2147483647;
                this.columnHOST.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSetRow NewDataSetRow() {
                return ((DataSetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataSetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(DataSetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataSetRowChanged != null)) {
                    this.DataSetRowChanged(this, new DataSetRowChangeEvent(((DataSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataSetRowChanging != null)) {
                    this.DataSetRowChanging(this, new DataSetRowChangeEvent(((DataSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataSetRowDeleted != null)) {
                    this.DataSetRowDeleted(this, new DataSetRowChangeEvent(((DataSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataSetRowDeleting != null)) {
                    this.DataSetRowDeleting(this, new DataSetRowChangeEvent(((DataSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDataSetRow(DataSetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DNADataTable : global::System.Data.TypedTableBase<DNARow> {
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnID_DNA;
            
            private global::System.Data.DataColumn columnID_PERSON;
            
            private global::System.Data.DataColumn columnDNANAME;
            
            private global::System.Data.DataColumn columnCOMMENTS;
            
            private global::System.Data.DataColumn columnDESCRIPT;
            
            private global::System.Data.DataColumn columnRESULT;
            
            private global::System.Data.DataColumn columnURL;
            
            private global::System.Data.DataColumn columnLOGO;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnKITNUMBER;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnNAMEREC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DNADataTable() {
                this.TableName = "DNA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DNADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DNADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_DNAColumn {
                get {
                    return this.columnID_DNA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_PERSONColumn {
                get {
                    return this.columnID_PERSON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DNANAMEColumn {
                get {
                    return this.columnDNANAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COMMENTSColumn {
                get {
                    return this.columnCOMMENTS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DESCRIPTColumn {
                get {
                    return this.columnDESCRIPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RESULTColumn {
                get {
                    return this.columnRESULT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn URLColumn {
                get {
                    return this.columnURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LOGOColumn {
                get {
                    return this.columnLOGO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KITNUMBERColumn {
                get {
                    return this.columnKITNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NAMERECColumn {
                get {
                    return this.columnNAMEREC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DNARow this[int index] {
                get {
                    return ((DNARow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DNARowChangeEventHandler DNARowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DNARowChangeEventHandler DNARowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DNARowChangeEventHandler DNARowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DNARowChangeEventHandler DNARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDNARow(DNARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DNARow AddDNARow(long DSID, long ID_DNA, long ID_PERSON, string DNANAME, string COMMENTS, string DESCRIPT, string RESULT, string URL, string LOGO, string TT, string KITNUMBER, string TYPE, long NAMEREC) {
                DNARow rowDNARow = ((DNARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DSID,
                        ID_DNA,
                        ID_PERSON,
                        DNANAME,
                        COMMENTS,
                        DESCRIPT,
                        RESULT,
                        URL,
                        LOGO,
                        TT,
                        KITNUMBER,
                        TYPE,
                        NAMEREC};
                rowDNARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDNARow);
                return rowDNARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DNARow FindByID_DNA(long ID_DNA) {
                return ((DNARow)(this.Rows.Find(new object[] {
                            ID_DNA})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                DNADataTable cln = ((DNADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DNADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDSID = base.Columns["DSID"];
                this.columnID_DNA = base.Columns["ID_DNA"];
                this.columnID_PERSON = base.Columns["ID_PERSON"];
                this.columnDNANAME = base.Columns["DNANAME"];
                this.columnCOMMENTS = base.Columns["COMMENTS"];
                this.columnDESCRIPT = base.Columns["DESCRIPT"];
                this.columnRESULT = base.Columns["RESULT"];
                this.columnURL = base.Columns["URL"];
                this.columnLOGO = base.Columns["LOGO"];
                this.columnTT = base.Columns["TT"];
                this.columnKITNUMBER = base.Columns["KITNUMBER"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnNAMEREC = base.Columns["NAMEREC"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnID_DNA = new global::System.Data.DataColumn("ID_DNA", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_DNA);
                this.columnID_PERSON = new global::System.Data.DataColumn("ID_PERSON", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PERSON);
                this.columnDNANAME = new global::System.Data.DataColumn("DNANAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDNANAME);
                this.columnCOMMENTS = new global::System.Data.DataColumn("COMMENTS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMMENTS);
                this.columnDESCRIPT = new global::System.Data.DataColumn("DESCRIPT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPT);
                this.columnRESULT = new global::System.Data.DataColumn("RESULT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESULT);
                this.columnURL = new global::System.Data.DataColumn("URL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnURL);
                this.columnLOGO = new global::System.Data.DataColumn("LOGO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGO);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnKITNUMBER = new global::System.Data.DataColumn("KITNUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKITNUMBER);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnNAMEREC = new global::System.Data.DataColumn("NAMEREC", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAMEREC);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_DNA}, true));
                this.columnID_DNA.AllowDBNull = false;
                this.columnID_DNA.Unique = true;
                this.columnDNANAME.MaxLength = 100;
                this.columnCOMMENTS.MaxLength = 2147483647;
                this.columnDESCRIPT.MaxLength = 2147483647;
                this.columnRESULT.MaxLength = 2147483647;
                this.columnURL.MaxLength = 2147483647;
                this.columnLOGO.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnKITNUMBER.MaxLength = 24;
                this.columnTYPE.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DNARow NewDNARow() {
                return ((DNARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DNARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(DNARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DNARowChanged != null)) {
                    this.DNARowChanged(this, new DNARowChangeEvent(((DNARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DNARowChanging != null)) {
                    this.DNARowChanging(this, new DNARowChangeEvent(((DNARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DNARowDeleted != null)) {
                    this.DNARowDeleted(this, new DNARowChangeEvent(((DNARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DNARowDeleting != null)) {
                    this.DNARowDeleting(this, new DNARowChangeEvent(((DNARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDNARow(DNARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DNADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventDataTable : global::System.Data.TypedTableBase<EventRow> {
            
            private global::System.Data.DataColumn columnETYPE;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnPER1SHOW;
            
            private global::System.Data.DataColumn columnPER2SHOW;
            
            private global::System.Data.DataColumn columnPER1;
            
            private global::System.Data.DataColumn columnPER2;
            
            private global::System.Data.DataColumn columnEDATE;
            
            private global::System.Data.DataColumn columnPLACENUM;
            
            private global::System.Data.DataColumn columnEFOOT;
            
            private global::System.Data.DataColumn columnENSURE;
            
            private global::System.Data.DataColumn columnESSURE;
            
            private global::System.Data.DataColumn columnEDSURE;
            
            private global::System.Data.DataColumn columnEPSURE;
            
            private global::System.Data.DataColumn columnEFSURE;
            
            private global::System.Data.DataColumn columnRECNO;
            
            private global::System.Data.DataColumn columnSENTENCE;
            
            private global::System.Data.DataColumn columnSRTDATE;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnREF_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventDataTable() {
                this.TableName = "Event";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected EventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ETYPEColumn {
                get {
                    return this.columnETYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PER1SHOWColumn {
                get {
                    return this.columnPER1SHOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PER2SHOWColumn {
                get {
                    return this.columnPER2SHOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PER1Column {
                get {
                    return this.columnPER1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PER2Column {
                get {
                    return this.columnPER2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EDATEColumn {
                get {
                    return this.columnEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PLACENUMColumn {
                get {
                    return this.columnPLACENUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EFOOTColumn {
                get {
                    return this.columnEFOOT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ENSUREColumn {
                get {
                    return this.columnENSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ESSUREColumn {
                get {
                    return this.columnESSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EDSUREColumn {
                get {
                    return this.columnEDSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EPSUREColumn {
                get {
                    return this.columnEPSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EFSUREColumn {
                get {
                    return this.columnEFSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECNOColumn {
                get {
                    return this.columnRECNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SENTENCEColumn {
                get {
                    return this.columnSENTENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SRTDATEColumn {
                get {
                    return this.columnSRTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REF_IDColumn {
                get {
                    return this.columnREF_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow this[int index] {
                get {
                    return ((EventRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventRowChangeEventHandler EventRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventRowChangeEventHandler EventRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventRowChangeEventHandler EventRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventRowChangeEventHandler EventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddEventRow(EventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow AddEventRow(
                        long ETYPE, 
                        long DSID, 
                        bool PER1SHOW, 
                        bool PER2SHOW, 
                        long PER1, 
                        long PER2, 
                        string EDATE, 
                        long PLACENUM, 
                        string EFOOT, 
                        string ENSURE, 
                        string ESSURE, 
                        string EDSURE, 
                        string EPSURE, 
                        string EFSURE, 
                        long RECNO, 
                        string SENTENCE, 
                        string SRTDATE, 
                        string TT, 
                        long REF_ID) {
                EventRow rowEventRow = ((EventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ETYPE,
                        DSID,
                        PER1SHOW,
                        PER2SHOW,
                        PER1,
                        PER2,
                        EDATE,
                        PLACENUM,
                        EFOOT,
                        ENSURE,
                        ESSURE,
                        EDSURE,
                        EPSURE,
                        EFSURE,
                        RECNO,
                        SENTENCE,
                        SRTDATE,
                        TT,
                        REF_ID};
                rowEventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventRow);
                return rowEventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow FindByRECNO(long RECNO) {
                return ((EventRow)(this.Rows.Find(new object[] {
                            RECNO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                EventDataTable cln = ((EventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnETYPE = base.Columns["ETYPE"];
                this.columnDSID = base.Columns["DSID"];
                this.columnPER1SHOW = base.Columns["PER1SHOW"];
                this.columnPER2SHOW = base.Columns["PER2SHOW"];
                this.columnPER1 = base.Columns["PER1"];
                this.columnPER2 = base.Columns["PER2"];
                this.columnEDATE = base.Columns["EDATE"];
                this.columnPLACENUM = base.Columns["PLACENUM"];
                this.columnEFOOT = base.Columns["EFOOT"];
                this.columnENSURE = base.Columns["ENSURE"];
                this.columnESSURE = base.Columns["ESSURE"];
                this.columnEDSURE = base.Columns["EDSURE"];
                this.columnEPSURE = base.Columns["EPSURE"];
                this.columnEFSURE = base.Columns["EFSURE"];
                this.columnRECNO = base.Columns["RECNO"];
                this.columnSENTENCE = base.Columns["SENTENCE"];
                this.columnSRTDATE = base.Columns["SRTDATE"];
                this.columnTT = base.Columns["TT"];
                this.columnREF_ID = base.Columns["REF_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnETYPE = new global::System.Data.DataColumn("ETYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnETYPE);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnPER1SHOW = new global::System.Data.DataColumn("PER1SHOW", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPER1SHOW);
                this.columnPER2SHOW = new global::System.Data.DataColumn("PER2SHOW", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPER2SHOW);
                this.columnPER1 = new global::System.Data.DataColumn("PER1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPER1);
                this.columnPER2 = new global::System.Data.DataColumn("PER2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPER2);
                this.columnEDATE = new global::System.Data.DataColumn("EDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEDATE);
                this.columnPLACENUM = new global::System.Data.DataColumn("PLACENUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLACENUM);
                this.columnEFOOT = new global::System.Data.DataColumn("EFOOT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEFOOT);
                this.columnENSURE = new global::System.Data.DataColumn("ENSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENSURE);
                this.columnESSURE = new global::System.Data.DataColumn("ESSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnESSURE);
                this.columnEDSURE = new global::System.Data.DataColumn("EDSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEDSURE);
                this.columnEPSURE = new global::System.Data.DataColumn("EPSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEPSURE);
                this.columnEFSURE = new global::System.Data.DataColumn("EFSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEFSURE);
                this.columnRECNO = new global::System.Data.DataColumn("RECNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECNO);
                this.columnSENTENCE = new global::System.Data.DataColumn("SENTENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSENTENCE);
                this.columnSRTDATE = new global::System.Data.DataColumn("SRTDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRTDATE);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnREF_ID = new global::System.Data.DataColumn("REF_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREF_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRECNO}, true));
                this.columnEDATE.MaxLength = 30;
                this.columnEFOOT.MaxLength = 2147483647;
                this.columnENSURE.MaxLength = 1;
                this.columnESSURE.MaxLength = 1;
                this.columnEDSURE.MaxLength = 1;
                this.columnEPSURE.MaxLength = 1;
                this.columnEFSURE.MaxLength = 1;
                this.columnRECNO.AllowDBNull = false;
                this.columnRECNO.Unique = true;
                this.columnSENTENCE.MaxLength = 2147483647;
                this.columnSRTDATE.MaxLength = 30;
                this.columnTT.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow NewEventRow() {
                return ((EventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(EventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventRowChanged != null)) {
                    this.EventRowChanged(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventRowChanging != null)) {
                    this.EventRowChanging(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventRowDeleted != null)) {
                    this.EventRowDeleted(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventRowDeleting != null)) {
                    this.EventRowDeleting(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveEventRow(EventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventWitnessDataTable : global::System.Data.TypedTableBase<EventWitnessRow> {
            
            private global::System.Data.DataColumn columnEPER;
            
            private global::System.Data.DataColumn columnGNUM;
            
            private global::System.Data.DataColumn columnPRIMARY;
            
            private global::System.Data.DataColumn columnWSENTENCE;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnROLE;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnNAMEREC;
            
            private global::System.Data.DataColumn columnWITMEMO;
            
            private global::System.Data.DataColumn columnSEQUENCE;
            
            private global::System.Data.DataColumn columnEventWitness_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventWitnessDataTable() {
                this.TableName = "EventWitness";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EventWitnessDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected EventWitnessDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EPERColumn {
                get {
                    return this.columnEPER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GNUMColumn {
                get {
                    return this.columnGNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRIMARYColumn {
                get {
                    return this.columnPRIMARY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WSENTENCEColumn {
                get {
                    return this.columnWSENTENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ROLEColumn {
                get {
                    return this.columnROLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NAMERECColumn {
                get {
                    return this.columnNAMEREC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WITMEMOColumn {
                get {
                    return this.columnWITMEMO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SEQUENCEColumn {
                get {
                    return this.columnSEQUENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EventWitness_IDColumn {
                get {
                    return this.columnEventWitness_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventWitnessRow this[int index] {
                get {
                    return ((EventWitnessRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventWitnessRowChangeEventHandler EventWitnessRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventWitnessRowChangeEventHandler EventWitnessRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventWitnessRowChangeEventHandler EventWitnessRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventWitnessRowChangeEventHandler EventWitnessRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddEventWitnessRow(EventWitnessRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventWitnessRow AddEventWitnessRow(long EPER, long GNUM, bool PRIMARY, string WSENTENCE, string TT, string ROLE, long DSID, long NAMEREC, string WITMEMO, long SEQUENCE) {
                EventWitnessRow rowEventWitnessRow = ((EventWitnessRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EPER,
                        GNUM,
                        PRIMARY,
                        WSENTENCE,
                        TT,
                        ROLE,
                        DSID,
                        NAMEREC,
                        WITMEMO,
                        SEQUENCE,
                        null};
                rowEventWitnessRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventWitnessRow);
                return rowEventWitnessRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventWitnessRow FindByEventWitness_ID(long EventWitness_ID) {
                return ((EventWitnessRow)(this.Rows.Find(new object[] {
                            EventWitness_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                EventWitnessDataTable cln = ((EventWitnessDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventWitnessDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnEPER = base.Columns["EPER"];
                this.columnGNUM = base.Columns["GNUM"];
                this.columnPRIMARY = base.Columns["PRIMARY"];
                this.columnWSENTENCE = base.Columns["WSENTENCE"];
                this.columnTT = base.Columns["TT"];
                this.columnROLE = base.Columns["ROLE"];
                this.columnDSID = base.Columns["DSID"];
                this.columnNAMEREC = base.Columns["NAMEREC"];
                this.columnWITMEMO = base.Columns["WITMEMO"];
                this.columnSEQUENCE = base.Columns["SEQUENCE"];
                this.columnEventWitness_ID = base.Columns["EventWitness_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnEPER = new global::System.Data.DataColumn("EPER", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEPER);
                this.columnGNUM = new global::System.Data.DataColumn("GNUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGNUM);
                this.columnPRIMARY = new global::System.Data.DataColumn("PRIMARY", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIMARY);
                this.columnWSENTENCE = new global::System.Data.DataColumn("WSENTENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWSENTENCE);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnROLE = new global::System.Data.DataColumn("ROLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROLE);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnNAMEREC = new global::System.Data.DataColumn("NAMEREC", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAMEREC);
                this.columnWITMEMO = new global::System.Data.DataColumn("WITMEMO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWITMEMO);
                this.columnSEQUENCE = new global::System.Data.DataColumn("SEQUENCE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEQUENCE);
                this.columnEventWitness_ID = new global::System.Data.DataColumn("EventWitness_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventWitness_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEventWitness_ID}, true));
                this.columnWSENTENCE.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnROLE.MaxLength = 5;
                this.columnWITMEMO.MaxLength = 2147483647;
                this.columnEventWitness_ID.AutoIncrement = true;
                this.columnEventWitness_ID.AutoIncrementSeed = -1;
                this.columnEventWitness_ID.AutoIncrementStep = -1;
                this.columnEventWitness_ID.AllowDBNull = false;
                this.columnEventWitness_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventWitnessRow NewEventWitnessRow() {
                return ((EventWitnessRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventWitnessRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(EventWitnessRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventWitnessRowChanged != null)) {
                    this.EventWitnessRowChanged(this, new EventWitnessRowChangeEvent(((EventWitnessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventWitnessRowChanging != null)) {
                    this.EventWitnessRowChanging(this, new EventWitnessRowChangeEvent(((EventWitnessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventWitnessRowDeleted != null)) {
                    this.EventWitnessRowDeleted(this, new EventWitnessRowChangeEvent(((EventWitnessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventWitnessRowDeleting != null)) {
                    this.EventWitnessRowDeleting(this, new EventWitnessRowChangeEvent(((EventWitnessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveEventWitnessRow(EventWitnessRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventWitnessDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExhibitDataTable : global::System.Data.TypedTableBase<ExhibitRow> {
            
            private global::System.Data.DataColumn columnIDEXHIBIT;
            
            private global::System.Data.DataColumn columnIDREF;
            
            private global::System.Data.DataColumn columnRLTYPE;
            
            private global::System.Data.DataColumn columnRLNUM;
            
            private global::System.Data.DataColumn columnXNAME;
            
            private global::System.Data.DataColumn columnVFILENAME;
            
            private global::System.Data.DataColumn columnIFILENAME;
            
            private global::System.Data.DataColumn columnAFILENAME;
            
            private global::System.Data.DataColumn columnTFILENAME;
            
            private global::System.Data.DataColumn columnREFERENCE;
            
            private global::System.Data.DataColumn columnTEXT;
            
            private global::System.Data.DataColumn columnIMAGE;
            
            private global::System.Data.DataColumn columnAUDIO;
            
            private global::System.Data.DataColumn columnDESCRIPT;
            
            private global::System.Data.DataColumn columnRLPER1;
            
            private global::System.Data.DataColumn columnRLPER2;
            
            private global::System.Data.DataColumn columnRLGTYPE;
            
            private global::System.Data.DataColumn columnOLE_OBJECT;
            
            private global::System.Data.DataColumn columnPRIMARY;
            
            private global::System.Data.DataColumn columnVIDEO;
            
            private global::System.Data.DataColumn columnPROPERTY;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnID_PERSON;
            
            private global::System.Data.DataColumn columnID_EVENT;
            
            private global::System.Data.DataColumn columnID_SOURCE;
            
            private global::System.Data.DataColumn columnID_REPOS;
            
            private global::System.Data.DataColumn columnTHUMB;
            
            private global::System.Data.DataColumn columnID_CIT;
            
            private global::System.Data.DataColumn columnID_PLACE;
            
            private global::System.Data.DataColumn columnCAPTION;
            
            private global::System.Data.DataColumn columnSORTEXH;
            
            private global::System.Data.DataColumn columnIMAGEFORE;
            
            private global::System.Data.DataColumn columnIMAGEBACK;
            
            private global::System.Data.DataColumn columnTRANSPAR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExhibitDataTable() {
                this.TableName = "Exhibit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ExhibitDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ExhibitDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDEXHIBITColumn {
                get {
                    return this.columnIDEXHIBIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDREFColumn {
                get {
                    return this.columnIDREF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLTYPEColumn {
                get {
                    return this.columnRLTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLNUMColumn {
                get {
                    return this.columnRLNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn XNAMEColumn {
                get {
                    return this.columnXNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VFILENAMEColumn {
                get {
                    return this.columnVFILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IFILENAMEColumn {
                get {
                    return this.columnIFILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AFILENAMEColumn {
                get {
                    return this.columnAFILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TFILENAMEColumn {
                get {
                    return this.columnTFILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REFERENCEColumn {
                get {
                    return this.columnREFERENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEXTColumn {
                get {
                    return this.columnTEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IMAGEColumn {
                get {
                    return this.columnIMAGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AUDIOColumn {
                get {
                    return this.columnAUDIO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DESCRIPTColumn {
                get {
                    return this.columnDESCRIPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLPER1Column {
                get {
                    return this.columnRLPER1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLPER2Column {
                get {
                    return this.columnRLPER2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLGTYPEColumn {
                get {
                    return this.columnRLGTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OLE_OBJECTColumn {
                get {
                    return this.columnOLE_OBJECT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRIMARYColumn {
                get {
                    return this.columnPRIMARY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VIDEOColumn {
                get {
                    return this.columnVIDEO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PROPERTYColumn {
                get {
                    return this.columnPROPERTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_PERSONColumn {
                get {
                    return this.columnID_PERSON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_EVENTColumn {
                get {
                    return this.columnID_EVENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_SOURCEColumn {
                get {
                    return this.columnID_SOURCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_REPOSColumn {
                get {
                    return this.columnID_REPOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn THUMBColumn {
                get {
                    return this.columnTHUMB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_CITColumn {
                get {
                    return this.columnID_CIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_PLACEColumn {
                get {
                    return this.columnID_PLACE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CAPTIONColumn {
                get {
                    return this.columnCAPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SORTEXHColumn {
                get {
                    return this.columnSORTEXH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IMAGEFOREColumn {
                get {
                    return this.columnIMAGEFORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IMAGEBACKColumn {
                get {
                    return this.columnIMAGEBACK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANSPARColumn {
                get {
                    return this.columnTRANSPAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExhibitRow this[int index] {
                get {
                    return ((ExhibitRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ExhibitRowChangeEventHandler ExhibitRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ExhibitRowChangeEventHandler ExhibitRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ExhibitRowChangeEventHandler ExhibitRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ExhibitRowChangeEventHandler ExhibitRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddExhibitRow(ExhibitRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExhibitRow AddExhibitRow(
                        long IDEXHIBIT, 
                        long IDREF, 
                        string RLTYPE, 
                        long RLNUM, 
                        string XNAME, 
                        string VFILENAME, 
                        string IFILENAME, 
                        string AFILENAME, 
                        string TFILENAME, 
                        string REFERENCE, 
                        string TEXT, 
                        byte[] IMAGE, 
                        byte[] AUDIO, 
                        string DESCRIPT, 
                        long RLPER1, 
                        long RLPER2, 
                        long RLGTYPE, 
                        byte[] OLE_OBJECT, 
                        bool PRIMARY, 
                        byte[] VIDEO, 
                        string PROPERTY, 
                        long DSID, 
                        string TT, 
                        long ID_PERSON, 
                        long ID_EVENT, 
                        long ID_SOURCE, 
                        long ID_REPOS, 
                        byte[] THUMB, 
                        long ID_CIT, 
                        long ID_PLACE, 
                        string CAPTION, 
                        long SORTEXH, 
                        byte[] IMAGEFORE, 
                        byte[] IMAGEBACK, 
                        decimal TRANSPAR) {
                ExhibitRow rowExhibitRow = ((ExhibitRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDEXHIBIT,
                        IDREF,
                        RLTYPE,
                        RLNUM,
                        XNAME,
                        VFILENAME,
                        IFILENAME,
                        AFILENAME,
                        TFILENAME,
                        REFERENCE,
                        TEXT,
                        IMAGE,
                        AUDIO,
                        DESCRIPT,
                        RLPER1,
                        RLPER2,
                        RLGTYPE,
                        OLE_OBJECT,
                        PRIMARY,
                        VIDEO,
                        PROPERTY,
                        DSID,
                        TT,
                        ID_PERSON,
                        ID_EVENT,
                        ID_SOURCE,
                        ID_REPOS,
                        THUMB,
                        ID_CIT,
                        ID_PLACE,
                        CAPTION,
                        SORTEXH,
                        IMAGEFORE,
                        IMAGEBACK,
                        TRANSPAR};
                rowExhibitRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExhibitRow);
                return rowExhibitRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExhibitRow FindByIDEXHIBIT(long IDEXHIBIT) {
                return ((ExhibitRow)(this.Rows.Find(new object[] {
                            IDEXHIBIT})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ExhibitDataTable cln = ((ExhibitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExhibitDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDEXHIBIT = base.Columns["IDEXHIBIT"];
                this.columnIDREF = base.Columns["IDREF"];
                this.columnRLTYPE = base.Columns["RLTYPE"];
                this.columnRLNUM = base.Columns["RLNUM"];
                this.columnXNAME = base.Columns["XNAME"];
                this.columnVFILENAME = base.Columns["VFILENAME"];
                this.columnIFILENAME = base.Columns["IFILENAME"];
                this.columnAFILENAME = base.Columns["AFILENAME"];
                this.columnTFILENAME = base.Columns["TFILENAME"];
                this.columnREFERENCE = base.Columns["REFERENCE"];
                this.columnTEXT = base.Columns["TEXT"];
                this.columnIMAGE = base.Columns["IMAGE"];
                this.columnAUDIO = base.Columns["AUDIO"];
                this.columnDESCRIPT = base.Columns["DESCRIPT"];
                this.columnRLPER1 = base.Columns["RLPER1"];
                this.columnRLPER2 = base.Columns["RLPER2"];
                this.columnRLGTYPE = base.Columns["RLGTYPE"];
                this.columnOLE_OBJECT = base.Columns["OLE_OBJECT"];
                this.columnPRIMARY = base.Columns["PRIMARY"];
                this.columnVIDEO = base.Columns["VIDEO"];
                this.columnPROPERTY = base.Columns["PROPERTY"];
                this.columnDSID = base.Columns["DSID"];
                this.columnTT = base.Columns["TT"];
                this.columnID_PERSON = base.Columns["ID_PERSON"];
                this.columnID_EVENT = base.Columns["ID_EVENT"];
                this.columnID_SOURCE = base.Columns["ID_SOURCE"];
                this.columnID_REPOS = base.Columns["ID_REPOS"];
                this.columnTHUMB = base.Columns["THUMB"];
                this.columnID_CIT = base.Columns["ID_CIT"];
                this.columnID_PLACE = base.Columns["ID_PLACE"];
                this.columnCAPTION = base.Columns["CAPTION"];
                this.columnSORTEXH = base.Columns["SORTEXH"];
                this.columnIMAGEFORE = base.Columns["IMAGEFORE"];
                this.columnIMAGEBACK = base.Columns["IMAGEBACK"];
                this.columnTRANSPAR = base.Columns["TRANSPAR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDEXHIBIT = new global::System.Data.DataColumn("IDEXHIBIT", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDEXHIBIT);
                this.columnIDREF = new global::System.Data.DataColumn("IDREF", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDREF);
                this.columnRLTYPE = new global::System.Data.DataColumn("RLTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLTYPE);
                this.columnRLNUM = new global::System.Data.DataColumn("RLNUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLNUM);
                this.columnXNAME = new global::System.Data.DataColumn("XNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXNAME);
                this.columnVFILENAME = new global::System.Data.DataColumn("VFILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVFILENAME);
                this.columnIFILENAME = new global::System.Data.DataColumn("IFILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIFILENAME);
                this.columnAFILENAME = new global::System.Data.DataColumn("AFILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAFILENAME);
                this.columnTFILENAME = new global::System.Data.DataColumn("TFILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTFILENAME);
                this.columnREFERENCE = new global::System.Data.DataColumn("REFERENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFERENCE);
                this.columnTEXT = new global::System.Data.DataColumn("TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEXT);
                this.columnIMAGE = new global::System.Data.DataColumn("IMAGE", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMAGE);
                this.columnAUDIO = new global::System.Data.DataColumn("AUDIO", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUDIO);
                this.columnDESCRIPT = new global::System.Data.DataColumn("DESCRIPT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPT);
                this.columnRLPER1 = new global::System.Data.DataColumn("RLPER1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLPER1);
                this.columnRLPER2 = new global::System.Data.DataColumn("RLPER2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLPER2);
                this.columnRLGTYPE = new global::System.Data.DataColumn("RLGTYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLGTYPE);
                this.columnOLE_OBJECT = new global::System.Data.DataColumn("OLE_OBJECT", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOLE_OBJECT);
                this.columnPRIMARY = new global::System.Data.DataColumn("PRIMARY", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIMARY);
                this.columnVIDEO = new global::System.Data.DataColumn("VIDEO", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVIDEO);
                this.columnPROPERTY = new global::System.Data.DataColumn("PROPERTY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROPERTY);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnID_PERSON = new global::System.Data.DataColumn("ID_PERSON", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PERSON);
                this.columnID_EVENT = new global::System.Data.DataColumn("ID_EVENT", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_EVENT);
                this.columnID_SOURCE = new global::System.Data.DataColumn("ID_SOURCE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_SOURCE);
                this.columnID_REPOS = new global::System.Data.DataColumn("ID_REPOS", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_REPOS);
                this.columnTHUMB = new global::System.Data.DataColumn("THUMB", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHUMB);
                this.columnID_CIT = new global::System.Data.DataColumn("ID_CIT", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_CIT);
                this.columnID_PLACE = new global::System.Data.DataColumn("ID_PLACE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PLACE);
                this.columnCAPTION = new global::System.Data.DataColumn("CAPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAPTION);
                this.columnSORTEXH = new global::System.Data.DataColumn("SORTEXH", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSORTEXH);
                this.columnIMAGEFORE = new global::System.Data.DataColumn("IMAGEFORE", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMAGEFORE);
                this.columnIMAGEBACK = new global::System.Data.DataColumn("IMAGEBACK", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMAGEBACK);
                this.columnTRANSPAR = new global::System.Data.DataColumn("TRANSPAR", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSPAR);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDEXHIBIT}, true));
                this.columnIDEXHIBIT.AllowDBNull = false;
                this.columnIDEXHIBIT.Unique = true;
                this.columnRLTYPE.MaxLength = 1;
                this.columnXNAME.MaxLength = 30;
                this.columnVFILENAME.MaxLength = 2147483647;
                this.columnIFILENAME.MaxLength = 2147483647;
                this.columnAFILENAME.MaxLength = 2147483647;
                this.columnTFILENAME.MaxLength = 2147483647;
                this.columnREFERENCE.MaxLength = 25;
                this.columnTEXT.MaxLength = 2147483647;
                this.columnDESCRIPT.MaxLength = 2147483647;
                this.columnPROPERTY.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnCAPTION.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExhibitRow NewExhibitRow() {
                return ((ExhibitRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExhibitRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ExhibitRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExhibitRowChanged != null)) {
                    this.ExhibitRowChanged(this, new ExhibitRowChangeEvent(((ExhibitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExhibitRowChanging != null)) {
                    this.ExhibitRowChanging(this, new ExhibitRowChangeEvent(((ExhibitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExhibitRowDeleted != null)) {
                    this.ExhibitRowDeleted(this, new ExhibitRowChangeEvent(((ExhibitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExhibitRowDeleting != null)) {
                    this.ExhibitRowDeleting(this, new ExhibitRowChangeEvent(((ExhibitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveExhibitRow(ExhibitRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExhibitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlagDataTable : global::System.Data.TypedTableBase<FlagRow> {
            
            private global::System.Data.DataColumn columnFLAGLABEL;
            
            private global::System.Data.DataColumn columnFLAGFIELD;
            
            private global::System.Data.DataColumn columnFLAGVALUE;
            
            private global::System.Data.DataColumn columnSEQUENCE;
            
            private global::System.Data.DataColumn columnDESCRIPT;
            
            private global::System.Data.DataColumn columnACTIVE;
            
            private global::System.Data.DataColumn columnFLAGID;
            
            private global::System.Data.DataColumn columnPROPERTY;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnTT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FlagDataTable() {
                this.TableName = "Flag";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FlagDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FlagDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLAGLABELColumn {
                get {
                    return this.columnFLAGLABEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLAGFIELDColumn {
                get {
                    return this.columnFLAGFIELD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLAGVALUEColumn {
                get {
                    return this.columnFLAGVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SEQUENCEColumn {
                get {
                    return this.columnSEQUENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DESCRIPTColumn {
                get {
                    return this.columnDESCRIPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACTIVEColumn {
                get {
                    return this.columnACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLAGIDColumn {
                get {
                    return this.columnFLAGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PROPERTYColumn {
                get {
                    return this.columnPROPERTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FlagRow this[int index] {
                get {
                    return ((FlagRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FlagRowChangeEventHandler FlagRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FlagRowChangeEventHandler FlagRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FlagRowChangeEventHandler FlagRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FlagRowChangeEventHandler FlagRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFlagRow(FlagRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FlagRow AddFlagRow(string FLAGLABEL, string FLAGFIELD, string FLAGVALUE, long SEQUENCE, string DESCRIPT, bool ACTIVE, long FLAGID, string PROPERTY, long DSID, string TT) {
                FlagRow rowFlagRow = ((FlagRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FLAGLABEL,
                        FLAGFIELD,
                        FLAGVALUE,
                        SEQUENCE,
                        DESCRIPT,
                        ACTIVE,
                        FLAGID,
                        PROPERTY,
                        DSID,
                        TT};
                rowFlagRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFlagRow);
                return rowFlagRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FlagRow FindByFLAGID(long FLAGID) {
                return ((FlagRow)(this.Rows.Find(new object[] {
                            FLAGID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FlagDataTable cln = ((FlagDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FlagDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnFLAGLABEL = base.Columns["FLAGLABEL"];
                this.columnFLAGFIELD = base.Columns["FLAGFIELD"];
                this.columnFLAGVALUE = base.Columns["FLAGVALUE"];
                this.columnSEQUENCE = base.Columns["SEQUENCE"];
                this.columnDESCRIPT = base.Columns["DESCRIPT"];
                this.columnACTIVE = base.Columns["ACTIVE"];
                this.columnFLAGID = base.Columns["FLAGID"];
                this.columnPROPERTY = base.Columns["PROPERTY"];
                this.columnDSID = base.Columns["DSID"];
                this.columnTT = base.Columns["TT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnFLAGLABEL = new global::System.Data.DataColumn("FLAGLABEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAGLABEL);
                this.columnFLAGFIELD = new global::System.Data.DataColumn("FLAGFIELD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAGFIELD);
                this.columnFLAGVALUE = new global::System.Data.DataColumn("FLAGVALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAGVALUE);
                this.columnSEQUENCE = new global::System.Data.DataColumn("SEQUENCE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEQUENCE);
                this.columnDESCRIPT = new global::System.Data.DataColumn("DESCRIPT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPT);
                this.columnACTIVE = new global::System.Data.DataColumn("ACTIVE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTIVE);
                this.columnFLAGID = new global::System.Data.DataColumn("FLAGID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAGID);
                this.columnPROPERTY = new global::System.Data.DataColumn("PROPERTY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROPERTY);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFLAGID}, true));
                this.columnFLAGLABEL.MaxLength = 50;
                this.columnFLAGFIELD.MaxLength = 10;
                this.columnFLAGVALUE.MaxLength = 250;
                this.columnDESCRIPT.MaxLength = 2147483647;
                this.columnFLAGID.AllowDBNull = false;
                this.columnFLAGID.Unique = true;
                this.columnPROPERTY.MaxLength = 2147483647;
                this.columnDSID.AllowDBNull = false;
                this.columnTT.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FlagRow NewFlagRow() {
                return ((FlagRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FlagRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FlagRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlagRowChanged != null)) {
                    this.FlagRowChanged(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlagRowChanging != null)) {
                    this.FlagRowChanging(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlagRowDeleted != null)) {
                    this.FlagRowDeleted(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlagRowDeleting != null)) {
                    this.FlagRowDeleting(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFlagRow(FlagRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlagDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FocusGroupDataTable : global::System.Data.TypedTableBase<FocusGroupRow> {
            
            private global::System.Data.DataColumn columnGROUPNUM;
            
            private global::System.Data.DataColumn columnGROUPNAME;
            
            private global::System.Data.DataColumn columnRECENT;
            
            private global::System.Data.DataColumn columnTT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupDataTable() {
                this.TableName = "FocusGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FocusGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FocusGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GROUPNUMColumn {
                get {
                    return this.columnGROUPNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GROUPNAMEColumn {
                get {
                    return this.columnGROUPNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECENTColumn {
                get {
                    return this.columnRECENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupRow this[int index] {
                get {
                    return ((FocusGroupRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FocusGroupRowChangeEventHandler FocusGroupRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FocusGroupRowChangeEventHandler FocusGroupRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FocusGroupRowChangeEventHandler FocusGroupRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FocusGroupRowChangeEventHandler FocusGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFocusGroupRow(FocusGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupRow AddFocusGroupRow(string GROUPNAME, bool RECENT, string TT) {
                FocusGroupRow rowFocusGroupRow = ((FocusGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        GROUPNAME,
                        RECENT,
                        TT};
                rowFocusGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFocusGroupRow);
                return rowFocusGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupRow FindByGROUPNUM(long GROUPNUM) {
                return ((FocusGroupRow)(this.Rows.Find(new object[] {
                            GROUPNUM})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FocusGroupDataTable cln = ((FocusGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FocusGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnGROUPNUM = base.Columns["GROUPNUM"];
                this.columnGROUPNAME = base.Columns["GROUPNAME"];
                this.columnRECENT = base.Columns["RECENT"];
                this.columnTT = base.Columns["TT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnGROUPNUM = new global::System.Data.DataColumn("GROUPNUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROUPNUM);
                this.columnGROUPNAME = new global::System.Data.DataColumn("GROUPNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROUPNAME);
                this.columnRECENT = new global::System.Data.DataColumn("RECENT", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECENT);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnGROUPNUM}, true));
                this.columnGROUPNUM.AutoIncrement = true;
                this.columnGROUPNUM.AutoIncrementSeed = -1;
                this.columnGROUPNUM.AutoIncrementStep = -1;
                this.columnGROUPNUM.AllowDBNull = false;
                this.columnGROUPNUM.Unique = true;
                this.columnGROUPNAME.MaxLength = 40;
                this.columnTT.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupRow NewFocusGroupRow() {
                return ((FocusGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FocusGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FocusGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FocusGroupRowChanged != null)) {
                    this.FocusGroupRowChanged(this, new FocusGroupRowChangeEvent(((FocusGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FocusGroupRowChanging != null)) {
                    this.FocusGroupRowChanging(this, new FocusGroupRowChangeEvent(((FocusGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FocusGroupRowDeleted != null)) {
                    this.FocusGroupRowDeleted(this, new FocusGroupRowChangeEvent(((FocusGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FocusGroupRowDeleting != null)) {
                    this.FocusGroupRowDeleting(this, new FocusGroupRowChangeEvent(((FocusGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFocusGroupRow(FocusGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FocusGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FocusGroupMemberDataTable : global::System.Data.TypedTableBase<FocusGroupMemberRow> {
            
            private global::System.Data.DataColumn columnGROUPNUM;
            
            private global::System.Data.DataColumn columnMEMBERNUM;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnFocusGroupMember_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupMemberDataTable() {
                this.TableName = "FocusGroupMember";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FocusGroupMemberDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FocusGroupMemberDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GROUPNUMColumn {
                get {
                    return this.columnGROUPNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MEMBERNUMColumn {
                get {
                    return this.columnMEMBERNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FocusGroupMember_IDColumn {
                get {
                    return this.columnFocusGroupMember_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupMemberRow this[int index] {
                get {
                    return ((FocusGroupMemberRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FocusGroupMemberRowChangeEventHandler FocusGroupMemberRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FocusGroupMemberRowChangeEventHandler FocusGroupMemberRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FocusGroupMemberRowChangeEventHandler FocusGroupMemberRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FocusGroupMemberRowChangeEventHandler FocusGroupMemberRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFocusGroupMemberRow(FocusGroupMemberRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupMemberRow AddFocusGroupMemberRow(long GROUPNUM, long MEMBERNUM, string TT, long DSID) {
                FocusGroupMemberRow rowFocusGroupMemberRow = ((FocusGroupMemberRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GROUPNUM,
                        MEMBERNUM,
                        TT,
                        DSID,
                        null};
                rowFocusGroupMemberRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFocusGroupMemberRow);
                return rowFocusGroupMemberRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupMemberRow FindByFocusGroupMember_ID(long FocusGroupMember_ID) {
                return ((FocusGroupMemberRow)(this.Rows.Find(new object[] {
                            FocusGroupMember_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                FocusGroupMemberDataTable cln = ((FocusGroupMemberDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FocusGroupMemberDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnGROUPNUM = base.Columns["GROUPNUM"];
                this.columnMEMBERNUM = base.Columns["MEMBERNUM"];
                this.columnTT = base.Columns["TT"];
                this.columnDSID = base.Columns["DSID"];
                this.columnFocusGroupMember_ID = base.Columns["FocusGroupMember_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnGROUPNUM = new global::System.Data.DataColumn("GROUPNUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROUPNUM);
                this.columnMEMBERNUM = new global::System.Data.DataColumn("MEMBERNUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEMBERNUM);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnFocusGroupMember_ID = new global::System.Data.DataColumn("FocusGroupMember_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFocusGroupMember_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFocusGroupMember_ID}, true));
                this.columnTT.MaxLength = 1;
                this.columnFocusGroupMember_ID.AutoIncrement = true;
                this.columnFocusGroupMember_ID.AutoIncrementSeed = -1;
                this.columnFocusGroupMember_ID.AutoIncrementStep = -1;
                this.columnFocusGroupMember_ID.AllowDBNull = false;
                this.columnFocusGroupMember_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupMemberRow NewFocusGroupMemberRow() {
                return ((FocusGroupMemberRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FocusGroupMemberRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(FocusGroupMemberRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FocusGroupMemberRowChanged != null)) {
                    this.FocusGroupMemberRowChanged(this, new FocusGroupMemberRowChangeEvent(((FocusGroupMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FocusGroupMemberRowChanging != null)) {
                    this.FocusGroupMemberRowChanging(this, new FocusGroupMemberRowChangeEvent(((FocusGroupMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FocusGroupMemberRowDeleted != null)) {
                    this.FocusGroupMemberRowDeleted(this, new FocusGroupMemberRowChangeEvent(((FocusGroupMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FocusGroupMemberRowDeleting != null)) {
                    this.FocusGroupMemberRowDeleting(this, new FocusGroupMemberRowChangeEvent(((FocusGroupMemberRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFocusGroupMemberRow(FocusGroupMemberRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FocusGroupMemberDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NameDataTable : global::System.Data.TypedTableBase<NameRow> {
            
            private global::System.Data.DataColumn columnNPER;
            
            private global::System.Data.DataColumn columnALTYPE;
            
            private global::System.Data.DataColumn columnISPICKED;
            
            private global::System.Data.DataColumn columnINFS;
            
            private global::System.Data.DataColumn columnINFG;
            
            private global::System.Data.DataColumn columnPRIMARY;
            
            private global::System.Data.DataColumn columnNSURE;
            
            private global::System.Data.DataColumn columnFSURE;
            
            private global::System.Data.DataColumn columnNNOTE;
            
            private global::System.Data.DataColumn columnRECNO;
            
            private global::System.Data.DataColumn columnSENTENCE;
            
            private global::System.Data.DataColumn columnNDATE;
            
            private global::System.Data.DataColumn columnSRTDATE;
            
            private global::System.Data.DataColumn columnDSURE;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnSRNAMESORT;
            
            private global::System.Data.DataColumn columnGVNAMESORT;
            
            private global::System.Data.DataColumn columnSTYLEID;
            
            private global::System.Data.DataColumn columnSURID;
            
            private global::System.Data.DataColumn columnGIVID;
            
            private global::System.Data.DataColumn columnSRNAMEDISP;
            
            private global::System.Data.DataColumn columnSNDXSURN;
            
            private global::System.Data.DataColumn columnSNDXGVN;
            
            private global::System.Data.DataColumn columnPBIRTH;
            
            private global::System.Data.DataColumn columnPDEATH;
            
            private global::System.Data.DataColumn columnREFER;
            
            private global::System.Data.DataColumn columnPREF_ID;
            
            private global::System.Data.DataColumn columnLAST_EDIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameDataTable() {
                this.TableName = "Name";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected NameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NPERColumn {
                get {
                    return this.columnNPER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ALTYPEColumn {
                get {
                    return this.columnALTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ISPICKEDColumn {
                get {
                    return this.columnISPICKED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INFSColumn {
                get {
                    return this.columnINFS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INFGColumn {
                get {
                    return this.columnINFG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRIMARYColumn {
                get {
                    return this.columnPRIMARY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NSUREColumn {
                get {
                    return this.columnNSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FSUREColumn {
                get {
                    return this.columnFSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NNOTEColumn {
                get {
                    return this.columnNNOTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECNOColumn {
                get {
                    return this.columnRECNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SENTENCEColumn {
                get {
                    return this.columnSENTENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NDATEColumn {
                get {
                    return this.columnNDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SRTDATEColumn {
                get {
                    return this.columnSRTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSUREColumn {
                get {
                    return this.columnDSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SRNAMESORTColumn {
                get {
                    return this.columnSRNAMESORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GVNAMESORTColumn {
                get {
                    return this.columnGVNAMESORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STYLEIDColumn {
                get {
                    return this.columnSTYLEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SURIDColumn {
                get {
                    return this.columnSURID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GIVIDColumn {
                get {
                    return this.columnGIVID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SRNAMEDISPColumn {
                get {
                    return this.columnSRNAMEDISP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SNDXSURNColumn {
                get {
                    return this.columnSNDXSURN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SNDXGVNColumn {
                get {
                    return this.columnSNDXGVN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PBIRTHColumn {
                get {
                    return this.columnPBIRTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PDEATHColumn {
                get {
                    return this.columnPDEATH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REFERColumn {
                get {
                    return this.columnREFER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PREF_IDColumn {
                get {
                    return this.columnPREF_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LAST_EDITColumn {
                get {
                    return this.columnLAST_EDIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameRow this[int index] {
                get {
                    return ((NameRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NameRowChangeEventHandler NameRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NameRowChangeEventHandler NameRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NameRowChangeEventHandler NameRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NameRowChangeEventHandler NameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNameRow(NameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameRow AddNameRow(
                        long NPER, 
                        long ALTYPE, 
                        bool ISPICKED, 
                        bool INFS, 
                        bool INFG, 
                        bool PRIMARY, 
                        string NSURE, 
                        string FSURE, 
                        string NNOTE, 
                        long RECNO, 
                        string SENTENCE, 
                        string NDATE, 
                        string SRTDATE, 
                        string DSURE, 
                        long DSID, 
                        string TT, 
                        string SRNAMESORT, 
                        string GVNAMESORT, 
                        long STYLEID, 
                        long SURID, 
                        long GIVID, 
                        string SRNAMEDISP, 
                        string SNDXSURN, 
                        string SNDXGVN, 
                        string PBIRTH, 
                        string PDEATH, 
                        string REFER, 
                        long PREF_ID, 
                        System.DateTime LAST_EDIT) {
                NameRow rowNameRow = ((NameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NPER,
                        ALTYPE,
                        ISPICKED,
                        INFS,
                        INFG,
                        PRIMARY,
                        NSURE,
                        FSURE,
                        NNOTE,
                        RECNO,
                        SENTENCE,
                        NDATE,
                        SRTDATE,
                        DSURE,
                        DSID,
                        TT,
                        SRNAMESORT,
                        GVNAMESORT,
                        STYLEID,
                        SURID,
                        GIVID,
                        SRNAMEDISP,
                        SNDXSURN,
                        SNDXGVN,
                        PBIRTH,
                        PDEATH,
                        REFER,
                        PREF_ID,
                        LAST_EDIT};
                rowNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNameRow);
                return rowNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameRow FindByRECNO(long RECNO) {
                return ((NameRow)(this.Rows.Find(new object[] {
                            RECNO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                NameDataTable cln = ((NameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnNPER = base.Columns["NPER"];
                this.columnALTYPE = base.Columns["ALTYPE"];
                this.columnISPICKED = base.Columns["ISPICKED"];
                this.columnINFS = base.Columns["INFS"];
                this.columnINFG = base.Columns["INFG"];
                this.columnPRIMARY = base.Columns["PRIMARY"];
                this.columnNSURE = base.Columns["NSURE"];
                this.columnFSURE = base.Columns["FSURE"];
                this.columnNNOTE = base.Columns["NNOTE"];
                this.columnRECNO = base.Columns["RECNO"];
                this.columnSENTENCE = base.Columns["SENTENCE"];
                this.columnNDATE = base.Columns["NDATE"];
                this.columnSRTDATE = base.Columns["SRTDATE"];
                this.columnDSURE = base.Columns["DSURE"];
                this.columnDSID = base.Columns["DSID"];
                this.columnTT = base.Columns["TT"];
                this.columnSRNAMESORT = base.Columns["SRNAMESORT"];
                this.columnGVNAMESORT = base.Columns["GVNAMESORT"];
                this.columnSTYLEID = base.Columns["STYLEID"];
                this.columnSURID = base.Columns["SURID"];
                this.columnGIVID = base.Columns["GIVID"];
                this.columnSRNAMEDISP = base.Columns["SRNAMEDISP"];
                this.columnSNDXSURN = base.Columns["SNDXSURN"];
                this.columnSNDXGVN = base.Columns["SNDXGVN"];
                this.columnPBIRTH = base.Columns["PBIRTH"];
                this.columnPDEATH = base.Columns["PDEATH"];
                this.columnREFER = base.Columns["REFER"];
                this.columnPREF_ID = base.Columns["PREF_ID"];
                this.columnLAST_EDIT = base.Columns["LAST_EDIT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnNPER = new global::System.Data.DataColumn("NPER", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNPER);
                this.columnALTYPE = new global::System.Data.DataColumn("ALTYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnALTYPE);
                this.columnISPICKED = new global::System.Data.DataColumn("ISPICKED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISPICKED);
                this.columnINFS = new global::System.Data.DataColumn("INFS", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFS);
                this.columnINFG = new global::System.Data.DataColumn("INFG", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFG);
                this.columnPRIMARY = new global::System.Data.DataColumn("PRIMARY", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIMARY);
                this.columnNSURE = new global::System.Data.DataColumn("NSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNSURE);
                this.columnFSURE = new global::System.Data.DataColumn("FSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSURE);
                this.columnNNOTE = new global::System.Data.DataColumn("NNOTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNNOTE);
                this.columnRECNO = new global::System.Data.DataColumn("RECNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECNO);
                this.columnSENTENCE = new global::System.Data.DataColumn("SENTENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSENTENCE);
                this.columnNDATE = new global::System.Data.DataColumn("NDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNDATE);
                this.columnSRTDATE = new global::System.Data.DataColumn("SRTDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRTDATE);
                this.columnDSURE = new global::System.Data.DataColumn("DSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSURE);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnSRNAMESORT = new global::System.Data.DataColumn("SRNAMESORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRNAMESORT);
                this.columnGVNAMESORT = new global::System.Data.DataColumn("GVNAMESORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGVNAMESORT);
                this.columnSTYLEID = new global::System.Data.DataColumn("STYLEID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTYLEID);
                this.columnSURID = new global::System.Data.DataColumn("SURID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSURID);
                this.columnGIVID = new global::System.Data.DataColumn("GIVID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGIVID);
                this.columnSRNAMEDISP = new global::System.Data.DataColumn("SRNAMEDISP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRNAMEDISP);
                this.columnSNDXSURN = new global::System.Data.DataColumn("SNDXSURN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSNDXSURN);
                this.columnSNDXGVN = new global::System.Data.DataColumn("SNDXGVN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSNDXGVN);
                this.columnPBIRTH = new global::System.Data.DataColumn("PBIRTH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPBIRTH);
                this.columnPDEATH = new global::System.Data.DataColumn("PDEATH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPDEATH);
                this.columnREFER = new global::System.Data.DataColumn("REFER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFER);
                this.columnPREF_ID = new global::System.Data.DataColumn("PREF_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREF_ID);
                this.columnLAST_EDIT = new global::System.Data.DataColumn("LAST_EDIT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAST_EDIT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRECNO}, true));
                this.columnNSURE.MaxLength = 1;
                this.columnFSURE.MaxLength = 1;
                this.columnNNOTE.MaxLength = 2147483647;
                this.columnRECNO.AllowDBNull = false;
                this.columnRECNO.Unique = true;
                this.columnSENTENCE.MaxLength = 2147483647;
                this.columnNDATE.MaxLength = 30;
                this.columnSRTDATE.MaxLength = 30;
                this.columnDSURE.MaxLength = 1;
                this.columnTT.MaxLength = 1;
                this.columnSRNAMESORT.MaxLength = 70;
                this.columnGVNAMESORT.MaxLength = 70;
                this.columnSRNAMEDISP.MaxLength = 70;
                this.columnSNDXSURN.MaxLength = 4;
                this.columnSNDXGVN.MaxLength = 4;
                this.columnPBIRTH.MaxLength = 30;
                this.columnPDEATH.MaxLength = 30;
                this.columnREFER.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameRow NewNameRow() {
                return ((NameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(NameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NameRowChanged != null)) {
                    this.NameRowChanged(this, new NameRowChangeEvent(((NameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NameRowChanging != null)) {
                    this.NameRowChanging(this, new NameRowChangeEvent(((NameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NameRowDeleted != null)) {
                    this.NameRowDeleted(this, new NameRowChangeEvent(((NameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NameRowDeleting != null)) {
                    this.NameRowDeleting(this, new NameRowChangeEvent(((NameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveNameRow(NameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NameDictionaryDataTable : global::System.Data.TypedTableBase<NameDictionaryRow> {
            
            private global::System.Data.DataColumn columnUID;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnSDX;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnNameDictionary_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameDictionaryDataTable() {
                this.TableName = "NameDictionary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NameDictionaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected NameDictionaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UIDColumn {
                get {
                    return this.columnUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SDXColumn {
                get {
                    return this.columnSDX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NameDictionary_IDColumn {
                get {
                    return this.columnNameDictionary_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameDictionaryRow this[int index] {
                get {
                    return ((NameDictionaryRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NameDictionaryRowChangeEventHandler NameDictionaryRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NameDictionaryRowChangeEventHandler NameDictionaryRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NameDictionaryRowChangeEventHandler NameDictionaryRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NameDictionaryRowChangeEventHandler NameDictionaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNameDictionaryRow(NameDictionaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameDictionaryRow AddNameDictionaryRow(long UID, string VALUE, string SDX, string TT) {
                NameDictionaryRow rowNameDictionaryRow = ((NameDictionaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UID,
                        VALUE,
                        SDX,
                        TT,
                        null};
                rowNameDictionaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNameDictionaryRow);
                return rowNameDictionaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameDictionaryRow FindByNameDictionary_ID(long NameDictionary_ID) {
                return ((NameDictionaryRow)(this.Rows.Find(new object[] {
                            NameDictionary_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                NameDictionaryDataTable cln = ((NameDictionaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NameDictionaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnUID = base.Columns["UID"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnSDX = base.Columns["SDX"];
                this.columnTT = base.Columns["TT"];
                this.columnNameDictionary_ID = base.Columns["NameDictionary_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnUID = new global::System.Data.DataColumn("UID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUID);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnSDX = new global::System.Data.DataColumn("SDX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSDX);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnNameDictionary_ID = new global::System.Data.DataColumn("NameDictionary_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNameDictionary_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNameDictionary_ID}, true));
                this.columnVALUE.MaxLength = 2147483647;
                this.columnSDX.MaxLength = 4;
                this.columnTT.MaxLength = 1;
                this.columnNameDictionary_ID.AutoIncrement = true;
                this.columnNameDictionary_ID.AutoIncrementSeed = -1;
                this.columnNameDictionary_ID.AutoIncrementStep = -1;
                this.columnNameDictionary_ID.AllowDBNull = false;
                this.columnNameDictionary_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameDictionaryRow NewNameDictionaryRow() {
                return ((NameDictionaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NameDictionaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(NameDictionaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NameDictionaryRowChanged != null)) {
                    this.NameDictionaryRowChanged(this, new NameDictionaryRowChangeEvent(((NameDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NameDictionaryRowChanging != null)) {
                    this.NameDictionaryRowChanging(this, new NameDictionaryRowChangeEvent(((NameDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NameDictionaryRowDeleted != null)) {
                    this.NameDictionaryRowDeleted(this, new NameDictionaryRowChangeEvent(((NameDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NameDictionaryRowDeleting != null)) {
                    this.NameDictionaryRowDeleting(this, new NameDictionaryRowChangeEvent(((NameDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveNameDictionaryRow(NameDictionaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NameDictionaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NamePartTypeDataTable : global::System.Data.TypedTableBase<NamePartTypeRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnSYSTEM;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnSHORTVALUE;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnTEMPLATE;
            
            private global::System.Data.DataColumn columnNamePartType_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartTypeDataTable() {
                this.TableName = "NamePartType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NamePartTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected NamePartTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SYSTEMColumn {
                get {
                    return this.columnSYSTEM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SHORTVALUEColumn {
                get {
                    return this.columnSHORTVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEMPLATEColumn {
                get {
                    return this.columnTEMPLATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NamePartType_IDColumn {
                get {
                    return this.columnNamePartType_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartTypeRow this[int index] {
                get {
                    return ((NamePartTypeRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NamePartTypeRowChangeEventHandler NamePartTypeRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NamePartTypeRowChangeEventHandler NamePartTypeRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NamePartTypeRowChangeEventHandler NamePartTypeRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NamePartTypeRowChangeEventHandler NamePartTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNamePartTypeRow(NamePartTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartTypeRow AddNamePartTypeRow(long ID, string VALUE, bool SYSTEM, long TYPE, string SHORTVALUE, string TT, long DSID, string TEMPLATE) {
                NamePartTypeRow rowNamePartTypeRow = ((NamePartTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        VALUE,
                        SYSTEM,
                        TYPE,
                        SHORTVALUE,
                        TT,
                        DSID,
                        TEMPLATE,
                        null};
                rowNamePartTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNamePartTypeRow);
                return rowNamePartTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartTypeRow FindByNamePartType_ID(long NamePartType_ID) {
                return ((NamePartTypeRow)(this.Rows.Find(new object[] {
                            NamePartType_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                NamePartTypeDataTable cln = ((NamePartTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NamePartTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnSYSTEM = base.Columns["SYSTEM"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnSHORTVALUE = base.Columns["SHORTVALUE"];
                this.columnTT = base.Columns["TT"];
                this.columnDSID = base.Columns["DSID"];
                this.columnTEMPLATE = base.Columns["TEMPLATE"];
                this.columnNamePartType_ID = base.Columns["NamePartType_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnSYSTEM = new global::System.Data.DataColumn("SYSTEM", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSTEM);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnSHORTVALUE = new global::System.Data.DataColumn("SHORTVALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHORTVALUE);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnTEMPLATE = new global::System.Data.DataColumn("TEMPLATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEMPLATE);
                this.columnNamePartType_ID = new global::System.Data.DataColumn("NamePartType_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNamePartType_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNamePartType_ID}, true));
                this.columnVALUE.MaxLength = 100;
                this.columnSHORTVALUE.MaxLength = 20;
                this.columnTT.MaxLength = 1;
                this.columnTEMPLATE.MaxLength = 30;
                this.columnNamePartType_ID.AutoIncrement = true;
                this.columnNamePartType_ID.AutoIncrementSeed = -1;
                this.columnNamePartType_ID.AutoIncrementStep = -1;
                this.columnNamePartType_ID.AllowDBNull = false;
                this.columnNamePartType_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartTypeRow NewNamePartTypeRow() {
                return ((NamePartTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NamePartTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(NamePartTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NamePartTypeRowChanged != null)) {
                    this.NamePartTypeRowChanged(this, new NamePartTypeRowChangeEvent(((NamePartTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NamePartTypeRowChanging != null)) {
                    this.NamePartTypeRowChanging(this, new NamePartTypeRowChangeEvent(((NamePartTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NamePartTypeRowDeleted != null)) {
                    this.NamePartTypeRowDeleted(this, new NamePartTypeRowChangeEvent(((NamePartTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NamePartTypeRowDeleting != null)) {
                    this.NamePartTypeRowDeleting(this, new NamePartTypeRowChangeEvent(((NamePartTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveNamePartTypeRow(NamePartTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NamePartTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NamePartValueDataTable : global::System.Data.TypedTableBase<NamePartValueRow> {
            
            private global::System.Data.DataColumn columnRECNO;
            
            private global::System.Data.DataColumn columnUID;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnNamePartValue_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartValueDataTable() {
                this.TableName = "NamePartValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NamePartValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected NamePartValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECNOColumn {
                get {
                    return this.columnRECNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UIDColumn {
                get {
                    return this.columnUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NamePartValue_IDColumn {
                get {
                    return this.columnNamePartValue_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartValueRow this[int index] {
                get {
                    return ((NamePartValueRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NamePartValueRowChangeEventHandler NamePartValueRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NamePartValueRowChangeEventHandler NamePartValueRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NamePartValueRowChangeEventHandler NamePartValueRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event NamePartValueRowChangeEventHandler NamePartValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNamePartValueRow(NamePartValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartValueRow AddNamePartValueRow(long RECNO, long UID, long TYPE, long ID, string TT, long DSID) {
                NamePartValueRow rowNamePartValueRow = ((NamePartValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RECNO,
                        UID,
                        TYPE,
                        ID,
                        TT,
                        DSID,
                        null};
                rowNamePartValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNamePartValueRow);
                return rowNamePartValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartValueRow FindByNamePartValue_ID(long NamePartValue_ID) {
                return ((NamePartValueRow)(this.Rows.Find(new object[] {
                            NamePartValue_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                NamePartValueDataTable cln = ((NamePartValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NamePartValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnRECNO = base.Columns["RECNO"];
                this.columnUID = base.Columns["UID"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnID = base.Columns["ID"];
                this.columnTT = base.Columns["TT"];
                this.columnDSID = base.Columns["DSID"];
                this.columnNamePartValue_ID = base.Columns["NamePartValue_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnRECNO = new global::System.Data.DataColumn("RECNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECNO);
                this.columnUID = new global::System.Data.DataColumn("UID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUID);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnNamePartValue_ID = new global::System.Data.DataColumn("NamePartValue_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNamePartValue_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNamePartValue_ID}, true));
                this.columnTT.MaxLength = 1;
                this.columnNamePartValue_ID.AutoIncrement = true;
                this.columnNamePartValue_ID.AutoIncrementSeed = -1;
                this.columnNamePartValue_ID.AutoIncrementStep = -1;
                this.columnNamePartValue_ID.AllowDBNull = false;
                this.columnNamePartValue_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartValueRow NewNamePartValueRow() {
                return ((NamePartValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NamePartValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(NamePartValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NamePartValueRowChanged != null)) {
                    this.NamePartValueRowChanged(this, new NamePartValueRowChangeEvent(((NamePartValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NamePartValueRowChanging != null)) {
                    this.NamePartValueRowChanging(this, new NamePartValueRowChangeEvent(((NamePartValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NamePartValueRowDeleted != null)) {
                    this.NamePartValueRowDeleted(this, new NamePartValueRowChangeEvent(((NamePartValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NamePartValueRowDeleting != null)) {
                    this.NamePartValueRowDeleting(this, new NamePartValueRowChangeEvent(((NamePartValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveNamePartValueRow(NamePartValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NamePartValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParentChildRelationshipDataTable : global::System.Data.TypedTableBase<ParentChildRelationshipRow> {
            
            private global::System.Data.DataColumn columnPRIMARY;
            
            private global::System.Data.DataColumn columnCHILD;
            
            private global::System.Data.DataColumn columnPARENT;
            
            private global::System.Data.DataColumn columnPTYPE;
            
            private global::System.Data.DataColumn columnPNOTE;
            
            private global::System.Data.DataColumn columnPSURE;
            
            private global::System.Data.DataColumn columnFSURE;
            
            private global::System.Data.DataColumn columnRECNO;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDSID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentChildRelationshipDataTable() {
                this.TableName = "ParentChildRelationship";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ParentChildRelationshipDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ParentChildRelationshipDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRIMARYColumn {
                get {
                    return this.columnPRIMARY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CHILDColumn {
                get {
                    return this.columnCHILD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PARENTColumn {
                get {
                    return this.columnPARENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PTYPEColumn {
                get {
                    return this.columnPTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PNOTEColumn {
                get {
                    return this.columnPNOTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PSUREColumn {
                get {
                    return this.columnPSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FSUREColumn {
                get {
                    return this.columnFSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECNOColumn {
                get {
                    return this.columnRECNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentChildRelationshipRow this[int index] {
                get {
                    return ((ParentChildRelationshipRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParentChildRelationshipRowChangeEventHandler ParentChildRelationshipRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParentChildRelationshipRowChangeEventHandler ParentChildRelationshipRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParentChildRelationshipRowChangeEventHandler ParentChildRelationshipRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ParentChildRelationshipRowChangeEventHandler ParentChildRelationshipRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddParentChildRelationshipRow(ParentChildRelationshipRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentChildRelationshipRow AddParentChildRelationshipRow(bool PRIMARY, long CHILD, long PARENT, long PTYPE, string PNOTE, string PSURE, string FSURE, long RECNO, string TT, long DSID) {
                ParentChildRelationshipRow rowParentChildRelationshipRow = ((ParentChildRelationshipRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PRIMARY,
                        CHILD,
                        PARENT,
                        PTYPE,
                        PNOTE,
                        PSURE,
                        FSURE,
                        RECNO,
                        TT,
                        DSID};
                rowParentChildRelationshipRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowParentChildRelationshipRow);
                return rowParentChildRelationshipRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentChildRelationshipRow FindByRECNO(long RECNO) {
                return ((ParentChildRelationshipRow)(this.Rows.Find(new object[] {
                            RECNO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ParentChildRelationshipDataTable cln = ((ParentChildRelationshipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ParentChildRelationshipDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnPRIMARY = base.Columns["PRIMARY"];
                this.columnCHILD = base.Columns["CHILD"];
                this.columnPARENT = base.Columns["PARENT"];
                this.columnPTYPE = base.Columns["PTYPE"];
                this.columnPNOTE = base.Columns["PNOTE"];
                this.columnPSURE = base.Columns["PSURE"];
                this.columnFSURE = base.Columns["FSURE"];
                this.columnRECNO = base.Columns["RECNO"];
                this.columnTT = base.Columns["TT"];
                this.columnDSID = base.Columns["DSID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnPRIMARY = new global::System.Data.DataColumn("PRIMARY", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIMARY);
                this.columnCHILD = new global::System.Data.DataColumn("CHILD", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHILD);
                this.columnPARENT = new global::System.Data.DataColumn("PARENT", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARENT);
                this.columnPTYPE = new global::System.Data.DataColumn("PTYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPTYPE);
                this.columnPNOTE = new global::System.Data.DataColumn("PNOTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPNOTE);
                this.columnPSURE = new global::System.Data.DataColumn("PSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPSURE);
                this.columnFSURE = new global::System.Data.DataColumn("FSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSURE);
                this.columnRECNO = new global::System.Data.DataColumn("RECNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECNO);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRECNO}, true));
                this.columnPNOTE.MaxLength = 2147483647;
                this.columnPSURE.MaxLength = 1;
                this.columnFSURE.MaxLength = 1;
                this.columnRECNO.AllowDBNull = false;
                this.columnRECNO.Unique = true;
                this.columnTT.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentChildRelationshipRow NewParentChildRelationshipRow() {
                return ((ParentChildRelationshipRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ParentChildRelationshipRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ParentChildRelationshipRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParentChildRelationshipRowChanged != null)) {
                    this.ParentChildRelationshipRowChanged(this, new ParentChildRelationshipRowChangeEvent(((ParentChildRelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParentChildRelationshipRowChanging != null)) {
                    this.ParentChildRelationshipRowChanging(this, new ParentChildRelationshipRowChangeEvent(((ParentChildRelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParentChildRelationshipRowDeleted != null)) {
                    this.ParentChildRelationshipRowDeleted(this, new ParentChildRelationshipRowChangeEvent(((ParentChildRelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParentChildRelationshipRowDeleting != null)) {
                    this.ParentChildRelationshipRowDeleting(this, new ParentChildRelationshipRowChangeEvent(((ParentChildRelationshipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveParentChildRelationshipRow(ParentChildRelationshipRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParentChildRelationshipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class personDataTable : global::System.Data.TypedTableBase<personRow> {
            
            private global::System.Data.DataColumn columnPER_NO;
            
            private global::System.Data.DataColumn columnFATHER;
            
            private global::System.Data.DataColumn columnMOTHER;
            
            private global::System.Data.DataColumn columnLAST_EDIT;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnREF_ID;
            
            private global::System.Data.DataColumn columnREFERENCE;
            
            private global::System.Data.DataColumn columnSPOULAST;
            
            private global::System.Data.DataColumn columnSCBUFF;
            
            private global::System.Data.DataColumn columnPBIRTH;
            
            private global::System.Data.DataColumn columnPDEATH;
            
            private global::System.Data.DataColumn columnSEX;
            
            private global::System.Data.DataColumn columnLIVING;
            
            private global::System.Data.DataColumn columnBIRTHORDER;
            
            private global::System.Data.DataColumn columnMULTIBIRTH;
            
            private global::System.Data.DataColumn columnADOPTED;
            
            private global::System.Data.DataColumn columnANCE_INT;
            
            private global::System.Data.DataColumn columnDESC_INT;
            
            private global::System.Data.DataColumn columnRELATE;
            
            private global::System.Data.DataColumn columnRELATEFO;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnFLAG1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public personDataTable() {
                this.TableName = "person";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal personDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected personDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PER_NOColumn {
                get {
                    return this.columnPER_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FATHERColumn {
                get {
                    return this.columnFATHER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MOTHERColumn {
                get {
                    return this.columnMOTHER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LAST_EDITColumn {
                get {
                    return this.columnLAST_EDIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REF_IDColumn {
                get {
                    return this.columnREF_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REFERENCEColumn {
                get {
                    return this.columnREFERENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SPOULASTColumn {
                get {
                    return this.columnSPOULAST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SCBUFFColumn {
                get {
                    return this.columnSCBUFF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PBIRTHColumn {
                get {
                    return this.columnPBIRTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PDEATHColumn {
                get {
                    return this.columnPDEATH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SEXColumn {
                get {
                    return this.columnSEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LIVINGColumn {
                get {
                    return this.columnLIVING;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BIRTHORDERColumn {
                get {
                    return this.columnBIRTHORDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MULTIBIRTHColumn {
                get {
                    return this.columnMULTIBIRTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ADOPTEDColumn {
                get {
                    return this.columnADOPTED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ANCE_INTColumn {
                get {
                    return this.columnANCE_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DESC_INTColumn {
                get {
                    return this.columnDESC_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RELATEColumn {
                get {
                    return this.columnRELATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RELATEFOColumn {
                get {
                    return this.columnRELATEFO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FLAG1Column {
                get {
                    return this.columnFLAG1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public personRow this[int index] {
                get {
                    return ((personRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event personRowChangeEventHandler personRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event personRowChangeEventHandler personRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event personRowChangeEventHandler personRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event personRowChangeEventHandler personRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddpersonRow(personRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public personRow AddpersonRow(
                        long PER_NO, 
                        long FATHER, 
                        long MOTHER, 
                        System.DateTime LAST_EDIT, 
                        long DSID, 
                        long REF_ID, 
                        string REFERENCE, 
                        long SPOULAST, 
                        string SCBUFF, 
                        string PBIRTH, 
                        string PDEATH, 
                        string SEX, 
                        string LIVING, 
                        string BIRTHORDER, 
                        string MULTIBIRTH, 
                        string ADOPTED, 
                        string ANCE_INT, 
                        string DESC_INT, 
                        long RELATE, 
                        long RELATEFO, 
                        string TT, 
                        string FLAG1) {
                personRow rowpersonRow = ((personRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PER_NO,
                        FATHER,
                        MOTHER,
                        LAST_EDIT,
                        DSID,
                        REF_ID,
                        REFERENCE,
                        SPOULAST,
                        SCBUFF,
                        PBIRTH,
                        PDEATH,
                        SEX,
                        LIVING,
                        BIRTHORDER,
                        MULTIBIRTH,
                        ADOPTED,
                        ANCE_INT,
                        DESC_INT,
                        RELATE,
                        RELATEFO,
                        TT,
                        FLAG1};
                rowpersonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpersonRow);
                return rowpersonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public personRow FindByPER_NO(long PER_NO) {
                return ((personRow)(this.Rows.Find(new object[] {
                            PER_NO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                personDataTable cln = ((personDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new personDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnPER_NO = base.Columns["PER_NO"];
                this.columnFATHER = base.Columns["FATHER"];
                this.columnMOTHER = base.Columns["MOTHER"];
                this.columnLAST_EDIT = base.Columns["LAST_EDIT"];
                this.columnDSID = base.Columns["DSID"];
                this.columnREF_ID = base.Columns["REF_ID"];
                this.columnREFERENCE = base.Columns["REFERENCE"];
                this.columnSPOULAST = base.Columns["SPOULAST"];
                this.columnSCBUFF = base.Columns["SCBUFF"];
                this.columnPBIRTH = base.Columns["PBIRTH"];
                this.columnPDEATH = base.Columns["PDEATH"];
                this.columnSEX = base.Columns["SEX"];
                this.columnLIVING = base.Columns["LIVING"];
                this.columnBIRTHORDER = base.Columns["BIRTHORDER"];
                this.columnMULTIBIRTH = base.Columns["MULTIBIRTH"];
                this.columnADOPTED = base.Columns["ADOPTED"];
                this.columnANCE_INT = base.Columns["ANCE_INT"];
                this.columnDESC_INT = base.Columns["DESC_INT"];
                this.columnRELATE = base.Columns["RELATE"];
                this.columnRELATEFO = base.Columns["RELATEFO"];
                this.columnTT = base.Columns["TT"];
                this.columnFLAG1 = base.Columns["FLAG1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnPER_NO = new global::System.Data.DataColumn("PER_NO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPER_NO);
                this.columnFATHER = new global::System.Data.DataColumn("FATHER", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFATHER);
                this.columnMOTHER = new global::System.Data.DataColumn("MOTHER", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOTHER);
                this.columnLAST_EDIT = new global::System.Data.DataColumn("LAST_EDIT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAST_EDIT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnREF_ID = new global::System.Data.DataColumn("REF_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREF_ID);
                this.columnREFERENCE = new global::System.Data.DataColumn("REFERENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFERENCE);
                this.columnSPOULAST = new global::System.Data.DataColumn("SPOULAST", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPOULAST);
                this.columnSCBUFF = new global::System.Data.DataColumn("SCBUFF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCBUFF);
                this.columnPBIRTH = new global::System.Data.DataColumn("PBIRTH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPBIRTH);
                this.columnPDEATH = new global::System.Data.DataColumn("PDEATH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPDEATH);
                this.columnSEX = new global::System.Data.DataColumn("SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEX);
                this.columnLIVING = new global::System.Data.DataColumn("LIVING", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIVING);
                this.columnBIRTHORDER = new global::System.Data.DataColumn("BIRTHORDER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBIRTHORDER);
                this.columnMULTIBIRTH = new global::System.Data.DataColumn("MULTIBIRTH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMULTIBIRTH);
                this.columnADOPTED = new global::System.Data.DataColumn("ADOPTED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADOPTED);
                this.columnANCE_INT = new global::System.Data.DataColumn("ANCE_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnANCE_INT);
                this.columnDESC_INT = new global::System.Data.DataColumn("DESC_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESC_INT);
                this.columnRELATE = new global::System.Data.DataColumn("RELATE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRELATE);
                this.columnRELATEFO = new global::System.Data.DataColumn("RELATEFO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRELATEFO);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnFLAG1 = new global::System.Data.DataColumn("FLAG1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLAG1);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPER_NO}, true));
                this.columnPER_NO.AllowDBNull = false;
                this.columnPER_NO.Unique = true;
                this.columnLAST_EDIT.AllowDBNull = false;
                this.columnDSID.AllowDBNull = false;
                this.columnREFERENCE.MaxLength = 12;
                this.columnSCBUFF.MaxLength = 10;
                this.columnPBIRTH.MaxLength = 30;
                this.columnPDEATH.MaxLength = 30;
                this.columnSEX.AllowDBNull = false;
                this.columnSEX.MaxLength = 1;
                this.columnLIVING.AllowDBNull = false;
                this.columnLIVING.MaxLength = 1;
                this.columnBIRTHORDER.AllowDBNull = false;
                this.columnBIRTHORDER.MaxLength = 2;
                this.columnMULTIBIRTH.AllowDBNull = false;
                this.columnMULTIBIRTH.MaxLength = 1;
                this.columnADOPTED.AllowDBNull = false;
                this.columnADOPTED.MaxLength = 1;
                this.columnANCE_INT.AllowDBNull = false;
                this.columnANCE_INT.MaxLength = 1;
                this.columnDESC_INT.AllowDBNull = false;
                this.columnDESC_INT.MaxLength = 1;
                this.columnTT.MaxLength = 1;
                this.columnFLAG1.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public personRow NewpersonRow() {
                return ((personRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new personRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(personRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.personRowChanged != null)) {
                    this.personRowChanged(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.personRowChanging != null)) {
                    this.personRowChanging(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.personRowDeleted != null)) {
                    this.personRowDeleted(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.personRowDeleting != null)) {
                    this.personRowDeleting(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovepersonRow(personRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "personDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlaceDictionaryDataTable : global::System.Data.TypedTableBase<PlaceDictionaryRow> {
            
            private global::System.Data.DataColumn columnUID;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnSDX;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnPlaceDictionary_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceDictionaryDataTable() {
                this.TableName = "PlaceDictionary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlaceDictionaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PlaceDictionaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UIDColumn {
                get {
                    return this.columnUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SDXColumn {
                get {
                    return this.columnSDX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlaceDictionary_IDColumn {
                get {
                    return this.columnPlaceDictionary_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceDictionaryRow this[int index] {
                get {
                    return ((PlaceDictionaryRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlaceDictionaryRowChangeEventHandler PlaceDictionaryRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlaceDictionaryRowChangeEventHandler PlaceDictionaryRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlaceDictionaryRowChangeEventHandler PlaceDictionaryRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlaceDictionaryRowChangeEventHandler PlaceDictionaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPlaceDictionaryRow(PlaceDictionaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceDictionaryRow AddPlaceDictionaryRow(long UID, string VALUE, string SDX, string TT) {
                PlaceDictionaryRow rowPlaceDictionaryRow = ((PlaceDictionaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UID,
                        VALUE,
                        SDX,
                        TT,
                        null};
                rowPlaceDictionaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlaceDictionaryRow);
                return rowPlaceDictionaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceDictionaryRow FindByPlaceDictionary_ID(long PlaceDictionary_ID) {
                return ((PlaceDictionaryRow)(this.Rows.Find(new object[] {
                            PlaceDictionary_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PlaceDictionaryDataTable cln = ((PlaceDictionaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PlaceDictionaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnUID = base.Columns["UID"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnSDX = base.Columns["SDX"];
                this.columnTT = base.Columns["TT"];
                this.columnPlaceDictionary_ID = base.Columns["PlaceDictionary_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnUID = new global::System.Data.DataColumn("UID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUID);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnSDX = new global::System.Data.DataColumn("SDX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSDX);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnPlaceDictionary_ID = new global::System.Data.DataColumn("PlaceDictionary_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlaceDictionary_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPlaceDictionary_ID}, true));
                this.columnVALUE.MaxLength = 2147483647;
                this.columnSDX.MaxLength = 4;
                this.columnTT.MaxLength = 1;
                this.columnPlaceDictionary_ID.AutoIncrement = true;
                this.columnPlaceDictionary_ID.AutoIncrementSeed = -1;
                this.columnPlaceDictionary_ID.AutoIncrementStep = -1;
                this.columnPlaceDictionary_ID.AllowDBNull = false;
                this.columnPlaceDictionary_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceDictionaryRow NewPlaceDictionaryRow() {
                return ((PlaceDictionaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PlaceDictionaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PlaceDictionaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlaceDictionaryRowChanged != null)) {
                    this.PlaceDictionaryRowChanged(this, new PlaceDictionaryRowChangeEvent(((PlaceDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlaceDictionaryRowChanging != null)) {
                    this.PlaceDictionaryRowChanging(this, new PlaceDictionaryRowChangeEvent(((PlaceDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlaceDictionaryRowDeleted != null)) {
                    this.PlaceDictionaryRowDeleted(this, new PlaceDictionaryRowChangeEvent(((PlaceDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlaceDictionaryRowDeleting != null)) {
                    this.PlaceDictionaryRowDeleting(this, new PlaceDictionaryRowChangeEvent(((PlaceDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePlaceDictionaryRow(PlaceDictionaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlaceDictionaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlaceFileDataTable : global::System.Data.TypedTableBase<PlaceFileRow> {
            
            private global::System.Data.DataColumn columnRECNO;
            
            private global::System.Data.DataColumn columnSTYLEID;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnSTARTYEAR;
            
            private global::System.Data.DataColumn columnENDYEAR;
            
            private global::System.Data.DataColumn columnCOMMENT;
            
            private global::System.Data.DataColumn columnSHORTPLACE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceFileDataTable() {
                this.TableName = "PlaceFile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlaceFileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PlaceFileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECNOColumn {
                get {
                    return this.columnRECNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STYLEIDColumn {
                get {
                    return this.columnSTYLEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STARTYEARColumn {
                get {
                    return this.columnSTARTYEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ENDYEARColumn {
                get {
                    return this.columnENDYEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COMMENTColumn {
                get {
                    return this.columnCOMMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SHORTPLACEColumn {
                get {
                    return this.columnSHORTPLACE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceFileRow this[int index] {
                get {
                    return ((PlaceFileRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlaceFileRowChangeEventHandler PlaceFileRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlaceFileRowChangeEventHandler PlaceFileRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlaceFileRowChangeEventHandler PlaceFileRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlaceFileRowChangeEventHandler PlaceFileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPlaceFileRow(PlaceFileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceFileRow AddPlaceFileRow(long RECNO, long STYLEID, long DSID, string TT, string STARTYEAR, string ENDYEAR, string COMMENT, string SHORTPLACE) {
                PlaceFileRow rowPlaceFileRow = ((PlaceFileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RECNO,
                        STYLEID,
                        DSID,
                        TT,
                        STARTYEAR,
                        ENDYEAR,
                        COMMENT,
                        SHORTPLACE};
                rowPlaceFileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlaceFileRow);
                return rowPlaceFileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceFileRow FindByRECNO(long RECNO) {
                return ((PlaceFileRow)(this.Rows.Find(new object[] {
                            RECNO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PlaceFileDataTable cln = ((PlaceFileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PlaceFileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnRECNO = base.Columns["RECNO"];
                this.columnSTYLEID = base.Columns["STYLEID"];
                this.columnDSID = base.Columns["DSID"];
                this.columnTT = base.Columns["TT"];
                this.columnSTARTYEAR = base.Columns["STARTYEAR"];
                this.columnENDYEAR = base.Columns["ENDYEAR"];
                this.columnCOMMENT = base.Columns["COMMENT"];
                this.columnSHORTPLACE = base.Columns["SHORTPLACE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnRECNO = new global::System.Data.DataColumn("RECNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECNO);
                this.columnSTYLEID = new global::System.Data.DataColumn("STYLEID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTYLEID);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnSTARTYEAR = new global::System.Data.DataColumn("STARTYEAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTARTYEAR);
                this.columnENDYEAR = new global::System.Data.DataColumn("ENDYEAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENDYEAR);
                this.columnCOMMENT = new global::System.Data.DataColumn("COMMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMMENT);
                this.columnSHORTPLACE = new global::System.Data.DataColumn("SHORTPLACE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHORTPLACE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRECNO}, true));
                this.columnRECNO.AllowDBNull = false;
                this.columnRECNO.Unique = true;
                this.columnTT.MaxLength = 1;
                this.columnSTARTYEAR.MaxLength = 4;
                this.columnENDYEAR.MaxLength = 4;
                this.columnCOMMENT.MaxLength = 2147483647;
                this.columnSHORTPLACE.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceFileRow NewPlaceFileRow() {
                return ((PlaceFileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PlaceFileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PlaceFileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlaceFileRowChanged != null)) {
                    this.PlaceFileRowChanged(this, new PlaceFileRowChangeEvent(((PlaceFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlaceFileRowChanging != null)) {
                    this.PlaceFileRowChanging(this, new PlaceFileRowChangeEvent(((PlaceFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlaceFileRowDeleted != null)) {
                    this.PlaceFileRowDeleted(this, new PlaceFileRowChangeEvent(((PlaceFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlaceFileRowDeleting != null)) {
                    this.PlaceFileRowDeleting(this, new PlaceFileRowChangeEvent(((PlaceFileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePlaceFileRow(PlaceFileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlaceFileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlacePartTypeDataTable : global::System.Data.TypedTableBase<PlacePartTypeRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnSYSTEM;
            
            private global::System.Data.DataColumn columnSHORTVALUE;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnPlacePartType_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartTypeDataTable() {
                this.TableName = "PlacePartType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlacePartTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PlacePartTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SYSTEMColumn {
                get {
                    return this.columnSYSTEM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SHORTVALUEColumn {
                get {
                    return this.columnSHORTVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlacePartType_IDColumn {
                get {
                    return this.columnPlacePartType_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartTypeRow this[int index] {
                get {
                    return ((PlacePartTypeRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlacePartTypeRowChangeEventHandler PlacePartTypeRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlacePartTypeRowChangeEventHandler PlacePartTypeRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlacePartTypeRowChangeEventHandler PlacePartTypeRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlacePartTypeRowChangeEventHandler PlacePartTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPlacePartTypeRow(PlacePartTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartTypeRow AddPlacePartTypeRow(long ID, long TYPE, string VALUE, bool SYSTEM, string SHORTVALUE, string TT, long DSID) {
                PlacePartTypeRow rowPlacePartTypeRow = ((PlacePartTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        TYPE,
                        VALUE,
                        SYSTEM,
                        SHORTVALUE,
                        TT,
                        DSID,
                        null};
                rowPlacePartTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlacePartTypeRow);
                return rowPlacePartTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartTypeRow FindByPlacePartType_ID(long PlacePartType_ID) {
                return ((PlacePartTypeRow)(this.Rows.Find(new object[] {
                            PlacePartType_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PlacePartTypeDataTable cln = ((PlacePartTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PlacePartTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnSYSTEM = base.Columns["SYSTEM"];
                this.columnSHORTVALUE = base.Columns["SHORTVALUE"];
                this.columnTT = base.Columns["TT"];
                this.columnDSID = base.Columns["DSID"];
                this.columnPlacePartType_ID = base.Columns["PlacePartType_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnSYSTEM = new global::System.Data.DataColumn("SYSTEM", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSYSTEM);
                this.columnSHORTVALUE = new global::System.Data.DataColumn("SHORTVALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHORTVALUE);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnPlacePartType_ID = new global::System.Data.DataColumn("PlacePartType_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlacePartType_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPlacePartType_ID}, true));
                this.columnVALUE.MaxLength = 100;
                this.columnSHORTVALUE.MaxLength = 20;
                this.columnTT.MaxLength = 1;
                this.columnPlacePartType_ID.AutoIncrement = true;
                this.columnPlacePartType_ID.AutoIncrementSeed = -1;
                this.columnPlacePartType_ID.AutoIncrementStep = -1;
                this.columnPlacePartType_ID.AllowDBNull = false;
                this.columnPlacePartType_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartTypeRow NewPlacePartTypeRow() {
                return ((PlacePartTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PlacePartTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PlacePartTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlacePartTypeRowChanged != null)) {
                    this.PlacePartTypeRowChanged(this, new PlacePartTypeRowChangeEvent(((PlacePartTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlacePartTypeRowChanging != null)) {
                    this.PlacePartTypeRowChanging(this, new PlacePartTypeRowChangeEvent(((PlacePartTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlacePartTypeRowDeleted != null)) {
                    this.PlacePartTypeRowDeleted(this, new PlacePartTypeRowChangeEvent(((PlacePartTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlacePartTypeRowDeleting != null)) {
                    this.PlacePartTypeRowDeleting(this, new PlacePartTypeRowChangeEvent(((PlacePartTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePlacePartTypeRow(PlacePartTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlacePartTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlacePartValueDataTable : global::System.Data.TypedTableBase<PlacePartValueRow> {
            
            private global::System.Data.DataColumn columnRECNO;
            
            private global::System.Data.DataColumn columnUID;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnPlacePartValue_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartValueDataTable() {
                this.TableName = "PlacePartValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlacePartValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PlacePartValueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECNOColumn {
                get {
                    return this.columnRECNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UIDColumn {
                get {
                    return this.columnUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PlacePartValue_IDColumn {
                get {
                    return this.columnPlacePartValue_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartValueRow this[int index] {
                get {
                    return ((PlacePartValueRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlacePartValueRowChangeEventHandler PlacePartValueRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlacePartValueRowChangeEventHandler PlacePartValueRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlacePartValueRowChangeEventHandler PlacePartValueRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PlacePartValueRowChangeEventHandler PlacePartValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPlacePartValueRow(PlacePartValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartValueRow AddPlacePartValueRow(long RECNO, long UID, long TYPE, long ID, string TT, long DSID) {
                PlacePartValueRow rowPlacePartValueRow = ((PlacePartValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RECNO,
                        UID,
                        TYPE,
                        ID,
                        TT,
                        DSID,
                        null};
                rowPlacePartValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlacePartValueRow);
                return rowPlacePartValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartValueRow FindByPlacePartValue_ID(long PlacePartValue_ID) {
                return ((PlacePartValueRow)(this.Rows.Find(new object[] {
                            PlacePartValue_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PlacePartValueDataTable cln = ((PlacePartValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PlacePartValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnRECNO = base.Columns["RECNO"];
                this.columnUID = base.Columns["UID"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnID = base.Columns["ID"];
                this.columnTT = base.Columns["TT"];
                this.columnDSID = base.Columns["DSID"];
                this.columnPlacePartValue_ID = base.Columns["PlacePartValue_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnRECNO = new global::System.Data.DataColumn("RECNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECNO);
                this.columnUID = new global::System.Data.DataColumn("UID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUID);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnPlacePartValue_ID = new global::System.Data.DataColumn("PlacePartValue_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlacePartValue_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPlacePartValue_ID}, true));
                this.columnTT.MaxLength = 1;
                this.columnPlacePartValue_ID.AutoIncrement = true;
                this.columnPlacePartValue_ID.AutoIncrementSeed = -1;
                this.columnPlacePartValue_ID.AutoIncrementStep = -1;
                this.columnPlacePartValue_ID.AllowDBNull = false;
                this.columnPlacePartValue_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartValueRow NewPlacePartValueRow() {
                return ((PlacePartValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PlacePartValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PlacePartValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlacePartValueRowChanged != null)) {
                    this.PlacePartValueRowChanged(this, new PlacePartValueRowChangeEvent(((PlacePartValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlacePartValueRowChanging != null)) {
                    this.PlacePartValueRowChanging(this, new PlacePartValueRowChangeEvent(((PlacePartValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlacePartValueRowDeleted != null)) {
                    this.PlacePartValueRowDeleted(this, new PlacePartValueRowChangeEvent(((PlacePartValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlacePartValueRowDeleting != null)) {
                    this.PlacePartValueRowDeleting(this, new PlacePartValueRowChangeEvent(((PlacePartValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePlacePartValueRow(PlacePartValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlacePartValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RepositoryDataTable : global::System.Data.TypedTableBase<RepositoryRow> {
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnRECNO;
            
            private global::System.Data.DataColumn columnREF_ID;
            
            private global::System.Data.DataColumn columnABBREV;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            private global::System.Data.DataColumn columnRNOTE;
            
            private global::System.Data.DataColumn columnRPERNO;
            
            private global::System.Data.DataColumn columnISPICKED;
            
            private global::System.Data.DataColumn columnTT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RepositoryDataTable() {
                this.TableName = "Repository";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RepositoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected RepositoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECNOColumn {
                get {
                    return this.columnRECNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REF_IDColumn {
                get {
                    return this.columnREF_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ABBREVColumn {
                get {
                    return this.columnABBREV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RNOTEColumn {
                get {
                    return this.columnRNOTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RPERNOColumn {
                get {
                    return this.columnRPERNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ISPICKEDColumn {
                get {
                    return this.columnISPICKED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RepositoryRow this[int index] {
                get {
                    return ((RepositoryRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RepositoryRowChangeEventHandler RepositoryRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RepositoryRowChangeEventHandler RepositoryRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RepositoryRowChangeEventHandler RepositoryRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RepositoryRowChangeEventHandler RepositoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRepositoryRow(RepositoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RepositoryRow AddRepositoryRow(long DSID, string NAME, long REF_ID, string ABBREV, long ADDRESS, string RNOTE, long RPERNO, bool ISPICKED, string TT) {
                RepositoryRow rowRepositoryRow = ((RepositoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DSID,
                        NAME,
                        null,
                        REF_ID,
                        ABBREV,
                        ADDRESS,
                        RNOTE,
                        RPERNO,
                        ISPICKED,
                        TT};
                rowRepositoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRepositoryRow);
                return rowRepositoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RepositoryRow FindByRECNO(long RECNO) {
                return ((RepositoryRow)(this.Rows.Find(new object[] {
                            RECNO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                RepositoryDataTable cln = ((RepositoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RepositoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDSID = base.Columns["DSID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnRECNO = base.Columns["RECNO"];
                this.columnREF_ID = base.Columns["REF_ID"];
                this.columnABBREV = base.Columns["ABBREV"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnRNOTE = base.Columns["RNOTE"];
                this.columnRPERNO = base.Columns["RPERNO"];
                this.columnISPICKED = base.Columns["ISPICKED"];
                this.columnTT = base.Columns["TT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnRECNO = new global::System.Data.DataColumn("RECNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECNO);
                this.columnREF_ID = new global::System.Data.DataColumn("REF_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREF_ID);
                this.columnABBREV = new global::System.Data.DataColumn("ABBREV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABBREV);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnRNOTE = new global::System.Data.DataColumn("RNOTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRNOTE);
                this.columnRPERNO = new global::System.Data.DataColumn("RPERNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRPERNO);
                this.columnISPICKED = new global::System.Data.DataColumn("ISPICKED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISPICKED);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRECNO}, true));
                this.columnNAME.MaxLength = 2147483647;
                this.columnRECNO.AutoIncrement = true;
                this.columnRECNO.AutoIncrementSeed = -1;
                this.columnRECNO.AutoIncrementStep = -1;
                this.columnRECNO.AllowDBNull = false;
                this.columnRECNO.Unique = true;
                this.columnABBREV.MaxLength = 50;
                this.columnRNOTE.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RepositoryRow NewRepositoryRow() {
                return ((RepositoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RepositoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(RepositoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RepositoryRowChanged != null)) {
                    this.RepositoryRowChanged(this, new RepositoryRowChangeEvent(((RepositoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RepositoryRowChanging != null)) {
                    this.RepositoryRowChanging(this, new RepositoryRowChangeEvent(((RepositoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RepositoryRowDeleted != null)) {
                    this.RepositoryRowDeleted(this, new RepositoryRowChangeEvent(((RepositoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RepositoryRowDeleting != null)) {
                    this.RepositoryRowDeleting(this, new RepositoryRowChangeEvent(((RepositoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRepositoryRow(RepositoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RepositoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResearchLogDataTable : global::System.Data.TypedTableBase<ResearchLogRow> {
            
            private global::System.Data.DataColumn columnRLTYPE;
            
            private global::System.Data.DataColumn columnRLNUM;
            
            private global::System.Data.DataColumn columnRLPER1;
            
            private global::System.Data.DataColumn columnRLPER2;
            
            private global::System.Data.DataColumn columnRLGTYPE;
            
            private global::System.Data.DataColumn columnTASK;
            
            private global::System.Data.DataColumn columnRLEDITED;
            
            private global::System.Data.DataColumn columnDESIGNED;
            
            private global::System.Data.DataColumn columnBEGUN;
            
            private global::System.Data.DataColumn columnPROGRESS;
            
            private global::System.Data.DataColumn columnCOMPLETED;
            
            private global::System.Data.DataColumn columnPLANNED;
            
            private global::System.Data.DataColumn columnEXPENSES;
            
            private global::System.Data.DataColumn columnCOMMENTS;
            
            private global::System.Data.DataColumn columnRLNOTE;
            
            private global::System.Data.DataColumn columnKEYWORDS;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnID_PERSON;
            
            private global::System.Data.DataColumn columnID_EVENT;
            
            private global::System.Data.DataColumn columnID_SOURCE;
            
            private global::System.Data.DataColumn columnID_REPOS;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnREFERENCE;
            
            private global::System.Data.DataColumn columnResearchLog_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ResearchLogDataTable() {
                this.TableName = "ResearchLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ResearchLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ResearchLogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLTYPEColumn {
                get {
                    return this.columnRLTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLNUMColumn {
                get {
                    return this.columnRLNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLPER1Column {
                get {
                    return this.columnRLPER1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLPER2Column {
                get {
                    return this.columnRLPER2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLGTYPEColumn {
                get {
                    return this.columnRLGTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TASKColumn {
                get {
                    return this.columnTASK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLEDITEDColumn {
                get {
                    return this.columnRLEDITED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DESIGNEDColumn {
                get {
                    return this.columnDESIGNED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BEGUNColumn {
                get {
                    return this.columnBEGUN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PROGRESSColumn {
                get {
                    return this.columnPROGRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COMPLETEDColumn {
                get {
                    return this.columnCOMPLETED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PLANNEDColumn {
                get {
                    return this.columnPLANNED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EXPENSESColumn {
                get {
                    return this.columnEXPENSES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COMMENTSColumn {
                get {
                    return this.columnCOMMENTS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RLNOTEColumn {
                get {
                    return this.columnRLNOTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KEYWORDSColumn {
                get {
                    return this.columnKEYWORDS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_PERSONColumn {
                get {
                    return this.columnID_PERSON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_EVENTColumn {
                get {
                    return this.columnID_EVENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_SOURCEColumn {
                get {
                    return this.columnID_SOURCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_REPOSColumn {
                get {
                    return this.columnID_REPOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REFERENCEColumn {
                get {
                    return this.columnREFERENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ResearchLog_IDColumn {
                get {
                    return this.columnResearchLog_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ResearchLogRow this[int index] {
                get {
                    return ((ResearchLogRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ResearchLogRowChangeEventHandler ResearchLogRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ResearchLogRowChangeEventHandler ResearchLogRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ResearchLogRowChangeEventHandler ResearchLogRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ResearchLogRowChangeEventHandler ResearchLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddResearchLogRow(ResearchLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ResearchLogRow AddResearchLogRow(
                        string RLTYPE, 
                        long RLNUM, 
                        long RLPER1, 
                        long RLPER2, 
                        long RLGTYPE, 
                        string TASK, 
                        string RLEDITED, 
                        string DESIGNED, 
                        string BEGUN, 
                        string PROGRESS, 
                        string COMPLETED, 
                        string PLANNED, 
                        decimal EXPENSES, 
                        string COMMENTS, 
                        string RLNOTE, 
                        string KEYWORDS, 
                        long DSID, 
                        long ID_PERSON, 
                        long ID_EVENT, 
                        long ID_SOURCE, 
                        long ID_REPOS, 
                        string TT, 
                        string REFERENCE) {
                ResearchLogRow rowResearchLogRow = ((ResearchLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RLTYPE,
                        RLNUM,
                        RLPER1,
                        RLPER2,
                        RLGTYPE,
                        TASK,
                        RLEDITED,
                        DESIGNED,
                        BEGUN,
                        PROGRESS,
                        COMPLETED,
                        PLANNED,
                        EXPENSES,
                        COMMENTS,
                        RLNOTE,
                        KEYWORDS,
                        DSID,
                        ID_PERSON,
                        ID_EVENT,
                        ID_SOURCE,
                        ID_REPOS,
                        TT,
                        REFERENCE,
                        null};
                rowResearchLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowResearchLogRow);
                return rowResearchLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ResearchLogRow FindByResearchLog_ID(long ResearchLog_ID) {
                return ((ResearchLogRow)(this.Rows.Find(new object[] {
                            ResearchLog_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ResearchLogDataTable cln = ((ResearchLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ResearchLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnRLTYPE = base.Columns["RLTYPE"];
                this.columnRLNUM = base.Columns["RLNUM"];
                this.columnRLPER1 = base.Columns["RLPER1"];
                this.columnRLPER2 = base.Columns["RLPER2"];
                this.columnRLGTYPE = base.Columns["RLGTYPE"];
                this.columnTASK = base.Columns["TASK"];
                this.columnRLEDITED = base.Columns["RLEDITED"];
                this.columnDESIGNED = base.Columns["DESIGNED"];
                this.columnBEGUN = base.Columns["BEGUN"];
                this.columnPROGRESS = base.Columns["PROGRESS"];
                this.columnCOMPLETED = base.Columns["COMPLETED"];
                this.columnPLANNED = base.Columns["PLANNED"];
                this.columnEXPENSES = base.Columns["EXPENSES"];
                this.columnCOMMENTS = base.Columns["COMMENTS"];
                this.columnRLNOTE = base.Columns["RLNOTE"];
                this.columnKEYWORDS = base.Columns["KEYWORDS"];
                this.columnDSID = base.Columns["DSID"];
                this.columnID_PERSON = base.Columns["ID_PERSON"];
                this.columnID_EVENT = base.Columns["ID_EVENT"];
                this.columnID_SOURCE = base.Columns["ID_SOURCE"];
                this.columnID_REPOS = base.Columns["ID_REPOS"];
                this.columnTT = base.Columns["TT"];
                this.columnREFERENCE = base.Columns["REFERENCE"];
                this.columnResearchLog_ID = base.Columns["ResearchLog_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnRLTYPE = new global::System.Data.DataColumn("RLTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLTYPE);
                this.columnRLNUM = new global::System.Data.DataColumn("RLNUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLNUM);
                this.columnRLPER1 = new global::System.Data.DataColumn("RLPER1", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLPER1);
                this.columnRLPER2 = new global::System.Data.DataColumn("RLPER2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLPER2);
                this.columnRLGTYPE = new global::System.Data.DataColumn("RLGTYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLGTYPE);
                this.columnTASK = new global::System.Data.DataColumn("TASK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASK);
                this.columnRLEDITED = new global::System.Data.DataColumn("RLEDITED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLEDITED);
                this.columnDESIGNED = new global::System.Data.DataColumn("DESIGNED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESIGNED);
                this.columnBEGUN = new global::System.Data.DataColumn("BEGUN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBEGUN);
                this.columnPROGRESS = new global::System.Data.DataColumn("PROGRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROGRESS);
                this.columnCOMPLETED = new global::System.Data.DataColumn("COMPLETED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPLETED);
                this.columnPLANNED = new global::System.Data.DataColumn("PLANNED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPLANNED);
                this.columnEXPENSES = new global::System.Data.DataColumn("EXPENSES", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXPENSES);
                this.columnCOMMENTS = new global::System.Data.DataColumn("COMMENTS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMMENTS);
                this.columnRLNOTE = new global::System.Data.DataColumn("RLNOTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRLNOTE);
                this.columnKEYWORDS = new global::System.Data.DataColumn("KEYWORDS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKEYWORDS);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnID_PERSON = new global::System.Data.DataColumn("ID_PERSON", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_PERSON);
                this.columnID_EVENT = new global::System.Data.DataColumn("ID_EVENT", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_EVENT);
                this.columnID_SOURCE = new global::System.Data.DataColumn("ID_SOURCE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_SOURCE);
                this.columnID_REPOS = new global::System.Data.DataColumn("ID_REPOS", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_REPOS);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnREFERENCE = new global::System.Data.DataColumn("REFERENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFERENCE);
                this.columnResearchLog_ID = new global::System.Data.DataColumn("ResearchLog_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResearchLog_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnResearchLog_ID}, true));
                this.columnRLTYPE.MaxLength = 1;
                this.columnTASK.MaxLength = 2147483647;
                this.columnRLEDITED.MaxLength = 11;
                this.columnDESIGNED.MaxLength = 11;
                this.columnBEGUN.MaxLength = 11;
                this.columnPROGRESS.MaxLength = 11;
                this.columnCOMPLETED.MaxLength = 11;
                this.columnPLANNED.MaxLength = 11;
                this.columnCOMMENTS.MaxLength = 2147483647;
                this.columnRLNOTE.MaxLength = 2147483647;
                this.columnKEYWORDS.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnREFERENCE.MaxLength = 30;
                this.columnResearchLog_ID.AutoIncrement = true;
                this.columnResearchLog_ID.AutoIncrementSeed = -1;
                this.columnResearchLog_ID.AutoIncrementStep = -1;
                this.columnResearchLog_ID.AllowDBNull = false;
                this.columnResearchLog_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ResearchLogRow NewResearchLogRow() {
                return ((ResearchLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ResearchLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ResearchLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResearchLogRowChanged != null)) {
                    this.ResearchLogRowChanged(this, new ResearchLogRowChangeEvent(((ResearchLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResearchLogRowChanging != null)) {
                    this.ResearchLogRowChanging(this, new ResearchLogRowChangeEvent(((ResearchLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResearchLogRowDeleted != null)) {
                    this.ResearchLogRowDeleted(this, new ResearchLogRowChangeEvent(((ResearchLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResearchLogRowDeleting != null)) {
                    this.ResearchLogRowDeleting(this, new ResearchLogRowChangeEvent(((ResearchLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveResearchLogRow(ResearchLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResearchLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SourceDataTable : global::System.Data.TypedTableBase<SourceRow> {
            
            private global::System.Data.DataColumn columnMACTIVE;
            
            private global::System.Data.DataColumn columnMAJNUM;
            
            private global::System.Data.DataColumn columnREF_ID;
            
            private global::System.Data.DataColumn columnABBREV;
            
            private global::System.Data.DataColumn columnDEFSURE;
            
            private global::System.Data.DataColumn columnTITLE;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnRECORDER;
            
            private global::System.Data.DataColumn columnMEDIA;
            
            private global::System.Data.DataColumn columnFIDELITY;
            
            private global::System.Data.DataColumn columnINDEXED;
            
            private global::System.Data.DataColumn columnSTATUS;
            
            private global::System.Data.DataColumn columnTEXT;
            
            private global::System.Data.DataColumn columnSPERNO;
            
            private global::System.Data.DataColumn columnISPICKED;
            
            private global::System.Data.DataColumn columnINFO;
            
            private global::System.Data.DataColumn columnFFORM;
            
            private global::System.Data.DataColumn columnSFORM;
            
            private global::System.Data.DataColumn columnBFORM;
            
            private global::System.Data.DataColumn columnCITED;
            
            private global::System.Data.DataColumn columnIBIDTYPE;
            
            private global::System.Data.DataColumn columnSUBJECTID;
            
            private global::System.Data.DataColumn columnCOMPILERID;
            
            private global::System.Data.DataColumn columnEDITORID;
            
            private global::System.Data.DataColumn columnSPERNO2;
            
            private global::System.Data.DataColumn columnUNCITEDFLD;
            
            private global::System.Data.DataColumn columnCUSTTYPE;
            
            private global::System.Data.DataColumn columnFIRSTCD;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnREMINDERS;
            
            private global::System.Data.DataColumn columnTT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceDataTable() {
                this.TableName = "Source";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MACTIVEColumn {
                get {
                    return this.columnMACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MAJNUMColumn {
                get {
                    return this.columnMAJNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REF_IDColumn {
                get {
                    return this.columnREF_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ABBREVColumn {
                get {
                    return this.columnABBREV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DEFSUREColumn {
                get {
                    return this.columnDEFSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TITLEColumn {
                get {
                    return this.columnTITLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECORDERColumn {
                get {
                    return this.columnRECORDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MEDIAColumn {
                get {
                    return this.columnMEDIA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FIDELITYColumn {
                get {
                    return this.columnFIDELITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INDEXEDColumn {
                get {
                    return this.columnINDEXED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STATUSColumn {
                get {
                    return this.columnSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEXTColumn {
                get {
                    return this.columnTEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SPERNOColumn {
                get {
                    return this.columnSPERNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ISPICKEDColumn {
                get {
                    return this.columnISPICKED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn INFOColumn {
                get {
                    return this.columnINFO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FFORMColumn {
                get {
                    return this.columnFFORM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SFORMColumn {
                get {
                    return this.columnSFORM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BFORMColumn {
                get {
                    return this.columnBFORM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CITEDColumn {
                get {
                    return this.columnCITED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IBIDTYPEColumn {
                get {
                    return this.columnIBIDTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBJECTIDColumn {
                get {
                    return this.columnSUBJECTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn COMPILERIDColumn {
                get {
                    return this.columnCOMPILERID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EDITORIDColumn {
                get {
                    return this.columnEDITORID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SPERNO2Column {
                get {
                    return this.columnSPERNO2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UNCITEDFLDColumn {
                get {
                    return this.columnUNCITEDFLD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CUSTTYPEColumn {
                get {
                    return this.columnCUSTTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FIRSTCDColumn {
                get {
                    return this.columnFIRSTCD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REMINDERSColumn {
                get {
                    return this.columnREMINDERS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceRow this[int index] {
                get {
                    return ((SourceRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SourceRowChangeEventHandler SourceRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SourceRowChangeEventHandler SourceRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SourceRowChangeEventHandler SourceRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SourceRowChangeEventHandler SourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSourceRow(SourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceRow AddSourceRow(
                        bool MACTIVE, 
                        long MAJNUM, 
                        long REF_ID, 
                        string ABBREV, 
                        string DEFSURE, 
                        string TITLE, 
                        decimal TYPE, 
                        decimal RECORDER, 
                        decimal MEDIA, 
                        decimal FIDELITY, 
                        decimal INDEXED, 
                        decimal STATUS, 
                        string TEXT, 
                        long SPERNO, 
                        bool ISPICKED, 
                        string INFO, 
                        string FFORM, 
                        string SFORM, 
                        string BFORM, 
                        bool CITED, 
                        decimal IBIDTYPE, 
                        long SUBJECTID, 
                        long COMPILERID, 
                        long EDITORID, 
                        long SPERNO2, 
                        string UNCITEDFLD, 
                        long CUSTTYPE, 
                        string FIRSTCD, 
                        long DSID, 
                        string REMINDERS, 
                        string TT) {
                SourceRow rowSourceRow = ((SourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MACTIVE,
                        MAJNUM,
                        REF_ID,
                        ABBREV,
                        DEFSURE,
                        TITLE,
                        TYPE,
                        RECORDER,
                        MEDIA,
                        FIDELITY,
                        INDEXED,
                        STATUS,
                        TEXT,
                        SPERNO,
                        ISPICKED,
                        INFO,
                        FFORM,
                        SFORM,
                        BFORM,
                        CITED,
                        IBIDTYPE,
                        SUBJECTID,
                        COMPILERID,
                        EDITORID,
                        SPERNO2,
                        UNCITEDFLD,
                        CUSTTYPE,
                        FIRSTCD,
                        DSID,
                        REMINDERS,
                        TT};
                rowSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSourceRow);
                return rowSourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceRow FindByMAJNUM(long MAJNUM) {
                return ((SourceRow)(this.Rows.Find(new object[] {
                            MAJNUM})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SourceDataTable cln = ((SourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnMACTIVE = base.Columns["MACTIVE"];
                this.columnMAJNUM = base.Columns["MAJNUM"];
                this.columnREF_ID = base.Columns["REF_ID"];
                this.columnABBREV = base.Columns["ABBREV"];
                this.columnDEFSURE = base.Columns["DEFSURE"];
                this.columnTITLE = base.Columns["TITLE"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnRECORDER = base.Columns["RECORDER"];
                this.columnMEDIA = base.Columns["MEDIA"];
                this.columnFIDELITY = base.Columns["FIDELITY"];
                this.columnINDEXED = base.Columns["INDEXED"];
                this.columnSTATUS = base.Columns["STATUS"];
                this.columnTEXT = base.Columns["TEXT"];
                this.columnSPERNO = base.Columns["SPERNO"];
                this.columnISPICKED = base.Columns["ISPICKED"];
                this.columnINFO = base.Columns["INFO"];
                this.columnFFORM = base.Columns["FFORM"];
                this.columnSFORM = base.Columns["SFORM"];
                this.columnBFORM = base.Columns["BFORM"];
                this.columnCITED = base.Columns["CITED"];
                this.columnIBIDTYPE = base.Columns["IBIDTYPE"];
                this.columnSUBJECTID = base.Columns["SUBJECTID"];
                this.columnCOMPILERID = base.Columns["COMPILERID"];
                this.columnEDITORID = base.Columns["EDITORID"];
                this.columnSPERNO2 = base.Columns["SPERNO2"];
                this.columnUNCITEDFLD = base.Columns["UNCITEDFLD"];
                this.columnCUSTTYPE = base.Columns["CUSTTYPE"];
                this.columnFIRSTCD = base.Columns["FIRSTCD"];
                this.columnDSID = base.Columns["DSID"];
                this.columnREMINDERS = base.Columns["REMINDERS"];
                this.columnTT = base.Columns["TT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnMACTIVE = new global::System.Data.DataColumn("MACTIVE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMACTIVE);
                this.columnMAJNUM = new global::System.Data.DataColumn("MAJNUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAJNUM);
                this.columnREF_ID = new global::System.Data.DataColumn("REF_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREF_ID);
                this.columnABBREV = new global::System.Data.DataColumn("ABBREV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABBREV);
                this.columnDEFSURE = new global::System.Data.DataColumn("DEFSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFSURE);
                this.columnTITLE = new global::System.Data.DataColumn("TITLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTITLE);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnRECORDER = new global::System.Data.DataColumn("RECORDER", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECORDER);
                this.columnMEDIA = new global::System.Data.DataColumn("MEDIA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEDIA);
                this.columnFIDELITY = new global::System.Data.DataColumn("FIDELITY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIDELITY);
                this.columnINDEXED = new global::System.Data.DataColumn("INDEXED", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINDEXED);
                this.columnSTATUS = new global::System.Data.DataColumn("STATUS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATUS);
                this.columnTEXT = new global::System.Data.DataColumn("TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEXT);
                this.columnSPERNO = new global::System.Data.DataColumn("SPERNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPERNO);
                this.columnISPICKED = new global::System.Data.DataColumn("ISPICKED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISPICKED);
                this.columnINFO = new global::System.Data.DataColumn("INFO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFO);
                this.columnFFORM = new global::System.Data.DataColumn("FFORM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFFORM);
                this.columnSFORM = new global::System.Data.DataColumn("SFORM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSFORM);
                this.columnBFORM = new global::System.Data.DataColumn("BFORM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBFORM);
                this.columnCITED = new global::System.Data.DataColumn("CITED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITED);
                this.columnIBIDTYPE = new global::System.Data.DataColumn("IBIDTYPE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIBIDTYPE);
                this.columnSUBJECTID = new global::System.Data.DataColumn("SUBJECTID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBJECTID);
                this.columnCOMPILERID = new global::System.Data.DataColumn("COMPILERID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPILERID);
                this.columnEDITORID = new global::System.Data.DataColumn("EDITORID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEDITORID);
                this.columnSPERNO2 = new global::System.Data.DataColumn("SPERNO2", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPERNO2);
                this.columnUNCITEDFLD = new global::System.Data.DataColumn("UNCITEDFLD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNCITEDFLD);
                this.columnCUSTTYPE = new global::System.Data.DataColumn("CUSTTYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTTYPE);
                this.columnFIRSTCD = new global::System.Data.DataColumn("FIRSTCD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIRSTCD);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnREMINDERS = new global::System.Data.DataColumn("REMINDERS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMINDERS);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAJNUM}, true));
                this.columnMAJNUM.AllowDBNull = false;
                this.columnMAJNUM.Unique = true;
                this.columnABBREV.MaxLength = 50;
                this.columnDEFSURE.MaxLength = 1;
                this.columnTITLE.MaxLength = 2147483647;
                this.columnTEXT.MaxLength = 2147483647;
                this.columnINFO.MaxLength = 2147483647;
                this.columnFFORM.MaxLength = 2147483647;
                this.columnSFORM.MaxLength = 2147483647;
                this.columnBFORM.MaxLength = 2147483647;
                this.columnUNCITEDFLD.MaxLength = 2147483647;
                this.columnFIRSTCD.MaxLength = 2147483647;
                this.columnREMINDERS.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceRow NewSourceRow() {
                return ((SourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SourceRowChanged != null)) {
                    this.SourceRowChanged(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SourceRowChanging != null)) {
                    this.SourceRowChanging(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SourceRowDeleted != null)) {
                    this.SourceRowDeleted(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SourceRowDeleting != null)) {
                    this.SourceRowDeleting(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSourceRow(SourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SourceCitationDataTable : global::System.Data.TypedTableBase<SourceCitationRow> {
            
            private global::System.Data.DataColumn columnRECNO;
            
            private global::System.Data.DataColumn columnSTYPE;
            
            private global::System.Data.DataColumn columnREFREC;
            
            private global::System.Data.DataColumn columnMAJSOURCE;
            
            private global::System.Data.DataColumn columnSUBSOURCE;
            
            private global::System.Data.DataColumn columnSNSURE;
            
            private global::System.Data.DataColumn columnSSSURE;
            
            private global::System.Data.DataColumn columnSDSURE;
            
            private global::System.Data.DataColumn columnSPSURE;
            
            private global::System.Data.DataColumn columnSFSURE;
            
            private global::System.Data.DataColumn columnISPICKED;
            
            private global::System.Data.DataColumn columnSEQUENCE;
            
            private global::System.Data.DataColumn columnCITMEMO;
            
            private global::System.Data.DataColumn columnEXCLUDE;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnCITREF;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceCitationDataTable() {
                this.TableName = "SourceCitation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SourceCitationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SourceCitationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RECNOColumn {
                get {
                    return this.columnRECNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STYPEColumn {
                get {
                    return this.columnSTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REFRECColumn {
                get {
                    return this.columnREFREC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MAJSOURCEColumn {
                get {
                    return this.columnMAJSOURCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SUBSOURCEColumn {
                get {
                    return this.columnSUBSOURCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SNSUREColumn {
                get {
                    return this.columnSNSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SSSUREColumn {
                get {
                    return this.columnSSSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SDSUREColumn {
                get {
                    return this.columnSDSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SPSUREColumn {
                get {
                    return this.columnSPSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SFSUREColumn {
                get {
                    return this.columnSFSURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ISPICKEDColumn {
                get {
                    return this.columnISPICKED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SEQUENCEColumn {
                get {
                    return this.columnSEQUENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CITMEMOColumn {
                get {
                    return this.columnCITMEMO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EXCLUDEColumn {
                get {
                    return this.columnEXCLUDE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CITREFColumn {
                get {
                    return this.columnCITREF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceCitationRow this[int index] {
                get {
                    return ((SourceCitationRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SourceCitationRowChangeEventHandler SourceCitationRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SourceCitationRowChangeEventHandler SourceCitationRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SourceCitationRowChangeEventHandler SourceCitationRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SourceCitationRowChangeEventHandler SourceCitationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSourceCitationRow(SourceCitationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceCitationRow AddSourceCitationRow(
                        string STYPE, 
                        long REFREC, 
                        long MAJSOURCE, 
                        string SUBSOURCE, 
                        string SNSURE, 
                        string SSSURE, 
                        string SDSURE, 
                        string SPSURE, 
                        string SFSURE, 
                        bool ISPICKED, 
                        long SEQUENCE, 
                        string CITMEMO, 
                        bool EXCLUDE, 
                        string TT, 
                        long DSID, 
                        string CITREF) {
                SourceCitationRow rowSourceCitationRow = ((SourceCitationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        STYPE,
                        REFREC,
                        MAJSOURCE,
                        SUBSOURCE,
                        SNSURE,
                        SSSURE,
                        SDSURE,
                        SPSURE,
                        SFSURE,
                        ISPICKED,
                        SEQUENCE,
                        CITMEMO,
                        EXCLUDE,
                        TT,
                        DSID,
                        CITREF};
                rowSourceCitationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSourceCitationRow);
                return rowSourceCitationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceCitationRow FindByRECNO(long RECNO) {
                return ((SourceCitationRow)(this.Rows.Find(new object[] {
                            RECNO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SourceCitationDataTable cln = ((SourceCitationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SourceCitationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnRECNO = base.Columns["RECNO"];
                this.columnSTYPE = base.Columns["STYPE"];
                this.columnREFREC = base.Columns["REFREC"];
                this.columnMAJSOURCE = base.Columns["MAJSOURCE"];
                this.columnSUBSOURCE = base.Columns["SUBSOURCE"];
                this.columnSNSURE = base.Columns["SNSURE"];
                this.columnSSSURE = base.Columns["SSSURE"];
                this.columnSDSURE = base.Columns["SDSURE"];
                this.columnSPSURE = base.Columns["SPSURE"];
                this.columnSFSURE = base.Columns["SFSURE"];
                this.columnISPICKED = base.Columns["ISPICKED"];
                this.columnSEQUENCE = base.Columns["SEQUENCE"];
                this.columnCITMEMO = base.Columns["CITMEMO"];
                this.columnEXCLUDE = base.Columns["EXCLUDE"];
                this.columnTT = base.Columns["TT"];
                this.columnDSID = base.Columns["DSID"];
                this.columnCITREF = base.Columns["CITREF"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnRECNO = new global::System.Data.DataColumn("RECNO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRECNO);
                this.columnSTYPE = new global::System.Data.DataColumn("STYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTYPE);
                this.columnREFREC = new global::System.Data.DataColumn("REFREC", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREFREC);
                this.columnMAJSOURCE = new global::System.Data.DataColumn("MAJSOURCE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAJSOURCE);
                this.columnSUBSOURCE = new global::System.Data.DataColumn("SUBSOURCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBSOURCE);
                this.columnSNSURE = new global::System.Data.DataColumn("SNSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSNSURE);
                this.columnSSSURE = new global::System.Data.DataColumn("SSSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSSURE);
                this.columnSDSURE = new global::System.Data.DataColumn("SDSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSDSURE);
                this.columnSPSURE = new global::System.Data.DataColumn("SPSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPSURE);
                this.columnSFSURE = new global::System.Data.DataColumn("SFSURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSFSURE);
                this.columnISPICKED = new global::System.Data.DataColumn("ISPICKED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISPICKED);
                this.columnSEQUENCE = new global::System.Data.DataColumn("SEQUENCE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEQUENCE);
                this.columnCITMEMO = new global::System.Data.DataColumn("CITMEMO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITMEMO);
                this.columnEXCLUDE = new global::System.Data.DataColumn("EXCLUDE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXCLUDE);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnCITREF = new global::System.Data.DataColumn("CITREF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITREF);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRECNO}, true));
                this.columnRECNO.AutoIncrement = true;
                this.columnRECNO.AutoIncrementSeed = -1;
                this.columnRECNO.AutoIncrementStep = -1;
                this.columnRECNO.AllowDBNull = false;
                this.columnRECNO.Unique = true;
                this.columnSTYPE.MaxLength = 1;
                this.columnSUBSOURCE.MaxLength = 2147483647;
                this.columnSNSURE.MaxLength = 1;
                this.columnSSSURE.MaxLength = 1;
                this.columnSDSURE.MaxLength = 1;
                this.columnSPSURE.MaxLength = 1;
                this.columnSFSURE.MaxLength = 1;
                this.columnCITMEMO.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnCITREF.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceCitationRow NewSourceCitationRow() {
                return ((SourceCitationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SourceCitationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SourceCitationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SourceCitationRowChanged != null)) {
                    this.SourceCitationRowChanged(this, new SourceCitationRowChangeEvent(((SourceCitationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SourceCitationRowChanging != null)) {
                    this.SourceCitationRowChanging(this, new SourceCitationRowChangeEvent(((SourceCitationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SourceCitationRowDeleted != null)) {
                    this.SourceCitationRowDeleted(this, new SourceCitationRowChangeEvent(((SourceCitationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SourceCitationRowDeleting != null)) {
                    this.SourceCitationRowDeleting(this, new SourceCitationRowChangeEvent(((SourceCitationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSourceCitationRow(SourceCitationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SourceCitationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sourcetypeDataTable : global::System.Data.TypedTableBase<sourcetypeRow> {
            
            private global::System.Data.DataColumn columnRULESET;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnSOURTYPE;
            
            private global::System.Data.DataColumn columnTRANS_TO;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnFOOT;
            
            private global::System.Data.DataColumn columnSHORT;
            
            private global::System.Data.DataColumn columnBIB;
            
            private global::System.Data.DataColumn columnCUSTFOOT;
            
            private global::System.Data.DataColumn columnCUSTSHORT;
            
            private global::System.Data.DataColumn columnCUSTBIB;
            
            private global::System.Data.DataColumn columnSAMEAS;
            
            private global::System.Data.DataColumn columnSAMEASMSG;
            
            private global::System.Data.DataColumn columnPRIMARY;
            
            private global::System.Data.DataColumn columnREMINDERS;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnSourceType_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public sourcetypeDataTable() {
                this.TableName = "sourcetype";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal sourcetypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected sourcetypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RULESETColumn {
                get {
                    return this.columnRULESET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SOURTYPEColumn {
                get {
                    return this.columnSOURTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TRANS_TOColumn {
                get {
                    return this.columnTRANS_TO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FOOTColumn {
                get {
                    return this.columnFOOT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SHORTColumn {
                get {
                    return this.columnSHORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BIBColumn {
                get {
                    return this.columnBIB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CUSTFOOTColumn {
                get {
                    return this.columnCUSTFOOT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CUSTSHORTColumn {
                get {
                    return this.columnCUSTSHORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CUSTBIBColumn {
                get {
                    return this.columnCUSTBIB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SAMEASColumn {
                get {
                    return this.columnSAMEAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SAMEASMSGColumn {
                get {
                    return this.columnSAMEASMSG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRIMARYColumn {
                get {
                    return this.columnPRIMARY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REMINDERSColumn {
                get {
                    return this.columnREMINDERS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SourceType_IDColumn {
                get {
                    return this.columnSourceType_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public sourcetypeRow this[int index] {
                get {
                    return ((sourcetypeRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event sourcetypeRowChangeEventHandler sourcetypeRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event sourcetypeRowChangeEventHandler sourcetypeRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event sourcetypeRowChangeEventHandler sourcetypeRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event sourcetypeRowChangeEventHandler sourcetypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddsourcetypeRow(sourcetypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public sourcetypeRow AddsourcetypeRow(
                        decimal RULESET, 
                        long DSID, 
                        long SOURTYPE, 
                        long TRANS_TO, 
                        string NAME, 
                        string FOOT, 
                        string SHORT, 
                        string BIB, 
                        string CUSTFOOT, 
                        string CUSTSHORT, 
                        string CUSTBIB, 
                        long SAMEAS, 
                        string SAMEASMSG, 
                        bool PRIMARY, 
                        string REMINDERS, 
                        string TT) {
                sourcetypeRow rowsourcetypeRow = ((sourcetypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RULESET,
                        DSID,
                        SOURTYPE,
                        TRANS_TO,
                        NAME,
                        FOOT,
                        SHORT,
                        BIB,
                        CUSTFOOT,
                        CUSTSHORT,
                        CUSTBIB,
                        SAMEAS,
                        SAMEASMSG,
                        PRIMARY,
                        REMINDERS,
                        TT,
                        null};
                rowsourcetypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsourcetypeRow);
                return rowsourcetypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public sourcetypeRow FindBySourceType_ID(long SourceType_ID) {
                return ((sourcetypeRow)(this.Rows.Find(new object[] {
                            SourceType_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                sourcetypeDataTable cln = ((sourcetypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sourcetypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnRULESET = base.Columns["RULESET"];
                this.columnDSID = base.Columns["DSID"];
                this.columnSOURTYPE = base.Columns["SOURTYPE"];
                this.columnTRANS_TO = base.Columns["TRANS_TO"];
                this.columnNAME = base.Columns["NAME"];
                this.columnFOOT = base.Columns["FOOT"];
                this.columnSHORT = base.Columns["SHORT"];
                this.columnBIB = base.Columns["BIB"];
                this.columnCUSTFOOT = base.Columns["CUSTFOOT"];
                this.columnCUSTSHORT = base.Columns["CUSTSHORT"];
                this.columnCUSTBIB = base.Columns["CUSTBIB"];
                this.columnSAMEAS = base.Columns["SAMEAS"];
                this.columnSAMEASMSG = base.Columns["SAMEASMSG"];
                this.columnPRIMARY = base.Columns["PRIMARY"];
                this.columnREMINDERS = base.Columns["REMINDERS"];
                this.columnTT = base.Columns["TT"];
                this.columnSourceType_ID = base.Columns["SourceType_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnRULESET = new global::System.Data.DataColumn("RULESET", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRULESET);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnSOURTYPE = new global::System.Data.DataColumn("SOURTYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURTYPE);
                this.columnTRANS_TO = new global::System.Data.DataColumn("TRANS_TO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANS_TO);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnFOOT = new global::System.Data.DataColumn("FOOT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFOOT);
                this.columnSHORT = new global::System.Data.DataColumn("SHORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHORT);
                this.columnBIB = new global::System.Data.DataColumn("BIB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBIB);
                this.columnCUSTFOOT = new global::System.Data.DataColumn("CUSTFOOT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTFOOT);
                this.columnCUSTSHORT = new global::System.Data.DataColumn("CUSTSHORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTSHORT);
                this.columnCUSTBIB = new global::System.Data.DataColumn("CUSTBIB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTBIB);
                this.columnSAMEAS = new global::System.Data.DataColumn("SAMEAS", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAMEAS);
                this.columnSAMEASMSG = new global::System.Data.DataColumn("SAMEASMSG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSAMEASMSG);
                this.columnPRIMARY = new global::System.Data.DataColumn("PRIMARY", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIMARY);
                this.columnREMINDERS = new global::System.Data.DataColumn("REMINDERS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMINDERS);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnSourceType_ID = new global::System.Data.DataColumn("SourceType_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceType_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSourceType_ID}, true));
                this.columnNAME.MaxLength = 66;
                this.columnFOOT.MaxLength = 2147483647;
                this.columnSHORT.MaxLength = 2147483647;
                this.columnBIB.MaxLength = 2147483647;
                this.columnCUSTFOOT.MaxLength = 2147483647;
                this.columnCUSTSHORT.MaxLength = 2147483647;
                this.columnCUSTBIB.MaxLength = 2147483647;
                this.columnSAMEASMSG.MaxLength = 2147483647;
                this.columnREMINDERS.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnSourceType_ID.AutoIncrement = true;
                this.columnSourceType_ID.AutoIncrementSeed = -1;
                this.columnSourceType_ID.AutoIncrementStep = -1;
                this.columnSourceType_ID.AllowDBNull = false;
                this.columnSourceType_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public sourcetypeRow NewsourcetypeRow() {
                return ((sourcetypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sourcetypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(sourcetypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sourcetypeRowChanged != null)) {
                    this.sourcetypeRowChanged(this, new sourcetypeRowChangeEvent(((sourcetypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sourcetypeRowChanging != null)) {
                    this.sourcetypeRowChanging(this, new sourcetypeRowChangeEvent(((sourcetypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sourcetypeRowDeleted != null)) {
                    this.sourcetypeRowDeleted(this, new sourcetypeRowChangeEvent(((sourcetypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sourcetypeRowDeleting != null)) {
                    this.sourcetypeRowDeleting(this, new sourcetypeRowChangeEvent(((sourcetypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovesourcetypeRow(sourcetypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sourcetypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StyleDataTable : global::System.Data.TypedTableBase<StyleRow> {
            
            private global::System.Data.DataColumn columnSTYLEID;
            
            private global::System.Data.DataColumn columnST_DISPLAY;
            
            private global::System.Data.DataColumn columnST_OUTPUT;
            
            private global::System.Data.DataColumn columnGROUP;
            
            private global::System.Data.DataColumn columnSRNAMESORT;
            
            private global::System.Data.DataColumn columnSRNAMEDISP;
            
            private global::System.Data.DataColumn columnGVNAMESORT;
            
            private global::System.Data.DataColumn columnGVNAMEDISP;
            
            private global::System.Data.DataColumn columnOTHERDISP;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnSTYLENAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StyleDataTable() {
                this.TableName = "Style";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StyleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected StyleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STYLEIDColumn {
                get {
                    return this.columnSTYLEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ST_DISPLAYColumn {
                get {
                    return this.columnST_DISPLAY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ST_OUTPUTColumn {
                get {
                    return this.columnST_OUTPUT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GROUPColumn {
                get {
                    return this.columnGROUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SRNAMESORTColumn {
                get {
                    return this.columnSRNAMESORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SRNAMEDISPColumn {
                get {
                    return this.columnSRNAMEDISP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GVNAMESORTColumn {
                get {
                    return this.columnGVNAMESORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GVNAMEDISPColumn {
                get {
                    return this.columnGVNAMEDISP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OTHERDISPColumn {
                get {
                    return this.columnOTHERDISP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn STYLENAMEColumn {
                get {
                    return this.columnSTYLENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StyleRow this[int index] {
                get {
                    return ((StyleRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StyleRowChangeEventHandler StyleRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StyleRowChangeEventHandler StyleRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StyleRowChangeEventHandler StyleRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event StyleRowChangeEventHandler StyleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddStyleRow(StyleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StyleRow AddStyleRow(string ST_DISPLAY, string ST_OUTPUT, string GROUP, string SRNAMESORT, string SRNAMEDISP, string GVNAMESORT, string GVNAMEDISP, string OTHERDISP, string TT, long DSID, string STYLENAME) {
                StyleRow rowStyleRow = ((StyleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ST_DISPLAY,
                        ST_OUTPUT,
                        GROUP,
                        SRNAMESORT,
                        SRNAMEDISP,
                        GVNAMESORT,
                        GVNAMEDISP,
                        OTHERDISP,
                        TT,
                        DSID,
                        STYLENAME};
                rowStyleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStyleRow);
                return rowStyleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StyleRow FindBySTYLEID(long STYLEID) {
                return ((StyleRow)(this.Rows.Find(new object[] {
                            STYLEID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                StyleDataTable cln = ((StyleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StyleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnSTYLEID = base.Columns["STYLEID"];
                this.columnST_DISPLAY = base.Columns["ST_DISPLAY"];
                this.columnST_OUTPUT = base.Columns["ST_OUTPUT"];
                this.columnGROUP = base.Columns["GROUP"];
                this.columnSRNAMESORT = base.Columns["SRNAMESORT"];
                this.columnSRNAMEDISP = base.Columns["SRNAMEDISP"];
                this.columnGVNAMESORT = base.Columns["GVNAMESORT"];
                this.columnGVNAMEDISP = base.Columns["GVNAMEDISP"];
                this.columnOTHERDISP = base.Columns["OTHERDISP"];
                this.columnTT = base.Columns["TT"];
                this.columnDSID = base.Columns["DSID"];
                this.columnSTYLENAME = base.Columns["STYLENAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnSTYLEID = new global::System.Data.DataColumn("STYLEID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTYLEID);
                this.columnST_DISPLAY = new global::System.Data.DataColumn("ST_DISPLAY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnST_DISPLAY);
                this.columnST_OUTPUT = new global::System.Data.DataColumn("ST_OUTPUT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnST_OUTPUT);
                this.columnGROUP = new global::System.Data.DataColumn("GROUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROUP);
                this.columnSRNAMESORT = new global::System.Data.DataColumn("SRNAMESORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRNAMESORT);
                this.columnSRNAMEDISP = new global::System.Data.DataColumn("SRNAMEDISP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSRNAMEDISP);
                this.columnGVNAMESORT = new global::System.Data.DataColumn("GVNAMESORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGVNAMESORT);
                this.columnGVNAMEDISP = new global::System.Data.DataColumn("GVNAMEDISP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGVNAMEDISP);
                this.columnOTHERDISP = new global::System.Data.DataColumn("OTHERDISP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOTHERDISP);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnSTYLENAME = new global::System.Data.DataColumn("STYLENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTYLENAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSTYLEID}, true));
                this.columnSTYLEID.AutoIncrement = true;
                this.columnSTYLEID.AutoIncrementSeed = -1;
                this.columnSTYLEID.AutoIncrementStep = -1;
                this.columnSTYLEID.AllowDBNull = false;
                this.columnSTYLEID.Unique = true;
                this.columnST_DISPLAY.MaxLength = 2147483647;
                this.columnST_OUTPUT.MaxLength = 2147483647;
                this.columnGROUP.MaxLength = 1;
                this.columnSRNAMESORT.MaxLength = 2147483647;
                this.columnSRNAMEDISP.MaxLength = 2147483647;
                this.columnGVNAMESORT.MaxLength = 2147483647;
                this.columnGVNAMEDISP.MaxLength = 2147483647;
                this.columnOTHERDISP.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnSTYLENAME.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StyleRow NewStyleRow() {
                return ((StyleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StyleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(StyleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StyleRowChanged != null)) {
                    this.StyleRowChanged(this, new StyleRowChangeEvent(((StyleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StyleRowChanging != null)) {
                    this.StyleRowChanging(this, new StyleRowChangeEvent(((StyleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StyleRowDeleted != null)) {
                    this.StyleRowDeleted(this, new StyleRowChangeEvent(((StyleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StyleRowDeleting != null)) {
                    this.StyleRowDeleting(this, new StyleRowChangeEvent(((StyleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveStyleRow(StyleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StyleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TagTypeDataTable : global::System.Data.TypedTableBase<TagTypeRow> {
            
            private global::System.Data.DataColumn columnISPICKED;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnACTIVE;
            
            private global::System.Data.DataColumn columnETYPENUM;
            
            private global::System.Data.DataColumn columnORIGETYPE;
            
            private global::System.Data.DataColumn columnADMIN;
            
            private global::System.Data.DataColumn columnLDSONLY;
            
            private global::System.Data.DataColumn columnETYPENAME;
            
            private global::System.Data.DataColumn columnGEDCOM_TAG;
            
            private global::System.Data.DataColumn columnISREPORT;
            
            private global::System.Data.DataColumn columnTSENTENCE;
            
            private global::System.Data.DataColumn columnABBREV;
            
            private global::System.Data.DataColumn columnWITDISP;
            
            private global::System.Data.DataColumn columnPASTTENSE;
            
            private global::System.Data.DataColumn columnPRINROLE;
            
            private global::System.Data.DataColumn columnWITROLE;
            
            private global::System.Data.DataColumn columnMAXYEAR;
            
            private global::System.Data.DataColumn columnMINYEAR;
            
            private global::System.Data.DataColumn columnREMINDERS;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnPROPERTIES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TagTypeDataTable() {
                this.TableName = "TagType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TagTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TagTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ISPICKEDColumn {
                get {
                    return this.columnISPICKED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ACTIVEColumn {
                get {
                    return this.columnACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ETYPENUMColumn {
                get {
                    return this.columnETYPENUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ORIGETYPEColumn {
                get {
                    return this.columnORIGETYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ADMINColumn {
                get {
                    return this.columnADMIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LDSONLYColumn {
                get {
                    return this.columnLDSONLY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ETYPENAMEColumn {
                get {
                    return this.columnETYPENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GEDCOM_TAGColumn {
                get {
                    return this.columnGEDCOM_TAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ISREPORTColumn {
                get {
                    return this.columnISREPORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TSENTENCEColumn {
                get {
                    return this.columnTSENTENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ABBREVColumn {
                get {
                    return this.columnABBREV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WITDISPColumn {
                get {
                    return this.columnWITDISP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PASTTENSEColumn {
                get {
                    return this.columnPASTTENSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PRINROLEColumn {
                get {
                    return this.columnPRINROLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WITROLEColumn {
                get {
                    return this.columnWITROLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MAXYEARColumn {
                get {
                    return this.columnMAXYEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MINYEARColumn {
                get {
                    return this.columnMINYEAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn REMINDERSColumn {
                get {
                    return this.columnREMINDERS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PROPERTIESColumn {
                get {
                    return this.columnPROPERTIES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TagTypeRow this[int index] {
                get {
                    return ((TagTypeRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TagTypeRowChangeEventHandler TagTypeRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TagTypeRowChangeEventHandler TagTypeRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TagTypeRowChangeEventHandler TagTypeRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TagTypeRowChangeEventHandler TagTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTagTypeRow(TagTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TagTypeRow AddTagTypeRow(
                        bool ISPICKED, 
                        long DSID, 
                        bool ACTIVE, 
                        long ORIGETYPE, 
                        decimal ADMIN, 
                        bool LDSONLY, 
                        string ETYPENAME, 
                        string GEDCOM_TAG, 
                        bool ISREPORT, 
                        string TSENTENCE, 
                        string ABBREV, 
                        bool WITDISP, 
                        string PASTTENSE, 
                        bool PRINROLE, 
                        bool WITROLE, 
                        decimal MAXYEAR, 
                        decimal MINYEAR, 
                        string REMINDERS, 
                        string TT, 
                        string PROPERTIES) {
                TagTypeRow rowTagTypeRow = ((TagTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ISPICKED,
                        DSID,
                        ACTIVE,
                        null,
                        ORIGETYPE,
                        ADMIN,
                        LDSONLY,
                        ETYPENAME,
                        GEDCOM_TAG,
                        ISREPORT,
                        TSENTENCE,
                        ABBREV,
                        WITDISP,
                        PASTTENSE,
                        PRINROLE,
                        WITROLE,
                        MAXYEAR,
                        MINYEAR,
                        REMINDERS,
                        TT,
                        PROPERTIES};
                rowTagTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTagTypeRow);
                return rowTagTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TagTypeRow FindByETYPENUM(long ETYPENUM) {
                return ((TagTypeRow)(this.Rows.Find(new object[] {
                            ETYPENUM})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TagTypeDataTable cln = ((TagTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TagTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnISPICKED = base.Columns["ISPICKED"];
                this.columnDSID = base.Columns["DSID"];
                this.columnACTIVE = base.Columns["ACTIVE"];
                this.columnETYPENUM = base.Columns["ETYPENUM"];
                this.columnORIGETYPE = base.Columns["ORIGETYPE"];
                this.columnADMIN = base.Columns["ADMIN"];
                this.columnLDSONLY = base.Columns["LDSONLY"];
                this.columnETYPENAME = base.Columns["ETYPENAME"];
                this.columnGEDCOM_TAG = base.Columns["GEDCOM_TAG"];
                this.columnISREPORT = base.Columns["ISREPORT"];
                this.columnTSENTENCE = base.Columns["TSENTENCE"];
                this.columnABBREV = base.Columns["ABBREV"];
                this.columnWITDISP = base.Columns["WITDISP"];
                this.columnPASTTENSE = base.Columns["PASTTENSE"];
                this.columnPRINROLE = base.Columns["PRINROLE"];
                this.columnWITROLE = base.Columns["WITROLE"];
                this.columnMAXYEAR = base.Columns["MAXYEAR"];
                this.columnMINYEAR = base.Columns["MINYEAR"];
                this.columnREMINDERS = base.Columns["REMINDERS"];
                this.columnTT = base.Columns["TT"];
                this.columnPROPERTIES = base.Columns["PROPERTIES"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnISPICKED = new global::System.Data.DataColumn("ISPICKED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISPICKED);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnACTIVE = new global::System.Data.DataColumn("ACTIVE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTIVE);
                this.columnETYPENUM = new global::System.Data.DataColumn("ETYPENUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnETYPENUM);
                this.columnORIGETYPE = new global::System.Data.DataColumn("ORIGETYPE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORIGETYPE);
                this.columnADMIN = new global::System.Data.DataColumn("ADMIN", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIN);
                this.columnLDSONLY = new global::System.Data.DataColumn("LDSONLY", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLDSONLY);
                this.columnETYPENAME = new global::System.Data.DataColumn("ETYPENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnETYPENAME);
                this.columnGEDCOM_TAG = new global::System.Data.DataColumn("GEDCOM_TAG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGEDCOM_TAG);
                this.columnISREPORT = new global::System.Data.DataColumn("ISREPORT", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISREPORT);
                this.columnTSENTENCE = new global::System.Data.DataColumn("TSENTENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTSENTENCE);
                this.columnABBREV = new global::System.Data.DataColumn("ABBREV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABBREV);
                this.columnWITDISP = new global::System.Data.DataColumn("WITDISP", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWITDISP);
                this.columnPASTTENSE = new global::System.Data.DataColumn("PASTTENSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASTTENSE);
                this.columnPRINROLE = new global::System.Data.DataColumn("PRINROLE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRINROLE);
                this.columnWITROLE = new global::System.Data.DataColumn("WITROLE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWITROLE);
                this.columnMAXYEAR = new global::System.Data.DataColumn("MAXYEAR", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAXYEAR);
                this.columnMINYEAR = new global::System.Data.DataColumn("MINYEAR", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMINYEAR);
                this.columnREMINDERS = new global::System.Data.DataColumn("REMINDERS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMINDERS);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnPROPERTIES = new global::System.Data.DataColumn("PROPERTIES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROPERTIES);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnETYPENUM}, true));
                this.columnETYPENUM.AutoIncrement = true;
                this.columnETYPENUM.AutoIncrementSeed = -1;
                this.columnETYPENUM.AutoIncrementStep = -1;
                this.columnETYPENUM.AllowDBNull = false;
                this.columnETYPENUM.Unique = true;
                this.columnETYPENAME.MaxLength = 20;
                this.columnGEDCOM_TAG.MaxLength = 4;
                this.columnTSENTENCE.MaxLength = 2147483647;
                this.columnABBREV.MaxLength = 4;
                this.columnPASTTENSE.MaxLength = 20;
                this.columnREMINDERS.MaxLength = 2147483647;
                this.columnTT.MaxLength = 1;
                this.columnPROPERTIES.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TagTypeRow NewTagTypeRow() {
                return ((TagTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TagTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TagTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TagTypeRowChanged != null)) {
                    this.TagTypeRowChanged(this, new TagTypeRowChangeEvent(((TagTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TagTypeRowChanging != null)) {
                    this.TagTypeRowChanging(this, new TagTypeRowChangeEvent(((TagTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TagTypeRowDeleted != null)) {
                    this.TagTypeRowDeleted(this, new TagTypeRowChangeEvent(((TagTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TagTypeRowDeleting != null)) {
                    this.TagTypeRowDeleting(this, new TagTypeRowChangeEvent(((TagTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTagTypeRow(TagTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TagTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TimelineLockDataTable : global::System.Data.TypedTableBase<TimelineLockRow> {
            
            private global::System.Data.DataColumn columnIDLOCK;
            
            private global::System.Data.DataColumn columnTNAME;
            
            private global::System.Data.DataColumn columnDSID;
            
            private global::System.Data.DataColumn columnTT;
            
            private global::System.Data.DataColumn columnTimelineLock_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimelineLockDataTable() {
                this.TableName = "TimelineLock";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TimelineLockDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TimelineLockDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDLOCKColumn {
                get {
                    return this.columnIDLOCK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TNAMEColumn {
                get {
                    return this.columnTNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DSIDColumn {
                get {
                    return this.columnDSID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TTColumn {
                get {
                    return this.columnTT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TimelineLock_IDColumn {
                get {
                    return this.columnTimelineLock_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimelineLockRow this[int index] {
                get {
                    return ((TimelineLockRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TimelineLockRowChangeEventHandler TimelineLockRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TimelineLockRowChangeEventHandler TimelineLockRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TimelineLockRowChangeEventHandler TimelineLockRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TimelineLockRowChangeEventHandler TimelineLockRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTimelineLockRow(TimelineLockRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimelineLockRow AddTimelineLockRow(long IDLOCK, string TNAME, long DSID, string TT) {
                TimelineLockRow rowTimelineLockRow = ((TimelineLockRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDLOCK,
                        TNAME,
                        DSID,
                        TT,
                        null};
                rowTimelineLockRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTimelineLockRow);
                return rowTimelineLockRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimelineLockRow FindByTimelineLock_ID(long TimelineLock_ID) {
                return ((TimelineLockRow)(this.Rows.Find(new object[] {
                            TimelineLock_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TimelineLockDataTable cln = ((TimelineLockDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TimelineLockDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDLOCK = base.Columns["IDLOCK"];
                this.columnTNAME = base.Columns["TNAME"];
                this.columnDSID = base.Columns["DSID"];
                this.columnTT = base.Columns["TT"];
                this.columnTimelineLock_ID = base.Columns["TimelineLock_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDLOCK = new global::System.Data.DataColumn("IDLOCK", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDLOCK);
                this.columnTNAME = new global::System.Data.DataColumn("TNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTNAME);
                this.columnDSID = new global::System.Data.DataColumn("DSID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSID);
                this.columnTT = new global::System.Data.DataColumn("TT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTT);
                this.columnTimelineLock_ID = new global::System.Data.DataColumn("TimelineLock_ID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimelineLock_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTimelineLock_ID}, true));
                this.columnTNAME.MaxLength = 50;
                this.columnTT.MaxLength = 1;
                this.columnTimelineLock_ID.AutoIncrement = true;
                this.columnTimelineLock_ID.AutoIncrementSeed = -1;
                this.columnTimelineLock_ID.AutoIncrementStep = -1;
                this.columnTimelineLock_ID.AllowDBNull = false;
                this.columnTimelineLock_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimelineLockRow NewTimelineLockRow() {
                return ((TimelineLockRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TimelineLockRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TimelineLockRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimelineLockRowChanged != null)) {
                    this.TimelineLockRowChanged(this, new TimelineLockRowChangeEvent(((TimelineLockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimelineLockRowChanging != null)) {
                    this.TimelineLockRowChanging(this, new TimelineLockRowChangeEvent(((TimelineLockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimelineLockRowDeleted != null)) {
                    this.TimelineLockRowDeleted(this, new TimelineLockRowChangeEvent(((TimelineLockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimelineLockRowDeleting != null)) {
                    this.TimelineLockRowDeleting(this, new TimelineLockRowChangeEvent(((TimelineLockRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTimelineLockRow(TimelineLockRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                tmgDataSet ds = new tmgDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TimelineLockDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DataSetRow : global::System.Data.DataRow {
            
            private DataSetDataTable tableDataSet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataSetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataSet = ((DataSetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    return ((long)(this[this.tableDataSet.DSIDColumn]));
                }
                set {
                    this[this.tableDataSet.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DSNAME {
                get {
                    try {
                        return ((string)(this[this.tableDataSet.DSNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSNAME\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.DSNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DSLOCATION {
                get {
                    try {
                        return ((string)(this[this.tableDataSet.DSLOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSLOCATION\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.DSLOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DSTYPE {
                get {
                    try {
                        return ((decimal)(this[this.tableDataSet.DSTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSTYPE\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.DSTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool DSLOCKED {
                get {
                    try {
                        return ((bool)(this[this.tableDataSet.DSLOCKEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSLOCKED\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.DSLOCKEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool DSENABLED {
                get {
                    try {
                        return ((bool)(this[this.tableDataSet.DSENABLEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSENABLED\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.DSENABLEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PROPERTY {
                get {
                    try {
                        return ((string)(this[this.tableDataSet.PROPERTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROPERTY\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.PROPERTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DSP {
                get {
                    try {
                        return ((string)(this[this.tableDataSet.DSPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSP\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.DSPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DSP2 {
                get {
                    try {
                        return ((string)(this[this.tableDataSet.DSP2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSP2\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.DSP2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableDataSet.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DCOMMENT {
                get {
                    try {
                        return ((string)(this[this.tableDataSet.DCOMMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DCOMMENT\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.DCOMMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HOST {
                get {
                    try {
                        return ((string)(this[this.tableDataSet.HOSTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HOST\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.HOSTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NAMESTYLE {
                get {
                    try {
                        return ((long)(this[this.tableDataSet.NAMESTYLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAMESTYLE\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.NAMESTYLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PLACESTYLE {
                get {
                    try {
                        return ((long)(this[this.tableDataSet.PLACESTYLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PLACESTYLE\' in table \'DataSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataSet.PLACESTYLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSNAMENull() {
                return this.IsNull(this.tableDataSet.DSNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSNAMENull() {
                this[this.tableDataSet.DSNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSLOCATIONNull() {
                return this.IsNull(this.tableDataSet.DSLOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSLOCATIONNull() {
                this[this.tableDataSet.DSLOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSTYPENull() {
                return this.IsNull(this.tableDataSet.DSTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSTYPENull() {
                this[this.tableDataSet.DSTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSLOCKEDNull() {
                return this.IsNull(this.tableDataSet.DSLOCKEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSLOCKEDNull() {
                this[this.tableDataSet.DSLOCKEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSENABLEDNull() {
                return this.IsNull(this.tableDataSet.DSENABLEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSENABLEDNull() {
                this[this.tableDataSet.DSENABLEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPROPERTYNull() {
                return this.IsNull(this.tableDataSet.PROPERTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPROPERTYNull() {
                this[this.tableDataSet.PROPERTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSPNull() {
                return this.IsNull(this.tableDataSet.DSPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSPNull() {
                this[this.tableDataSet.DSPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSP2Null() {
                return this.IsNull(this.tableDataSet.DSP2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSP2Null() {
                this[this.tableDataSet.DSP2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableDataSet.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableDataSet.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDCOMMENTNull() {
                return this.IsNull(this.tableDataSet.DCOMMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDCOMMENTNull() {
                this[this.tableDataSet.DCOMMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsHOSTNull() {
                return this.IsNull(this.tableDataSet.HOSTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetHOSTNull() {
                this[this.tableDataSet.HOSTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNAMESTYLENull() {
                return this.IsNull(this.tableDataSet.NAMESTYLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNAMESTYLENull() {
                this[this.tableDataSet.NAMESTYLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPLACESTYLENull() {
                return this.IsNull(this.tableDataSet.PLACESTYLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPLACESTYLENull() {
                this[this.tableDataSet.PLACESTYLEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DNARow : global::System.Data.DataRow {
            
            private DNADataTable tableDNA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DNARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDNA = ((DNADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableDNA.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_DNA {
                get {
                    return ((long)(this[this.tableDNA.ID_DNAColumn]));
                }
                set {
                    this[this.tableDNA.ID_DNAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_PERSON {
                get {
                    try {
                        return ((long)(this[this.tableDNA.ID_PERSONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_PERSON\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.ID_PERSONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DNANAME {
                get {
                    try {
                        return ((string)(this[this.tableDNA.DNANAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DNANAME\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.DNANAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string COMMENTS {
                get {
                    try {
                        return ((string)(this[this.tableDNA.COMMENTSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMMENTS\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.COMMENTSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DESCRIPT {
                get {
                    try {
                        return ((string)(this[this.tableDNA.DESCRIPTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPT\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.DESCRIPTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RESULT {
                get {
                    try {
                        return ((string)(this[this.tableDNA.RESULTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RESULT\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.RESULTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string URL {
                get {
                    try {
                        return ((string)(this[this.tableDNA.URLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'URL\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.URLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LOGO {
                get {
                    try {
                        return ((string)(this[this.tableDNA.LOGOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOGO\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.LOGOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableDNA.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string KITNUMBER {
                get {
                    try {
                        return ((string)(this[this.tableDNA.KITNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KITNUMBER\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.KITNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TYPE {
                get {
                    try {
                        return ((string)(this[this.tableDNA.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NAMEREC {
                get {
                    try {
                        return ((long)(this[this.tableDNA.NAMERECColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAMEREC\' in table \'DNA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDNA.NAMERECColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableDNA.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableDNA.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_PERSONNull() {
                return this.IsNull(this.tableDNA.ID_PERSONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_PERSONNull() {
                this[this.tableDNA.ID_PERSONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDNANAMENull() {
                return this.IsNull(this.tableDNA.DNANAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDNANAMENull() {
                this[this.tableDNA.DNANAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOMMENTSNull() {
                return this.IsNull(this.tableDNA.COMMENTSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOMMENTSNull() {
                this[this.tableDNA.COMMENTSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDESCRIPTNull() {
                return this.IsNull(this.tableDNA.DESCRIPTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDESCRIPTNull() {
                this[this.tableDNA.DESCRIPTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRESULTNull() {
                return this.IsNull(this.tableDNA.RESULTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRESULTNull() {
                this[this.tableDNA.RESULTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsURLNull() {
                return this.IsNull(this.tableDNA.URLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetURLNull() {
                this[this.tableDNA.URLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLOGONull() {
                return this.IsNull(this.tableDNA.LOGOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLOGONull() {
                this[this.tableDNA.LOGOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableDNA.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableDNA.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKITNUMBERNull() {
                return this.IsNull(this.tableDNA.KITNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKITNUMBERNull() {
                this[this.tableDNA.KITNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTYPENull() {
                return this.IsNull(this.tableDNA.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTYPENull() {
                this[this.tableDNA.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNAMERECNull() {
                return this.IsNull(this.tableDNA.NAMERECColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNAMERECNull() {
                this[this.tableDNA.NAMERECColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EventRow : global::System.Data.DataRow {
            
            private EventDataTable tableEvent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvent = ((EventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ETYPE {
                get {
                    try {
                        return ((long)(this[this.tableEvent.ETYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ETYPE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.ETYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableEvent.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PER1SHOW {
                get {
                    try {
                        return ((bool)(this[this.tableEvent.PER1SHOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PER1SHOW\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.PER1SHOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PER2SHOW {
                get {
                    try {
                        return ((bool)(this[this.tableEvent.PER2SHOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PER2SHOW\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.PER2SHOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PER1 {
                get {
                    try {
                        return ((long)(this[this.tableEvent.PER1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PER1\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.PER1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PER2 {
                get {
                    try {
                        return ((long)(this[this.tableEvent.PER2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PER2\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.PER2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EDATE {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EDATE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PLACENUM {
                get {
                    try {
                        return ((long)(this[this.tableEvent.PLACENUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PLACENUM\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.PLACENUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EFOOT {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EFOOTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EFOOT\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EFOOTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ENSURE {
                get {
                    try {
                        return ((string)(this[this.tableEvent.ENSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ENSURE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.ENSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ESSURE {
                get {
                    try {
                        return ((string)(this[this.tableEvent.ESSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ESSURE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.ESSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EDSURE {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EDSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EDSURE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EDSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EPSURE {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EPSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EPSURE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EPSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EFSURE {
                get {
                    try {
                        return ((string)(this[this.tableEvent.EFSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EFSURE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.EFSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RECNO {
                get {
                    return ((long)(this[this.tableEvent.RECNOColumn]));
                }
                set {
                    this[this.tableEvent.RECNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SENTENCE {
                get {
                    try {
                        return ((string)(this[this.tableEvent.SENTENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SENTENCE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.SENTENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SRTDATE {
                get {
                    try {
                        return ((string)(this[this.tableEvent.SRTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRTDATE\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.SRTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableEvent.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long REF_ID {
                get {
                    try {
                        return ((long)(this[this.tableEvent.REF_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REF_ID\' in table \'Event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEvent.REF_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsETYPENull() {
                return this.IsNull(this.tableEvent.ETYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetETYPENull() {
                this[this.tableEvent.ETYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableEvent.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableEvent.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPER1SHOWNull() {
                return this.IsNull(this.tableEvent.PER1SHOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPER1SHOWNull() {
                this[this.tableEvent.PER1SHOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPER2SHOWNull() {
                return this.IsNull(this.tableEvent.PER2SHOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPER2SHOWNull() {
                this[this.tableEvent.PER2SHOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPER1Null() {
                return this.IsNull(this.tableEvent.PER1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPER1Null() {
                this[this.tableEvent.PER1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPER2Null() {
                return this.IsNull(this.tableEvent.PER2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPER2Null() {
                this[this.tableEvent.PER2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEDATENull() {
                return this.IsNull(this.tableEvent.EDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEDATENull() {
                this[this.tableEvent.EDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPLACENUMNull() {
                return this.IsNull(this.tableEvent.PLACENUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPLACENUMNull() {
                this[this.tableEvent.PLACENUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEFOOTNull() {
                return this.IsNull(this.tableEvent.EFOOTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEFOOTNull() {
                this[this.tableEvent.EFOOTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsENSURENull() {
                return this.IsNull(this.tableEvent.ENSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetENSURENull() {
                this[this.tableEvent.ENSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsESSURENull() {
                return this.IsNull(this.tableEvent.ESSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetESSURENull() {
                this[this.tableEvent.ESSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEDSURENull() {
                return this.IsNull(this.tableEvent.EDSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEDSURENull() {
                this[this.tableEvent.EDSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEPSURENull() {
                return this.IsNull(this.tableEvent.EPSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEPSURENull() {
                this[this.tableEvent.EPSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEFSURENull() {
                return this.IsNull(this.tableEvent.EFSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEFSURENull() {
                this[this.tableEvent.EFSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSENTENCENull() {
                return this.IsNull(this.tableEvent.SENTENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSENTENCENull() {
                this[this.tableEvent.SENTENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSRTDATENull() {
                return this.IsNull(this.tableEvent.SRTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSRTDATENull() {
                this[this.tableEvent.SRTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableEvent.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableEvent.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREF_IDNull() {
                return this.IsNull(this.tableEvent.REF_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREF_IDNull() {
                this[this.tableEvent.REF_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EventWitnessRow : global::System.Data.DataRow {
            
            private EventWitnessDataTable tableEventWitness;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EventWitnessRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventWitness = ((EventWitnessDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long EPER {
                get {
                    try {
                        return ((long)(this[this.tableEventWitness.EPERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EPER\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.EPERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long GNUM {
                get {
                    try {
                        return ((long)(this[this.tableEventWitness.GNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GNUM\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.GNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PRIMARY {
                get {
                    try {
                        return ((bool)(this[this.tableEventWitness.PRIMARYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRIMARY\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.PRIMARYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WSENTENCE {
                get {
                    try {
                        return ((string)(this[this.tableEventWitness.WSENTENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WSENTENCE\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.WSENTENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableEventWitness.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ROLE {
                get {
                    try {
                        return ((string)(this[this.tableEventWitness.ROLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROLE\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.ROLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableEventWitness.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NAMEREC {
                get {
                    try {
                        return ((long)(this[this.tableEventWitness.NAMERECColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAMEREC\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.NAMERECColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WITMEMO {
                get {
                    try {
                        return ((string)(this[this.tableEventWitness.WITMEMOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WITMEMO\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.WITMEMOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SEQUENCE {
                get {
                    try {
                        return ((long)(this[this.tableEventWitness.SEQUENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SEQUENCE\' in table \'EventWitness\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventWitness.SEQUENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long EventWitness_ID {
                get {
                    return ((long)(this[this.tableEventWitness.EventWitness_IDColumn]));
                }
                set {
                    this[this.tableEventWitness.EventWitness_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEPERNull() {
                return this.IsNull(this.tableEventWitness.EPERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEPERNull() {
                this[this.tableEventWitness.EPERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGNUMNull() {
                return this.IsNull(this.tableEventWitness.GNUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGNUMNull() {
                this[this.tableEventWitness.GNUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRIMARYNull() {
                return this.IsNull(this.tableEventWitness.PRIMARYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRIMARYNull() {
                this[this.tableEventWitness.PRIMARYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWSENTENCENull() {
                return this.IsNull(this.tableEventWitness.WSENTENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWSENTENCENull() {
                this[this.tableEventWitness.WSENTENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableEventWitness.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableEventWitness.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsROLENull() {
                return this.IsNull(this.tableEventWitness.ROLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetROLENull() {
                this[this.tableEventWitness.ROLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableEventWitness.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableEventWitness.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNAMERECNull() {
                return this.IsNull(this.tableEventWitness.NAMERECColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNAMERECNull() {
                this[this.tableEventWitness.NAMERECColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWITMEMONull() {
                return this.IsNull(this.tableEventWitness.WITMEMOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWITMEMONull() {
                this[this.tableEventWitness.WITMEMOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSEQUENCENull() {
                return this.IsNull(this.tableEventWitness.SEQUENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSEQUENCENull() {
                this[this.tableEventWitness.SEQUENCEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ExhibitRow : global::System.Data.DataRow {
            
            private ExhibitDataTable tableExhibit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ExhibitRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExhibit = ((ExhibitDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long IDEXHIBIT {
                get {
                    return ((long)(this[this.tableExhibit.IDEXHIBITColumn]));
                }
                set {
                    this[this.tableExhibit.IDEXHIBITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long IDREF {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.IDREFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDREF\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.IDREFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RLTYPE {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.RLTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLTYPE\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.RLTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RLNUM {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.RLNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLNUM\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.RLNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string XNAME {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.XNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XNAME\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.XNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VFILENAME {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.VFILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VFILENAME\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.VFILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string IFILENAME {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.IFILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IFILENAME\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.IFILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AFILENAME {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.AFILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AFILENAME\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.AFILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TFILENAME {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.TFILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TFILENAME\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.TFILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REFERENCE {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.REFERENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REFERENCE\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.REFERENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TEXT {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TEXT\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] IMAGE {
                get {
                    try {
                        return ((byte[])(this[this.tableExhibit.IMAGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IMAGE\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.IMAGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] AUDIO {
                get {
                    try {
                        return ((byte[])(this[this.tableExhibit.AUDIOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AUDIO\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.AUDIOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DESCRIPT {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.DESCRIPTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPT\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.DESCRIPTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RLPER1 {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.RLPER1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLPER1\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.RLPER1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RLPER2 {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.RLPER2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLPER2\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.RLPER2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RLGTYPE {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.RLGTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLGTYPE\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.RLGTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] OLE_OBJECT {
                get {
                    try {
                        return ((byte[])(this[this.tableExhibit.OLE_OBJECTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OLE_OBJECT\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.OLE_OBJECTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PRIMARY {
                get {
                    try {
                        return ((bool)(this[this.tableExhibit.PRIMARYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRIMARY\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.PRIMARYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] VIDEO {
                get {
                    try {
                        return ((byte[])(this[this.tableExhibit.VIDEOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VIDEO\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.VIDEOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PROPERTY {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.PROPERTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROPERTY\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.PROPERTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_PERSON {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.ID_PERSONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_PERSON\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.ID_PERSONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_EVENT {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.ID_EVENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_EVENT\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.ID_EVENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_SOURCE {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.ID_SOURCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_SOURCE\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.ID_SOURCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_REPOS {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.ID_REPOSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_REPOS\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.ID_REPOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] THUMB {
                get {
                    try {
                        return ((byte[])(this[this.tableExhibit.THUMBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'THUMB\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.THUMBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_CIT {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.ID_CITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_CIT\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.ID_CITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_PLACE {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.ID_PLACEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_PLACE\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.ID_PLACEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CAPTION {
                get {
                    try {
                        return ((string)(this[this.tableExhibit.CAPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CAPTION\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.CAPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SORTEXH {
                get {
                    try {
                        return ((long)(this[this.tableExhibit.SORTEXHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SORTEXH\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.SORTEXHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] IMAGEFORE {
                get {
                    try {
                        return ((byte[])(this[this.tableExhibit.IMAGEFOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IMAGEFORE\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.IMAGEFOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] IMAGEBACK {
                get {
                    try {
                        return ((byte[])(this[this.tableExhibit.IMAGEBACKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IMAGEBACK\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.IMAGEBACKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TRANSPAR {
                get {
                    try {
                        return ((decimal)(this[this.tableExhibit.TRANSPARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSPAR\' in table \'Exhibit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExhibit.TRANSPARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDREFNull() {
                return this.IsNull(this.tableExhibit.IDREFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDREFNull() {
                this[this.tableExhibit.IDREFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLTYPENull() {
                return this.IsNull(this.tableExhibit.RLTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLTYPENull() {
                this[this.tableExhibit.RLTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLNUMNull() {
                return this.IsNull(this.tableExhibit.RLNUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLNUMNull() {
                this[this.tableExhibit.RLNUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsXNAMENull() {
                return this.IsNull(this.tableExhibit.XNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetXNAMENull() {
                this[this.tableExhibit.XNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVFILENAMENull() {
                return this.IsNull(this.tableExhibit.VFILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVFILENAMENull() {
                this[this.tableExhibit.VFILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIFILENAMENull() {
                return this.IsNull(this.tableExhibit.IFILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIFILENAMENull() {
                this[this.tableExhibit.IFILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAFILENAMENull() {
                return this.IsNull(this.tableExhibit.AFILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAFILENAMENull() {
                this[this.tableExhibit.AFILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTFILENAMENull() {
                return this.IsNull(this.tableExhibit.TFILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTFILENAMENull() {
                this[this.tableExhibit.TFILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREFERENCENull() {
                return this.IsNull(this.tableExhibit.REFERENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREFERENCENull() {
                this[this.tableExhibit.REFERENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTEXTNull() {
                return this.IsNull(this.tableExhibit.TEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTEXTNull() {
                this[this.tableExhibit.TEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIMAGENull() {
                return this.IsNull(this.tableExhibit.IMAGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIMAGENull() {
                this[this.tableExhibit.IMAGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAUDIONull() {
                return this.IsNull(this.tableExhibit.AUDIOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAUDIONull() {
                this[this.tableExhibit.AUDIOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDESCRIPTNull() {
                return this.IsNull(this.tableExhibit.DESCRIPTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDESCRIPTNull() {
                this[this.tableExhibit.DESCRIPTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLPER1Null() {
                return this.IsNull(this.tableExhibit.RLPER1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLPER1Null() {
                this[this.tableExhibit.RLPER1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLPER2Null() {
                return this.IsNull(this.tableExhibit.RLPER2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLPER2Null() {
                this[this.tableExhibit.RLPER2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLGTYPENull() {
                return this.IsNull(this.tableExhibit.RLGTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLGTYPENull() {
                this[this.tableExhibit.RLGTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOLE_OBJECTNull() {
                return this.IsNull(this.tableExhibit.OLE_OBJECTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOLE_OBJECTNull() {
                this[this.tableExhibit.OLE_OBJECTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRIMARYNull() {
                return this.IsNull(this.tableExhibit.PRIMARYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRIMARYNull() {
                this[this.tableExhibit.PRIMARYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVIDEONull() {
                return this.IsNull(this.tableExhibit.VIDEOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVIDEONull() {
                this[this.tableExhibit.VIDEOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPROPERTYNull() {
                return this.IsNull(this.tableExhibit.PROPERTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPROPERTYNull() {
                this[this.tableExhibit.PROPERTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableExhibit.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableExhibit.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableExhibit.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableExhibit.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_PERSONNull() {
                return this.IsNull(this.tableExhibit.ID_PERSONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_PERSONNull() {
                this[this.tableExhibit.ID_PERSONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_EVENTNull() {
                return this.IsNull(this.tableExhibit.ID_EVENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_EVENTNull() {
                this[this.tableExhibit.ID_EVENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_SOURCENull() {
                return this.IsNull(this.tableExhibit.ID_SOURCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_SOURCENull() {
                this[this.tableExhibit.ID_SOURCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_REPOSNull() {
                return this.IsNull(this.tableExhibit.ID_REPOSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_REPOSNull() {
                this[this.tableExhibit.ID_REPOSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTHUMBNull() {
                return this.IsNull(this.tableExhibit.THUMBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTHUMBNull() {
                this[this.tableExhibit.THUMBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_CITNull() {
                return this.IsNull(this.tableExhibit.ID_CITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_CITNull() {
                this[this.tableExhibit.ID_CITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_PLACENull() {
                return this.IsNull(this.tableExhibit.ID_PLACEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_PLACENull() {
                this[this.tableExhibit.ID_PLACEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCAPTIONNull() {
                return this.IsNull(this.tableExhibit.CAPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCAPTIONNull() {
                this[this.tableExhibit.CAPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSORTEXHNull() {
                return this.IsNull(this.tableExhibit.SORTEXHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSORTEXHNull() {
                this[this.tableExhibit.SORTEXHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIMAGEFORENull() {
                return this.IsNull(this.tableExhibit.IMAGEFOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIMAGEFORENull() {
                this[this.tableExhibit.IMAGEFOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIMAGEBACKNull() {
                return this.IsNull(this.tableExhibit.IMAGEBACKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIMAGEBACKNull() {
                this[this.tableExhibit.IMAGEBACKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRANSPARNull() {
                return this.IsNull(this.tableExhibit.TRANSPARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRANSPARNull() {
                this[this.tableExhibit.TRANSPARColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FlagRow : global::System.Data.DataRow {
            
            private FlagDataTable tableFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FlagRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlag = ((FlagDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLAGLABEL {
                get {
                    try {
                        return ((string)(this[this.tableFlag.FLAGLABELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAGLABEL\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.FLAGLABELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLAGFIELD {
                get {
                    try {
                        return ((string)(this[this.tableFlag.FLAGFIELDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAGFIELD\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.FLAGFIELDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLAGVALUE {
                get {
                    try {
                        return ((string)(this[this.tableFlag.FLAGVALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAGVALUE\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.FLAGVALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SEQUENCE {
                get {
                    try {
                        return ((long)(this[this.tableFlag.SEQUENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SEQUENCE\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.SEQUENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DESCRIPT {
                get {
                    try {
                        return ((string)(this[this.tableFlag.DESCRIPTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPT\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.DESCRIPTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ACTIVE {
                get {
                    try {
                        return ((bool)(this[this.tableFlag.ACTIVEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACTIVE\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long FLAGID {
                get {
                    return ((long)(this[this.tableFlag.FLAGIDColumn]));
                }
                set {
                    this[this.tableFlag.FLAGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PROPERTY {
                get {
                    try {
                        return ((string)(this[this.tableFlag.PROPERTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROPERTY\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.PROPERTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    return ((long)(this[this.tableFlag.DSIDColumn]));
                }
                set {
                    this[this.tableFlag.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableFlag.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFLAGLABELNull() {
                return this.IsNull(this.tableFlag.FLAGLABELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFLAGLABELNull() {
                this[this.tableFlag.FLAGLABELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFLAGFIELDNull() {
                return this.IsNull(this.tableFlag.FLAGFIELDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFLAGFIELDNull() {
                this[this.tableFlag.FLAGFIELDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFLAGVALUENull() {
                return this.IsNull(this.tableFlag.FLAGVALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFLAGVALUENull() {
                this[this.tableFlag.FLAGVALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSEQUENCENull() {
                return this.IsNull(this.tableFlag.SEQUENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSEQUENCENull() {
                this[this.tableFlag.SEQUENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDESCRIPTNull() {
                return this.IsNull(this.tableFlag.DESCRIPTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDESCRIPTNull() {
                this[this.tableFlag.DESCRIPTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsACTIVENull() {
                return this.IsNull(this.tableFlag.ACTIVEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetACTIVENull() {
                this[this.tableFlag.ACTIVEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPROPERTYNull() {
                return this.IsNull(this.tableFlag.PROPERTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPROPERTYNull() {
                this[this.tableFlag.PROPERTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableFlag.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableFlag.TTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FocusGroupRow : global::System.Data.DataRow {
            
            private FocusGroupDataTable tableFocusGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FocusGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFocusGroup = ((FocusGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long GROUPNUM {
                get {
                    return ((long)(this[this.tableFocusGroup.GROUPNUMColumn]));
                }
                set {
                    this[this.tableFocusGroup.GROUPNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GROUPNAME {
                get {
                    try {
                        return ((string)(this[this.tableFocusGroup.GROUPNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROUPNAME\' in table \'FocusGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFocusGroup.GROUPNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool RECENT {
                get {
                    try {
                        return ((bool)(this[this.tableFocusGroup.RECENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RECENT\' in table \'FocusGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFocusGroup.RECENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableFocusGroup.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'FocusGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFocusGroup.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGROUPNAMENull() {
                return this.IsNull(this.tableFocusGroup.GROUPNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGROUPNAMENull() {
                this[this.tableFocusGroup.GROUPNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRECENTNull() {
                return this.IsNull(this.tableFocusGroup.RECENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRECENTNull() {
                this[this.tableFocusGroup.RECENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableFocusGroup.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableFocusGroup.TTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FocusGroupMemberRow : global::System.Data.DataRow {
            
            private FocusGroupMemberDataTable tableFocusGroupMember;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FocusGroupMemberRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFocusGroupMember = ((FocusGroupMemberDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long GROUPNUM {
                get {
                    try {
                        return ((long)(this[this.tableFocusGroupMember.GROUPNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROUPNUM\' in table \'FocusGroupMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFocusGroupMember.GROUPNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MEMBERNUM {
                get {
                    try {
                        return ((long)(this[this.tableFocusGroupMember.MEMBERNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEMBERNUM\' in table \'FocusGroupMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFocusGroupMember.MEMBERNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableFocusGroupMember.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'FocusGroupMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFocusGroupMember.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableFocusGroupMember.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'FocusGroupMember\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFocusGroupMember.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long FocusGroupMember_ID {
                get {
                    return ((long)(this[this.tableFocusGroupMember.FocusGroupMember_IDColumn]));
                }
                set {
                    this[this.tableFocusGroupMember.FocusGroupMember_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGROUPNUMNull() {
                return this.IsNull(this.tableFocusGroupMember.GROUPNUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGROUPNUMNull() {
                this[this.tableFocusGroupMember.GROUPNUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMEMBERNUMNull() {
                return this.IsNull(this.tableFocusGroupMember.MEMBERNUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMEMBERNUMNull() {
                this[this.tableFocusGroupMember.MEMBERNUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableFocusGroupMember.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableFocusGroupMember.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableFocusGroupMember.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableFocusGroupMember.DSIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NameRow : global::System.Data.DataRow {
            
            private NameDataTable tableName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableName = ((NameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NPER {
                get {
                    try {
                        return ((long)(this[this.tableName.NPERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NPER\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.NPERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ALTYPE {
                get {
                    try {
                        return ((long)(this[this.tableName.ALTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ALTYPE\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.ALTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ISPICKED {
                get {
                    try {
                        return ((bool)(this[this.tableName.ISPICKEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISPICKED\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.ISPICKEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool INFS {
                get {
                    try {
                        return ((bool)(this[this.tableName.INFSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INFS\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.INFSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool INFG {
                get {
                    try {
                        return ((bool)(this[this.tableName.INFGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INFG\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.INFGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PRIMARY {
                get {
                    try {
                        return ((bool)(this[this.tableName.PRIMARYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRIMARY\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.PRIMARYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NSURE {
                get {
                    try {
                        return ((string)(this[this.tableName.NSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NSURE\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.NSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FSURE {
                get {
                    try {
                        return ((string)(this[this.tableName.FSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSURE\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.FSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NNOTE {
                get {
                    try {
                        return ((string)(this[this.tableName.NNOTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NNOTE\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.NNOTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RECNO {
                get {
                    return ((long)(this[this.tableName.RECNOColumn]));
                }
                set {
                    this[this.tableName.RECNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SENTENCE {
                get {
                    try {
                        return ((string)(this[this.tableName.SENTENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SENTENCE\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.SENTENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NDATE {
                get {
                    try {
                        return ((string)(this[this.tableName.NDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NDATE\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.NDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SRTDATE {
                get {
                    try {
                        return ((string)(this[this.tableName.SRTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRTDATE\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.SRTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DSURE {
                get {
                    try {
                        return ((string)(this[this.tableName.DSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSURE\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.DSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableName.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableName.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SRNAMESORT {
                get {
                    try {
                        return ((string)(this[this.tableName.SRNAMESORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRNAMESORT\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.SRNAMESORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GVNAMESORT {
                get {
                    try {
                        return ((string)(this[this.tableName.GVNAMESORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GVNAMESORT\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.GVNAMESORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long STYLEID {
                get {
                    try {
                        return ((long)(this[this.tableName.STYLEIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STYLEID\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.STYLEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SURID {
                get {
                    try {
                        return ((long)(this[this.tableName.SURIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SURID\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.SURIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long GIVID {
                get {
                    try {
                        return ((long)(this[this.tableName.GIVIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GIVID\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.GIVIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SRNAMEDISP {
                get {
                    try {
                        return ((string)(this[this.tableName.SRNAMEDISPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRNAMEDISP\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.SRNAMEDISPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SNDXSURN {
                get {
                    try {
                        return ((string)(this[this.tableName.SNDXSURNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SNDXSURN\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.SNDXSURNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SNDXGVN {
                get {
                    try {
                        return ((string)(this[this.tableName.SNDXGVNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SNDXGVN\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.SNDXGVNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PBIRTH {
                get {
                    try {
                        return ((string)(this[this.tableName.PBIRTHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PBIRTH\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.PBIRTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PDEATH {
                get {
                    try {
                        return ((string)(this[this.tableName.PDEATHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PDEATH\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.PDEATHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REFER {
                get {
                    try {
                        return ((string)(this[this.tableName.REFERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REFER\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.REFERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PREF_ID {
                get {
                    try {
                        return ((long)(this[this.tableName.PREF_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PREF_ID\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.PREF_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LAST_EDIT {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableName.LAST_EDITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LAST_EDIT\' in table \'Name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableName.LAST_EDITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNPERNull() {
                return this.IsNull(this.tableName.NPERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNPERNull() {
                this[this.tableName.NPERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsALTYPENull() {
                return this.IsNull(this.tableName.ALTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetALTYPENull() {
                this[this.tableName.ALTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsISPICKEDNull() {
                return this.IsNull(this.tableName.ISPICKEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetISPICKEDNull() {
                this[this.tableName.ISPICKEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINFSNull() {
                return this.IsNull(this.tableName.INFSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINFSNull() {
                this[this.tableName.INFSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINFGNull() {
                return this.IsNull(this.tableName.INFGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINFGNull() {
                this[this.tableName.INFGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRIMARYNull() {
                return this.IsNull(this.tableName.PRIMARYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRIMARYNull() {
                this[this.tableName.PRIMARYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNSURENull() {
                return this.IsNull(this.tableName.NSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNSURENull() {
                this[this.tableName.NSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFSURENull() {
                return this.IsNull(this.tableName.FSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFSURENull() {
                this[this.tableName.FSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNNOTENull() {
                return this.IsNull(this.tableName.NNOTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNNOTENull() {
                this[this.tableName.NNOTEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSENTENCENull() {
                return this.IsNull(this.tableName.SENTENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSENTENCENull() {
                this[this.tableName.SENTENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNDATENull() {
                return this.IsNull(this.tableName.NDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNDATENull() {
                this[this.tableName.NDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSRTDATENull() {
                return this.IsNull(this.tableName.SRTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSRTDATENull() {
                this[this.tableName.SRTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSURENull() {
                return this.IsNull(this.tableName.DSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSURENull() {
                this[this.tableName.DSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableName.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableName.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableName.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableName.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSRNAMESORTNull() {
                return this.IsNull(this.tableName.SRNAMESORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSRNAMESORTNull() {
                this[this.tableName.SRNAMESORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGVNAMESORTNull() {
                return this.IsNull(this.tableName.GVNAMESORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGVNAMESORTNull() {
                this[this.tableName.GVNAMESORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTYLEIDNull() {
                return this.IsNull(this.tableName.STYLEIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTYLEIDNull() {
                this[this.tableName.STYLEIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSURIDNull() {
                return this.IsNull(this.tableName.SURIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSURIDNull() {
                this[this.tableName.SURIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGIVIDNull() {
                return this.IsNull(this.tableName.GIVIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGIVIDNull() {
                this[this.tableName.GIVIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSRNAMEDISPNull() {
                return this.IsNull(this.tableName.SRNAMEDISPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSRNAMEDISPNull() {
                this[this.tableName.SRNAMEDISPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSNDXSURNNull() {
                return this.IsNull(this.tableName.SNDXSURNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSNDXSURNNull() {
                this[this.tableName.SNDXSURNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSNDXGVNNull() {
                return this.IsNull(this.tableName.SNDXGVNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSNDXGVNNull() {
                this[this.tableName.SNDXGVNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPBIRTHNull() {
                return this.IsNull(this.tableName.PBIRTHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPBIRTHNull() {
                this[this.tableName.PBIRTHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPDEATHNull() {
                return this.IsNull(this.tableName.PDEATHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPDEATHNull() {
                this[this.tableName.PDEATHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREFERNull() {
                return this.IsNull(this.tableName.REFERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREFERNull() {
                this[this.tableName.REFERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPREF_IDNull() {
                return this.IsNull(this.tableName.PREF_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPREF_IDNull() {
                this[this.tableName.PREF_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLAST_EDITNull() {
                return this.IsNull(this.tableName.LAST_EDITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLAST_EDITNull() {
                this[this.tableName.LAST_EDITColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NameDictionaryRow : global::System.Data.DataRow {
            
            private NameDictionaryDataTable tableNameDictionary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NameDictionaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNameDictionary = ((NameDictionaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long UID {
                get {
                    try {
                        return ((long)(this[this.tableNameDictionary.UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UID\' in table \'NameDictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNameDictionary.UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VALUE {
                get {
                    try {
                        return ((string)(this[this.tableNameDictionary.VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALUE\' in table \'NameDictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNameDictionary.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SDX {
                get {
                    try {
                        return ((string)(this[this.tableNameDictionary.SDXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SDX\' in table \'NameDictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNameDictionary.SDXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableNameDictionary.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'NameDictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNameDictionary.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NameDictionary_ID {
                get {
                    return ((long)(this[this.tableNameDictionary.NameDictionary_IDColumn]));
                }
                set {
                    this[this.tableNameDictionary.NameDictionary_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUIDNull() {
                return this.IsNull(this.tableNameDictionary.UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUIDNull() {
                this[this.tableNameDictionary.UIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVALUENull() {
                return this.IsNull(this.tableNameDictionary.VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVALUENull() {
                this[this.tableNameDictionary.VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSDXNull() {
                return this.IsNull(this.tableNameDictionary.SDXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSDXNull() {
                this[this.tableNameDictionary.SDXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableNameDictionary.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableNameDictionary.TTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NamePartTypeRow : global::System.Data.DataRow {
            
            private NamePartTypeDataTable tableNamePartType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NamePartTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNamePartType = ((NamePartTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableNamePartType.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'NamePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartType.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VALUE {
                get {
                    try {
                        return ((string)(this[this.tableNamePartType.VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALUE\' in table \'NamePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartType.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool SYSTEM {
                get {
                    try {
                        return ((bool)(this[this.tableNamePartType.SYSTEMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SYSTEM\' in table \'NamePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartType.SYSTEMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TYPE {
                get {
                    try {
                        return ((long)(this[this.tableNamePartType.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'NamePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartType.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SHORTVALUE {
                get {
                    try {
                        return ((string)(this[this.tableNamePartType.SHORTVALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHORTVALUE\' in table \'NamePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartType.SHORTVALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableNamePartType.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'NamePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartType.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableNamePartType.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'NamePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartType.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TEMPLATE {
                get {
                    try {
                        return ((string)(this[this.tableNamePartType.TEMPLATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TEMPLATE\' in table \'NamePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartType.TEMPLATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NamePartType_ID {
                get {
                    return ((long)(this[this.tableNamePartType.NamePartType_IDColumn]));
                }
                set {
                    this[this.tableNamePartType.NamePartType_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDNull() {
                return this.IsNull(this.tableNamePartType.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDNull() {
                this[this.tableNamePartType.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVALUENull() {
                return this.IsNull(this.tableNamePartType.VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVALUENull() {
                this[this.tableNamePartType.VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSYSTEMNull() {
                return this.IsNull(this.tableNamePartType.SYSTEMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSYSTEMNull() {
                this[this.tableNamePartType.SYSTEMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTYPENull() {
                return this.IsNull(this.tableNamePartType.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTYPENull() {
                this[this.tableNamePartType.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSHORTVALUENull() {
                return this.IsNull(this.tableNamePartType.SHORTVALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSHORTVALUENull() {
                this[this.tableNamePartType.SHORTVALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableNamePartType.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableNamePartType.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableNamePartType.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableNamePartType.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTEMPLATENull() {
                return this.IsNull(this.tableNamePartType.TEMPLATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTEMPLATENull() {
                this[this.tableNamePartType.TEMPLATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class NamePartValueRow : global::System.Data.DataRow {
            
            private NamePartValueDataTable tableNamePartValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal NamePartValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNamePartValue = ((NamePartValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RECNO {
                get {
                    try {
                        return ((long)(this[this.tableNamePartValue.RECNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RECNO\' in table \'NamePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartValue.RECNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long UID {
                get {
                    try {
                        return ((long)(this[this.tableNamePartValue.UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UID\' in table \'NamePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartValue.UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TYPE {
                get {
                    try {
                        return ((long)(this[this.tableNamePartValue.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'NamePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartValue.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tableNamePartValue.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'NamePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartValue.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableNamePartValue.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'NamePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartValue.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableNamePartValue.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'NamePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNamePartValue.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NamePartValue_ID {
                get {
                    return ((long)(this[this.tableNamePartValue.NamePartValue_IDColumn]));
                }
                set {
                    this[this.tableNamePartValue.NamePartValue_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRECNONull() {
                return this.IsNull(this.tableNamePartValue.RECNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRECNONull() {
                this[this.tableNamePartValue.RECNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUIDNull() {
                return this.IsNull(this.tableNamePartValue.UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUIDNull() {
                this[this.tableNamePartValue.UIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTYPENull() {
                return this.IsNull(this.tableNamePartValue.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTYPENull() {
                this[this.tableNamePartValue.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDNull() {
                return this.IsNull(this.tableNamePartValue.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDNull() {
                this[this.tableNamePartValue.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableNamePartValue.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableNamePartValue.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableNamePartValue.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableNamePartValue.DSIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ParentChildRelationshipRow : global::System.Data.DataRow {
            
            private ParentChildRelationshipDataTable tableParentChildRelationship;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ParentChildRelationshipRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParentChildRelationship = ((ParentChildRelationshipDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PRIMARY {
                get {
                    try {
                        return ((bool)(this[this.tableParentChildRelationship.PRIMARYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRIMARY\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.PRIMARYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CHILD {
                get {
                    try {
                        return ((long)(this[this.tableParentChildRelationship.CHILDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CHILD\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.CHILDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PARENT {
                get {
                    try {
                        return ((long)(this[this.tableParentChildRelationship.PARENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARENT\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.PARENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PTYPE {
                get {
                    try {
                        return ((long)(this[this.tableParentChildRelationship.PTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PTYPE\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.PTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PNOTE {
                get {
                    try {
                        return ((string)(this[this.tableParentChildRelationship.PNOTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PNOTE\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.PNOTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PSURE {
                get {
                    try {
                        return ((string)(this[this.tableParentChildRelationship.PSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PSURE\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.PSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FSURE {
                get {
                    try {
                        return ((string)(this[this.tableParentChildRelationship.FSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSURE\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.FSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RECNO {
                get {
                    return ((long)(this[this.tableParentChildRelationship.RECNOColumn]));
                }
                set {
                    this[this.tableParentChildRelationship.RECNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableParentChildRelationship.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableParentChildRelationship.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'ParentChildRelationship\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentChildRelationship.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRIMARYNull() {
                return this.IsNull(this.tableParentChildRelationship.PRIMARYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRIMARYNull() {
                this[this.tableParentChildRelationship.PRIMARYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCHILDNull() {
                return this.IsNull(this.tableParentChildRelationship.CHILDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCHILDNull() {
                this[this.tableParentChildRelationship.CHILDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPARENTNull() {
                return this.IsNull(this.tableParentChildRelationship.PARENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPARENTNull() {
                this[this.tableParentChildRelationship.PARENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPTYPENull() {
                return this.IsNull(this.tableParentChildRelationship.PTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPTYPENull() {
                this[this.tableParentChildRelationship.PTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPNOTENull() {
                return this.IsNull(this.tableParentChildRelationship.PNOTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPNOTENull() {
                this[this.tableParentChildRelationship.PNOTEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPSURENull() {
                return this.IsNull(this.tableParentChildRelationship.PSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPSURENull() {
                this[this.tableParentChildRelationship.PSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFSURENull() {
                return this.IsNull(this.tableParentChildRelationship.FSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFSURENull() {
                this[this.tableParentChildRelationship.FSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableParentChildRelationship.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableParentChildRelationship.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableParentChildRelationship.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableParentChildRelationship.DSIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class personRow : global::System.Data.DataRow {
            
            private personDataTable tableperson;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal personRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableperson = ((personDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PER_NO {
                get {
                    return ((long)(this[this.tableperson.PER_NOColumn]));
                }
                set {
                    this[this.tableperson.PER_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long FATHER {
                get {
                    try {
                        return ((long)(this[this.tableperson.FATHERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FATHER\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.FATHERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MOTHER {
                get {
                    try {
                        return ((long)(this[this.tableperson.MOTHERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOTHER\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.MOTHERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LAST_EDIT {
                get {
                    return ((global::System.DateTime)(this[this.tableperson.LAST_EDITColumn]));
                }
                set {
                    this[this.tableperson.LAST_EDITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    return ((long)(this[this.tableperson.DSIDColumn]));
                }
                set {
                    this[this.tableperson.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long REF_ID {
                get {
                    try {
                        return ((long)(this[this.tableperson.REF_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REF_ID\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.REF_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REFERENCE {
                get {
                    try {
                        return ((string)(this[this.tableperson.REFERENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REFERENCE\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.REFERENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SPOULAST {
                get {
                    try {
                        return ((long)(this[this.tableperson.SPOULASTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SPOULAST\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.SPOULASTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SCBUFF {
                get {
                    try {
                        return ((string)(this[this.tableperson.SCBUFFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SCBUFF\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.SCBUFFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PBIRTH {
                get {
                    try {
                        return ((string)(this[this.tableperson.PBIRTHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PBIRTH\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.PBIRTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PDEATH {
                get {
                    try {
                        return ((string)(this[this.tableperson.PDEATHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PDEATH\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.PDEATHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SEX {
                get {
                    return ((string)(this[this.tableperson.SEXColumn]));
                }
                set {
                    this[this.tableperson.SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LIVING {
                get {
                    return ((string)(this[this.tableperson.LIVINGColumn]));
                }
                set {
                    this[this.tableperson.LIVINGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BIRTHORDER {
                get {
                    return ((string)(this[this.tableperson.BIRTHORDERColumn]));
                }
                set {
                    this[this.tableperson.BIRTHORDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MULTIBIRTH {
                get {
                    return ((string)(this[this.tableperson.MULTIBIRTHColumn]));
                }
                set {
                    this[this.tableperson.MULTIBIRTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ADOPTED {
                get {
                    return ((string)(this[this.tableperson.ADOPTEDColumn]));
                }
                set {
                    this[this.tableperson.ADOPTEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ANCE_INT {
                get {
                    return ((string)(this[this.tableperson.ANCE_INTColumn]));
                }
                set {
                    this[this.tableperson.ANCE_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DESC_INT {
                get {
                    return ((string)(this[this.tableperson.DESC_INTColumn]));
                }
                set {
                    this[this.tableperson.DESC_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RELATE {
                get {
                    try {
                        return ((long)(this[this.tableperson.RELATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RELATE\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.RELATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RELATEFO {
                get {
                    try {
                        return ((long)(this[this.tableperson.RELATEFOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RELATEFO\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.RELATEFOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableperson.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FLAG1 {
                get {
                    try {
                        return ((string)(this[this.tableperson.FLAG1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FLAG1\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.FLAG1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFATHERNull() {
                return this.IsNull(this.tableperson.FATHERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFATHERNull() {
                this[this.tableperson.FATHERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMOTHERNull() {
                return this.IsNull(this.tableperson.MOTHERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMOTHERNull() {
                this[this.tableperson.MOTHERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREF_IDNull() {
                return this.IsNull(this.tableperson.REF_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREF_IDNull() {
                this[this.tableperson.REF_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREFERENCENull() {
                return this.IsNull(this.tableperson.REFERENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREFERENCENull() {
                this[this.tableperson.REFERENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSPOULASTNull() {
                return this.IsNull(this.tableperson.SPOULASTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSPOULASTNull() {
                this[this.tableperson.SPOULASTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSCBUFFNull() {
                return this.IsNull(this.tableperson.SCBUFFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSCBUFFNull() {
                this[this.tableperson.SCBUFFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPBIRTHNull() {
                return this.IsNull(this.tableperson.PBIRTHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPBIRTHNull() {
                this[this.tableperson.PBIRTHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPDEATHNull() {
                return this.IsNull(this.tableperson.PDEATHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPDEATHNull() {
                this[this.tableperson.PDEATHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRELATENull() {
                return this.IsNull(this.tableperson.RELATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRELATENull() {
                this[this.tableperson.RELATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRELATEFONull() {
                return this.IsNull(this.tableperson.RELATEFOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRELATEFONull() {
                this[this.tableperson.RELATEFOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableperson.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableperson.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFLAG1Null() {
                return this.IsNull(this.tableperson.FLAG1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFLAG1Null() {
                this[this.tableperson.FLAG1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PlaceDictionaryRow : global::System.Data.DataRow {
            
            private PlaceDictionaryDataTable tablePlaceDictionary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlaceDictionaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlaceDictionary = ((PlaceDictionaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long UID {
                get {
                    try {
                        return ((long)(this[this.tablePlaceDictionary.UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UID\' in table \'PlaceDictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceDictionary.UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VALUE {
                get {
                    try {
                        return ((string)(this[this.tablePlaceDictionary.VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALUE\' in table \'PlaceDictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceDictionary.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SDX {
                get {
                    try {
                        return ((string)(this[this.tablePlaceDictionary.SDXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SDX\' in table \'PlaceDictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceDictionary.SDXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tablePlaceDictionary.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'PlaceDictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceDictionary.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PlaceDictionary_ID {
                get {
                    return ((long)(this[this.tablePlaceDictionary.PlaceDictionary_IDColumn]));
                }
                set {
                    this[this.tablePlaceDictionary.PlaceDictionary_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUIDNull() {
                return this.IsNull(this.tablePlaceDictionary.UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUIDNull() {
                this[this.tablePlaceDictionary.UIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVALUENull() {
                return this.IsNull(this.tablePlaceDictionary.VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVALUENull() {
                this[this.tablePlaceDictionary.VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSDXNull() {
                return this.IsNull(this.tablePlaceDictionary.SDXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSDXNull() {
                this[this.tablePlaceDictionary.SDXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tablePlaceDictionary.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tablePlaceDictionary.TTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PlaceFileRow : global::System.Data.DataRow {
            
            private PlaceFileDataTable tablePlaceFile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlaceFileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlaceFile = ((PlaceFileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RECNO {
                get {
                    return ((long)(this[this.tablePlaceFile.RECNOColumn]));
                }
                set {
                    this[this.tablePlaceFile.RECNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long STYLEID {
                get {
                    try {
                        return ((long)(this[this.tablePlaceFile.STYLEIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STYLEID\' in table \'PlaceFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceFile.STYLEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tablePlaceFile.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'PlaceFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceFile.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tablePlaceFile.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'PlaceFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceFile.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string STARTYEAR {
                get {
                    try {
                        return ((string)(this[this.tablePlaceFile.STARTYEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STARTYEAR\' in table \'PlaceFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceFile.STARTYEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ENDYEAR {
                get {
                    try {
                        return ((string)(this[this.tablePlaceFile.ENDYEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ENDYEAR\' in table \'PlaceFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceFile.ENDYEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string COMMENT {
                get {
                    try {
                        return ((string)(this[this.tablePlaceFile.COMMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMMENT\' in table \'PlaceFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceFile.COMMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SHORTPLACE {
                get {
                    try {
                        return ((string)(this[this.tablePlaceFile.SHORTPLACEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHORTPLACE\' in table \'PlaceFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlaceFile.SHORTPLACEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTYLEIDNull() {
                return this.IsNull(this.tablePlaceFile.STYLEIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTYLEIDNull() {
                this[this.tablePlaceFile.STYLEIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tablePlaceFile.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tablePlaceFile.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tablePlaceFile.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tablePlaceFile.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTARTYEARNull() {
                return this.IsNull(this.tablePlaceFile.STARTYEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTARTYEARNull() {
                this[this.tablePlaceFile.STARTYEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsENDYEARNull() {
                return this.IsNull(this.tablePlaceFile.ENDYEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetENDYEARNull() {
                this[this.tablePlaceFile.ENDYEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOMMENTNull() {
                return this.IsNull(this.tablePlaceFile.COMMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOMMENTNull() {
                this[this.tablePlaceFile.COMMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSHORTPLACENull() {
                return this.IsNull(this.tablePlaceFile.SHORTPLACEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSHORTPLACENull() {
                this[this.tablePlaceFile.SHORTPLACEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PlacePartTypeRow : global::System.Data.DataRow {
            
            private PlacePartTypeDataTable tablePlacePartType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlacePartTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlacePartType = ((PlacePartTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tablePlacePartType.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'PlacePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartType.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TYPE {
                get {
                    try {
                        return ((long)(this[this.tablePlacePartType.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'PlacePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartType.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string VALUE {
                get {
                    try {
                        return ((string)(this[this.tablePlacePartType.VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALUE\' in table \'PlacePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartType.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool SYSTEM {
                get {
                    try {
                        return ((bool)(this[this.tablePlacePartType.SYSTEMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SYSTEM\' in table \'PlacePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartType.SYSTEMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SHORTVALUE {
                get {
                    try {
                        return ((string)(this[this.tablePlacePartType.SHORTVALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHORTVALUE\' in table \'PlacePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartType.SHORTVALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tablePlacePartType.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'PlacePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartType.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tablePlacePartType.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'PlacePartType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartType.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PlacePartType_ID {
                get {
                    return ((long)(this[this.tablePlacePartType.PlacePartType_IDColumn]));
                }
                set {
                    this[this.tablePlacePartType.PlacePartType_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDNull() {
                return this.IsNull(this.tablePlacePartType.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDNull() {
                this[this.tablePlacePartType.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTYPENull() {
                return this.IsNull(this.tablePlacePartType.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTYPENull() {
                this[this.tablePlacePartType.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVALUENull() {
                return this.IsNull(this.tablePlacePartType.VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVALUENull() {
                this[this.tablePlacePartType.VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSYSTEMNull() {
                return this.IsNull(this.tablePlacePartType.SYSTEMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSYSTEMNull() {
                this[this.tablePlacePartType.SYSTEMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSHORTVALUENull() {
                return this.IsNull(this.tablePlacePartType.SHORTVALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSHORTVALUENull() {
                this[this.tablePlacePartType.SHORTVALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tablePlacePartType.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tablePlacePartType.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tablePlacePartType.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tablePlacePartType.DSIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PlacePartValueRow : global::System.Data.DataRow {
            
            private PlacePartValueDataTable tablePlacePartValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PlacePartValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlacePartValue = ((PlacePartValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RECNO {
                get {
                    try {
                        return ((long)(this[this.tablePlacePartValue.RECNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RECNO\' in table \'PlacePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartValue.RECNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long UID {
                get {
                    try {
                        return ((long)(this[this.tablePlacePartValue.UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UID\' in table \'PlacePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartValue.UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TYPE {
                get {
                    try {
                        return ((long)(this[this.tablePlacePartValue.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'PlacePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartValue.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID {
                get {
                    try {
                        return ((long)(this[this.tablePlacePartValue.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'PlacePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartValue.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tablePlacePartValue.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'PlacePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartValue.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tablePlacePartValue.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'PlacePartValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlacePartValue.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PlacePartValue_ID {
                get {
                    return ((long)(this[this.tablePlacePartValue.PlacePartValue_IDColumn]));
                }
                set {
                    this[this.tablePlacePartValue.PlacePartValue_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRECNONull() {
                return this.IsNull(this.tablePlacePartValue.RECNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRECNONull() {
                this[this.tablePlacePartValue.RECNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUIDNull() {
                return this.IsNull(this.tablePlacePartValue.UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUIDNull() {
                this[this.tablePlacePartValue.UIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTYPENull() {
                return this.IsNull(this.tablePlacePartValue.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTYPENull() {
                this[this.tablePlacePartValue.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDNull() {
                return this.IsNull(this.tablePlacePartValue.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDNull() {
                this[this.tablePlacePartValue.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tablePlacePartValue.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tablePlacePartValue.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tablePlacePartValue.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tablePlacePartValue.DSIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RepositoryRow : global::System.Data.DataRow {
            
            private RepositoryDataTable tableRepository;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RepositoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRepository = ((RepositoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableRepository.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableRepository.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RECNO {
                get {
                    return ((long)(this[this.tableRepository.RECNOColumn]));
                }
                set {
                    this[this.tableRepository.RECNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long REF_ID {
                get {
                    try {
                        return ((long)(this[this.tableRepository.REF_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REF_ID\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.REF_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ABBREV {
                get {
                    try {
                        return ((string)(this[this.tableRepository.ABBREVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ABBREV\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.ABBREVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ADDRESS {
                get {
                    try {
                        return ((long)(this[this.tableRepository.ADDRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RNOTE {
                get {
                    try {
                        return ((string)(this[this.tableRepository.RNOTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RNOTE\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.RNOTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RPERNO {
                get {
                    try {
                        return ((long)(this[this.tableRepository.RPERNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RPERNO\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.RPERNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ISPICKED {
                get {
                    try {
                        return ((bool)(this[this.tableRepository.ISPICKEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISPICKED\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.ISPICKEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableRepository.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'Repository\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRepository.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableRepository.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableRepository.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNAMENull() {
                return this.IsNull(this.tableRepository.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNAMENull() {
                this[this.tableRepository.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREF_IDNull() {
                return this.IsNull(this.tableRepository.REF_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREF_IDNull() {
                this[this.tableRepository.REF_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsABBREVNull() {
                return this.IsNull(this.tableRepository.ABBREVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetABBREVNull() {
                this[this.tableRepository.ABBREVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsADDRESSNull() {
                return this.IsNull(this.tableRepository.ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetADDRESSNull() {
                this[this.tableRepository.ADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRNOTENull() {
                return this.IsNull(this.tableRepository.RNOTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRNOTENull() {
                this[this.tableRepository.RNOTEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRPERNONull() {
                return this.IsNull(this.tableRepository.RPERNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRPERNONull() {
                this[this.tableRepository.RPERNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsISPICKEDNull() {
                return this.IsNull(this.tableRepository.ISPICKEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetISPICKEDNull() {
                this[this.tableRepository.ISPICKEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableRepository.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableRepository.TTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ResearchLogRow : global::System.Data.DataRow {
            
            private ResearchLogDataTable tableResearchLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ResearchLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResearchLog = ((ResearchLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RLTYPE {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.RLTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLTYPE\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.RLTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RLNUM {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.RLNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLNUM\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.RLNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RLPER1 {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.RLPER1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLPER1\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.RLPER1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RLPER2 {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.RLPER2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLPER2\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.RLPER2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RLGTYPE {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.RLGTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLGTYPE\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.RLGTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TASK {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.TASKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TASK\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.TASKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RLEDITED {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.RLEDITEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLEDITED\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.RLEDITEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DESIGNED {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.DESIGNEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESIGNED\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.DESIGNEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BEGUN {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.BEGUNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BEGUN\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.BEGUNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PROGRESS {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.PROGRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROGRESS\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.PROGRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string COMPLETED {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.COMPLETEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPLETED\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.COMPLETEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PLANNED {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.PLANNEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PLANNED\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.PLANNEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal EXPENSES {
                get {
                    try {
                        return ((decimal)(this[this.tableResearchLog.EXPENSESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXPENSES\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.EXPENSESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string COMMENTS {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.COMMENTSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMMENTS\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.COMMENTSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RLNOTE {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.RLNOTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RLNOTE\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.RLNOTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string KEYWORDS {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.KEYWORDSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KEYWORDS\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.KEYWORDSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_PERSON {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.ID_PERSONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_PERSON\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.ID_PERSONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_EVENT {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.ID_EVENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_EVENT\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.ID_EVENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_SOURCE {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.ID_SOURCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_SOURCE\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.ID_SOURCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ID_REPOS {
                get {
                    try {
                        return ((long)(this[this.tableResearchLog.ID_REPOSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_REPOS\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.ID_REPOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REFERENCE {
                get {
                    try {
                        return ((string)(this[this.tableResearchLog.REFERENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REFERENCE\' in table \'ResearchLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResearchLog.REFERENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ResearchLog_ID {
                get {
                    return ((long)(this[this.tableResearchLog.ResearchLog_IDColumn]));
                }
                set {
                    this[this.tableResearchLog.ResearchLog_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLTYPENull() {
                return this.IsNull(this.tableResearchLog.RLTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLTYPENull() {
                this[this.tableResearchLog.RLTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLNUMNull() {
                return this.IsNull(this.tableResearchLog.RLNUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLNUMNull() {
                this[this.tableResearchLog.RLNUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLPER1Null() {
                return this.IsNull(this.tableResearchLog.RLPER1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLPER1Null() {
                this[this.tableResearchLog.RLPER1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLPER2Null() {
                return this.IsNull(this.tableResearchLog.RLPER2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLPER2Null() {
                this[this.tableResearchLog.RLPER2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLGTYPENull() {
                return this.IsNull(this.tableResearchLog.RLGTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLGTYPENull() {
                this[this.tableResearchLog.RLGTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTASKNull() {
                return this.IsNull(this.tableResearchLog.TASKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTASKNull() {
                this[this.tableResearchLog.TASKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLEDITEDNull() {
                return this.IsNull(this.tableResearchLog.RLEDITEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLEDITEDNull() {
                this[this.tableResearchLog.RLEDITEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDESIGNEDNull() {
                return this.IsNull(this.tableResearchLog.DESIGNEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDESIGNEDNull() {
                this[this.tableResearchLog.DESIGNEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBEGUNNull() {
                return this.IsNull(this.tableResearchLog.BEGUNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBEGUNNull() {
                this[this.tableResearchLog.BEGUNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPROGRESSNull() {
                return this.IsNull(this.tableResearchLog.PROGRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPROGRESSNull() {
                this[this.tableResearchLog.PROGRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOMPLETEDNull() {
                return this.IsNull(this.tableResearchLog.COMPLETEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOMPLETEDNull() {
                this[this.tableResearchLog.COMPLETEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPLANNEDNull() {
                return this.IsNull(this.tableResearchLog.PLANNEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPLANNEDNull() {
                this[this.tableResearchLog.PLANNEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEXPENSESNull() {
                return this.IsNull(this.tableResearchLog.EXPENSESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEXPENSESNull() {
                this[this.tableResearchLog.EXPENSESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOMMENTSNull() {
                return this.IsNull(this.tableResearchLog.COMMENTSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOMMENTSNull() {
                this[this.tableResearchLog.COMMENTSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRLNOTENull() {
                return this.IsNull(this.tableResearchLog.RLNOTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRLNOTENull() {
                this[this.tableResearchLog.RLNOTEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKEYWORDSNull() {
                return this.IsNull(this.tableResearchLog.KEYWORDSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKEYWORDSNull() {
                this[this.tableResearchLog.KEYWORDSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableResearchLog.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableResearchLog.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_PERSONNull() {
                return this.IsNull(this.tableResearchLog.ID_PERSONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_PERSONNull() {
                this[this.tableResearchLog.ID_PERSONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_EVENTNull() {
                return this.IsNull(this.tableResearchLog.ID_EVENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_EVENTNull() {
                this[this.tableResearchLog.ID_EVENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_SOURCENull() {
                return this.IsNull(this.tableResearchLog.ID_SOURCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_SOURCENull() {
                this[this.tableResearchLog.ID_SOURCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_REPOSNull() {
                return this.IsNull(this.tableResearchLog.ID_REPOSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_REPOSNull() {
                this[this.tableResearchLog.ID_REPOSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableResearchLog.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableResearchLog.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREFERENCENull() {
                return this.IsNull(this.tableResearchLog.REFERENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREFERENCENull() {
                this[this.tableResearchLog.REFERENCEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SourceRow : global::System.Data.DataRow {
            
            private SourceDataTable tableSource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSource = ((SourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool MACTIVE {
                get {
                    try {
                        return ((bool)(this[this.tableSource.MACTIVEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MACTIVE\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.MACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MAJNUM {
                get {
                    return ((long)(this[this.tableSource.MAJNUMColumn]));
                }
                set {
                    this[this.tableSource.MAJNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long REF_ID {
                get {
                    try {
                        return ((long)(this[this.tableSource.REF_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REF_ID\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.REF_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ABBREV {
                get {
                    try {
                        return ((string)(this[this.tableSource.ABBREVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ABBREV\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.ABBREVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DEFSURE {
                get {
                    try {
                        return ((string)(this[this.tableSource.DEFSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFSURE\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.DEFSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TITLE {
                get {
                    try {
                        return ((string)(this[this.tableSource.TITLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TITLE\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.TITLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TYPE {
                get {
                    try {
                        return ((decimal)(this[this.tableSource.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal RECORDER {
                get {
                    try {
                        return ((decimal)(this[this.tableSource.RECORDERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RECORDER\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.RECORDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MEDIA {
                get {
                    try {
                        return ((decimal)(this[this.tableSource.MEDIAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEDIA\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.MEDIAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal FIDELITY {
                get {
                    try {
                        return ((decimal)(this[this.tableSource.FIDELITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIDELITY\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.FIDELITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal INDEXED {
                get {
                    try {
                        return ((decimal)(this[this.tableSource.INDEXEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INDEXED\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.INDEXEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal STATUS {
                get {
                    try {
                        return ((decimal)(this[this.tableSource.STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATUS\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TEXT {
                get {
                    try {
                        return ((string)(this[this.tableSource.TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TEXT\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SPERNO {
                get {
                    try {
                        return ((long)(this[this.tableSource.SPERNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SPERNO\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.SPERNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ISPICKED {
                get {
                    try {
                        return ((bool)(this[this.tableSource.ISPICKEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISPICKED\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.ISPICKEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string INFO {
                get {
                    try {
                        return ((string)(this[this.tableSource.INFOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INFO\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.INFOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FFORM {
                get {
                    try {
                        return ((string)(this[this.tableSource.FFORMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FFORM\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.FFORMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SFORM {
                get {
                    try {
                        return ((string)(this[this.tableSource.SFORMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SFORM\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.SFORMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BFORM {
                get {
                    try {
                        return ((string)(this[this.tableSource.BFORMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BFORM\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.BFORMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CITED {
                get {
                    try {
                        return ((bool)(this[this.tableSource.CITEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITED\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.CITEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal IBIDTYPE {
                get {
                    try {
                        return ((decimal)(this[this.tableSource.IBIDTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IBIDTYPE\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.IBIDTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SUBJECTID {
                get {
                    try {
                        return ((long)(this[this.tableSource.SUBJECTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBJECTID\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.SUBJECTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long COMPILERID {
                get {
                    try {
                        return ((long)(this[this.tableSource.COMPILERIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPILERID\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.COMPILERIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long EDITORID {
                get {
                    try {
                        return ((long)(this[this.tableSource.EDITORIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EDITORID\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.EDITORIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SPERNO2 {
                get {
                    try {
                        return ((long)(this[this.tableSource.SPERNO2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SPERNO2\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.SPERNO2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string UNCITEDFLD {
                get {
                    try {
                        return ((string)(this[this.tableSource.UNCITEDFLDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNCITEDFLD\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.UNCITEDFLDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CUSTTYPE {
                get {
                    try {
                        return ((long)(this[this.tableSource.CUSTTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTTYPE\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.CUSTTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FIRSTCD {
                get {
                    try {
                        return ((string)(this[this.tableSource.FIRSTCDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIRSTCD\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.FIRSTCDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableSource.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REMINDERS {
                get {
                    try {
                        return ((string)(this[this.tableSource.REMINDERSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REMINDERS\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.REMINDERSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableSource.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'Source\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSource.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMACTIVENull() {
                return this.IsNull(this.tableSource.MACTIVEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMACTIVENull() {
                this[this.tableSource.MACTIVEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREF_IDNull() {
                return this.IsNull(this.tableSource.REF_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREF_IDNull() {
                this[this.tableSource.REF_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsABBREVNull() {
                return this.IsNull(this.tableSource.ABBREVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetABBREVNull() {
                this[this.tableSource.ABBREVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDEFSURENull() {
                return this.IsNull(this.tableSource.DEFSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDEFSURENull() {
                this[this.tableSource.DEFSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTITLENull() {
                return this.IsNull(this.tableSource.TITLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTITLENull() {
                this[this.tableSource.TITLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTYPENull() {
                return this.IsNull(this.tableSource.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTYPENull() {
                this[this.tableSource.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRECORDERNull() {
                return this.IsNull(this.tableSource.RECORDERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRECORDERNull() {
                this[this.tableSource.RECORDERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMEDIANull() {
                return this.IsNull(this.tableSource.MEDIAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMEDIANull() {
                this[this.tableSource.MEDIAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFIDELITYNull() {
                return this.IsNull(this.tableSource.FIDELITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFIDELITYNull() {
                this[this.tableSource.FIDELITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINDEXEDNull() {
                return this.IsNull(this.tableSource.INDEXEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINDEXEDNull() {
                this[this.tableSource.INDEXEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTATUSNull() {
                return this.IsNull(this.tableSource.STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTATUSNull() {
                this[this.tableSource.STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTEXTNull() {
                return this.IsNull(this.tableSource.TEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTEXTNull() {
                this[this.tableSource.TEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSPERNONull() {
                return this.IsNull(this.tableSource.SPERNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSPERNONull() {
                this[this.tableSource.SPERNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsISPICKEDNull() {
                return this.IsNull(this.tableSource.ISPICKEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetISPICKEDNull() {
                this[this.tableSource.ISPICKEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsINFONull() {
                return this.IsNull(this.tableSource.INFOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetINFONull() {
                this[this.tableSource.INFOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFFORMNull() {
                return this.IsNull(this.tableSource.FFORMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFFORMNull() {
                this[this.tableSource.FFORMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSFORMNull() {
                return this.IsNull(this.tableSource.SFORMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSFORMNull() {
                this[this.tableSource.SFORMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBFORMNull() {
                return this.IsNull(this.tableSource.BFORMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBFORMNull() {
                this[this.tableSource.BFORMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCITEDNull() {
                return this.IsNull(this.tableSource.CITEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCITEDNull() {
                this[this.tableSource.CITEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIBIDTYPENull() {
                return this.IsNull(this.tableSource.IBIDTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIBIDTYPENull() {
                this[this.tableSource.IBIDTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBJECTIDNull() {
                return this.IsNull(this.tableSource.SUBJECTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBJECTIDNull() {
                this[this.tableSource.SUBJECTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCOMPILERIDNull() {
                return this.IsNull(this.tableSource.COMPILERIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCOMPILERIDNull() {
                this[this.tableSource.COMPILERIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEDITORIDNull() {
                return this.IsNull(this.tableSource.EDITORIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEDITORIDNull() {
                this[this.tableSource.EDITORIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSPERNO2Null() {
                return this.IsNull(this.tableSource.SPERNO2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSPERNO2Null() {
                this[this.tableSource.SPERNO2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUNCITEDFLDNull() {
                return this.IsNull(this.tableSource.UNCITEDFLDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUNCITEDFLDNull() {
                this[this.tableSource.UNCITEDFLDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCUSTTYPENull() {
                return this.IsNull(this.tableSource.CUSTTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCUSTTYPENull() {
                this[this.tableSource.CUSTTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFIRSTCDNull() {
                return this.IsNull(this.tableSource.FIRSTCDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFIRSTCDNull() {
                this[this.tableSource.FIRSTCDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableSource.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableSource.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREMINDERSNull() {
                return this.IsNull(this.tableSource.REMINDERSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREMINDERSNull() {
                this[this.tableSource.REMINDERSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableSource.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableSource.TTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SourceCitationRow : global::System.Data.DataRow {
            
            private SourceCitationDataTable tableSourceCitation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SourceCitationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSourceCitation = ((SourceCitationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long RECNO {
                get {
                    return ((long)(this[this.tableSourceCitation.RECNOColumn]));
                }
                set {
                    this[this.tableSourceCitation.RECNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string STYPE {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.STYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STYPE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.STYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long REFREC {
                get {
                    try {
                        return ((long)(this[this.tableSourceCitation.REFRECColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REFREC\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.REFRECColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MAJSOURCE {
                get {
                    try {
                        return ((long)(this[this.tableSourceCitation.MAJSOURCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAJSOURCE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.MAJSOURCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SUBSOURCE {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.SUBSOURCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBSOURCE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.SUBSOURCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SNSURE {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.SNSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SNSURE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.SNSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SSSURE {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.SSSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SSSURE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.SSSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SDSURE {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.SDSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SDSURE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.SDSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SPSURE {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.SPSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SPSURE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.SPSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SFSURE {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.SFSUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SFSURE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.SFSUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ISPICKED {
                get {
                    try {
                        return ((bool)(this[this.tableSourceCitation.ISPICKEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISPICKED\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.ISPICKEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SEQUENCE {
                get {
                    try {
                        return ((long)(this[this.tableSourceCitation.SEQUENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SEQUENCE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.SEQUENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CITMEMO {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.CITMEMOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITMEMO\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.CITMEMOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool EXCLUDE {
                get {
                    try {
                        return ((bool)(this[this.tableSourceCitation.EXCLUDEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXCLUDE\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.EXCLUDEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableSourceCitation.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CITREF {
                get {
                    try {
                        return ((string)(this[this.tableSourceCitation.CITREFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITREF\' in table \'SourceCitation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSourceCitation.CITREFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTYPENull() {
                return this.IsNull(this.tableSourceCitation.STYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTYPENull() {
                this[this.tableSourceCitation.STYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREFRECNull() {
                return this.IsNull(this.tableSourceCitation.REFRECColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREFRECNull() {
                this[this.tableSourceCitation.REFRECColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMAJSOURCENull() {
                return this.IsNull(this.tableSourceCitation.MAJSOURCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMAJSOURCENull() {
                this[this.tableSourceCitation.MAJSOURCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSUBSOURCENull() {
                return this.IsNull(this.tableSourceCitation.SUBSOURCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSUBSOURCENull() {
                this[this.tableSourceCitation.SUBSOURCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSNSURENull() {
                return this.IsNull(this.tableSourceCitation.SNSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSNSURENull() {
                this[this.tableSourceCitation.SNSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSSSURENull() {
                return this.IsNull(this.tableSourceCitation.SSSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSSSURENull() {
                this[this.tableSourceCitation.SSSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSDSURENull() {
                return this.IsNull(this.tableSourceCitation.SDSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSDSURENull() {
                this[this.tableSourceCitation.SDSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSPSURENull() {
                return this.IsNull(this.tableSourceCitation.SPSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSPSURENull() {
                this[this.tableSourceCitation.SPSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSFSURENull() {
                return this.IsNull(this.tableSourceCitation.SFSUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSFSURENull() {
                this[this.tableSourceCitation.SFSUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsISPICKEDNull() {
                return this.IsNull(this.tableSourceCitation.ISPICKEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetISPICKEDNull() {
                this[this.tableSourceCitation.ISPICKEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSEQUENCENull() {
                return this.IsNull(this.tableSourceCitation.SEQUENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSEQUENCENull() {
                this[this.tableSourceCitation.SEQUENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCITMEMONull() {
                return this.IsNull(this.tableSourceCitation.CITMEMOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCITMEMONull() {
                this[this.tableSourceCitation.CITMEMOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEXCLUDENull() {
                return this.IsNull(this.tableSourceCitation.EXCLUDEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEXCLUDENull() {
                this[this.tableSourceCitation.EXCLUDEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableSourceCitation.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableSourceCitation.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableSourceCitation.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableSourceCitation.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCITREFNull() {
                return this.IsNull(this.tableSourceCitation.CITREFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCITREFNull() {
                this[this.tableSourceCitation.CITREFColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class sourcetypeRow : global::System.Data.DataRow {
            
            private sourcetypeDataTable tablesourcetype;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal sourcetypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesourcetype = ((sourcetypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal RULESET {
                get {
                    try {
                        return ((decimal)(this[this.tablesourcetype.RULESETColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RULESET\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.RULESETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tablesourcetype.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SOURTYPE {
                get {
                    try {
                        return ((long)(this[this.tablesourcetype.SOURTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SOURTYPE\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.SOURTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TRANS_TO {
                get {
                    try {
                        return ((long)(this[this.tablesourcetype.TRANS_TOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANS_TO\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.TRANS_TOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FOOT {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.FOOTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FOOT\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.FOOTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SHORT {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.SHORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SHORT\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.SHORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BIB {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.BIBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BIB\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.BIBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CUSTFOOT {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.CUSTFOOTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTFOOT\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.CUSTFOOTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CUSTSHORT {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.CUSTSHORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTSHORT\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.CUSTSHORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CUSTBIB {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.CUSTBIBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTBIB\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.CUSTBIBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SAMEAS {
                get {
                    try {
                        return ((long)(this[this.tablesourcetype.SAMEASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SAMEAS\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.SAMEASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SAMEASMSG {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.SAMEASMSGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SAMEASMSG\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.SAMEASMSGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PRIMARY {
                get {
                    try {
                        return ((bool)(this[this.tablesourcetype.PRIMARYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRIMARY\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.PRIMARYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REMINDERS {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.REMINDERSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REMINDERS\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.REMINDERSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tablesourcetype.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'sourcetype\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesourcetype.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long SourceType_ID {
                get {
                    return ((long)(this[this.tablesourcetype.SourceType_IDColumn]));
                }
                set {
                    this[this.tablesourcetype.SourceType_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRULESETNull() {
                return this.IsNull(this.tablesourcetype.RULESETColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRULESETNull() {
                this[this.tablesourcetype.RULESETColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tablesourcetype.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tablesourcetype.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSOURTYPENull() {
                return this.IsNull(this.tablesourcetype.SOURTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSOURTYPENull() {
                this[this.tablesourcetype.SOURTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTRANS_TONull() {
                return this.IsNull(this.tablesourcetype.TRANS_TOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTRANS_TONull() {
                this[this.tablesourcetype.TRANS_TOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNAMENull() {
                return this.IsNull(this.tablesourcetype.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNAMENull() {
                this[this.tablesourcetype.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFOOTNull() {
                return this.IsNull(this.tablesourcetype.FOOTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFOOTNull() {
                this[this.tablesourcetype.FOOTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSHORTNull() {
                return this.IsNull(this.tablesourcetype.SHORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSHORTNull() {
                this[this.tablesourcetype.SHORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBIBNull() {
                return this.IsNull(this.tablesourcetype.BIBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBIBNull() {
                this[this.tablesourcetype.BIBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCUSTFOOTNull() {
                return this.IsNull(this.tablesourcetype.CUSTFOOTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCUSTFOOTNull() {
                this[this.tablesourcetype.CUSTFOOTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCUSTSHORTNull() {
                return this.IsNull(this.tablesourcetype.CUSTSHORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCUSTSHORTNull() {
                this[this.tablesourcetype.CUSTSHORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCUSTBIBNull() {
                return this.IsNull(this.tablesourcetype.CUSTBIBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCUSTBIBNull() {
                this[this.tablesourcetype.CUSTBIBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSAMEASNull() {
                return this.IsNull(this.tablesourcetype.SAMEASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSAMEASNull() {
                this[this.tablesourcetype.SAMEASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSAMEASMSGNull() {
                return this.IsNull(this.tablesourcetype.SAMEASMSGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSAMEASMSGNull() {
                this[this.tablesourcetype.SAMEASMSGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRIMARYNull() {
                return this.IsNull(this.tablesourcetype.PRIMARYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRIMARYNull() {
                this[this.tablesourcetype.PRIMARYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREMINDERSNull() {
                return this.IsNull(this.tablesourcetype.REMINDERSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREMINDERSNull() {
                this[this.tablesourcetype.REMINDERSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tablesourcetype.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tablesourcetype.TTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class StyleRow : global::System.Data.DataRow {
            
            private StyleDataTable tableStyle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal StyleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStyle = ((StyleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long STYLEID {
                get {
                    return ((long)(this[this.tableStyle.STYLEIDColumn]));
                }
                set {
                    this[this.tableStyle.STYLEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ST_DISPLAY {
                get {
                    try {
                        return ((string)(this[this.tableStyle.ST_DISPLAYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ST_DISPLAY\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.ST_DISPLAYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ST_OUTPUT {
                get {
                    try {
                        return ((string)(this[this.tableStyle.ST_OUTPUTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ST_OUTPUT\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.ST_OUTPUTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GROUP {
                get {
                    try {
                        return ((string)(this[this.tableStyle.GROUPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROUP\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.GROUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SRNAMESORT {
                get {
                    try {
                        return ((string)(this[this.tableStyle.SRNAMESORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRNAMESORT\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.SRNAMESORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SRNAMEDISP {
                get {
                    try {
                        return ((string)(this[this.tableStyle.SRNAMEDISPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SRNAMEDISP\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.SRNAMEDISPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GVNAMESORT {
                get {
                    try {
                        return ((string)(this[this.tableStyle.GVNAMESORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GVNAMESORT\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.GVNAMESORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GVNAMEDISP {
                get {
                    try {
                        return ((string)(this[this.tableStyle.GVNAMEDISPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GVNAMEDISP\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.GVNAMEDISPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string OTHERDISP {
                get {
                    try {
                        return ((string)(this[this.tableStyle.OTHERDISPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OTHERDISP\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.OTHERDISPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableStyle.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableStyle.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string STYLENAME {
                get {
                    try {
                        return ((string)(this[this.tableStyle.STYLENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STYLENAME\' in table \'Style\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStyle.STYLENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsST_DISPLAYNull() {
                return this.IsNull(this.tableStyle.ST_DISPLAYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetST_DISPLAYNull() {
                this[this.tableStyle.ST_DISPLAYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsST_OUTPUTNull() {
                return this.IsNull(this.tableStyle.ST_OUTPUTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetST_OUTPUTNull() {
                this[this.tableStyle.ST_OUTPUTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGROUPNull() {
                return this.IsNull(this.tableStyle.GROUPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGROUPNull() {
                this[this.tableStyle.GROUPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSRNAMESORTNull() {
                return this.IsNull(this.tableStyle.SRNAMESORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSRNAMESORTNull() {
                this[this.tableStyle.SRNAMESORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSRNAMEDISPNull() {
                return this.IsNull(this.tableStyle.SRNAMEDISPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSRNAMEDISPNull() {
                this[this.tableStyle.SRNAMEDISPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGVNAMESORTNull() {
                return this.IsNull(this.tableStyle.GVNAMESORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGVNAMESORTNull() {
                this[this.tableStyle.GVNAMESORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGVNAMEDISPNull() {
                return this.IsNull(this.tableStyle.GVNAMEDISPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGVNAMEDISPNull() {
                this[this.tableStyle.GVNAMEDISPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOTHERDISPNull() {
                return this.IsNull(this.tableStyle.OTHERDISPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOTHERDISPNull() {
                this[this.tableStyle.OTHERDISPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableStyle.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableStyle.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableStyle.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableStyle.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSTYLENAMENull() {
                return this.IsNull(this.tableStyle.STYLENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSTYLENAMENull() {
                this[this.tableStyle.STYLENAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TagTypeRow : global::System.Data.DataRow {
            
            private TagTypeDataTable tableTagType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TagTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTagType = ((TagTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ISPICKED {
                get {
                    try {
                        return ((bool)(this[this.tableTagType.ISPICKEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISPICKED\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.ISPICKEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableTagType.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ACTIVE {
                get {
                    try {
                        return ((bool)(this[this.tableTagType.ACTIVEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACTIVE\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ETYPENUM {
                get {
                    return ((long)(this[this.tableTagType.ETYPENUMColumn]));
                }
                set {
                    this[this.tableTagType.ETYPENUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ORIGETYPE {
                get {
                    try {
                        return ((long)(this[this.tableTagType.ORIGETYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORIGETYPE\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.ORIGETYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ADMIN {
                get {
                    try {
                        return ((decimal)(this[this.tableTagType.ADMINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADMIN\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.ADMINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool LDSONLY {
                get {
                    try {
                        return ((bool)(this[this.tableTagType.LDSONLYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LDSONLY\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.LDSONLYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ETYPENAME {
                get {
                    try {
                        return ((string)(this[this.tableTagType.ETYPENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ETYPENAME\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.ETYPENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GEDCOM_TAG {
                get {
                    try {
                        return ((string)(this[this.tableTagType.GEDCOM_TAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GEDCOM_TAG\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.GEDCOM_TAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ISREPORT {
                get {
                    try {
                        return ((bool)(this[this.tableTagType.ISREPORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISREPORT\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.ISREPORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TSENTENCE {
                get {
                    try {
                        return ((string)(this[this.tableTagType.TSENTENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TSENTENCE\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.TSENTENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ABBREV {
                get {
                    try {
                        return ((string)(this[this.tableTagType.ABBREVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ABBREV\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.ABBREVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool WITDISP {
                get {
                    try {
                        return ((bool)(this[this.tableTagType.WITDISPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WITDISP\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.WITDISPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PASTTENSE {
                get {
                    try {
                        return ((string)(this[this.tableTagType.PASTTENSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PASTTENSE\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.PASTTENSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool PRINROLE {
                get {
                    try {
                        return ((bool)(this[this.tableTagType.PRINROLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRINROLE\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.PRINROLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool WITROLE {
                get {
                    try {
                        return ((bool)(this[this.tableTagType.WITROLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WITROLE\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.WITROLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MAXYEAR {
                get {
                    try {
                        return ((decimal)(this[this.tableTagType.MAXYEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAXYEAR\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.MAXYEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MINYEAR {
                get {
                    try {
                        return ((decimal)(this[this.tableTagType.MINYEARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MINYEAR\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.MINYEARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string REMINDERS {
                get {
                    try {
                        return ((string)(this[this.tableTagType.REMINDERSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REMINDERS\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.REMINDERSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableTagType.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PROPERTIES {
                get {
                    try {
                        return ((string)(this[this.tableTagType.PROPERTIESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROPERTIES\' in table \'TagType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTagType.PROPERTIESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsISPICKEDNull() {
                return this.IsNull(this.tableTagType.ISPICKEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetISPICKEDNull() {
                this[this.tableTagType.ISPICKEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableTagType.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableTagType.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsACTIVENull() {
                return this.IsNull(this.tableTagType.ACTIVEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetACTIVENull() {
                this[this.tableTagType.ACTIVEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsORIGETYPENull() {
                return this.IsNull(this.tableTagType.ORIGETYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetORIGETYPENull() {
                this[this.tableTagType.ORIGETYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsADMINNull() {
                return this.IsNull(this.tableTagType.ADMINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetADMINNull() {
                this[this.tableTagType.ADMINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLDSONLYNull() {
                return this.IsNull(this.tableTagType.LDSONLYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLDSONLYNull() {
                this[this.tableTagType.LDSONLYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsETYPENAMENull() {
                return this.IsNull(this.tableTagType.ETYPENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetETYPENAMENull() {
                this[this.tableTagType.ETYPENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGEDCOM_TAGNull() {
                return this.IsNull(this.tableTagType.GEDCOM_TAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGEDCOM_TAGNull() {
                this[this.tableTagType.GEDCOM_TAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsISREPORTNull() {
                return this.IsNull(this.tableTagType.ISREPORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetISREPORTNull() {
                this[this.tableTagType.ISREPORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTSENTENCENull() {
                return this.IsNull(this.tableTagType.TSENTENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTSENTENCENull() {
                this[this.tableTagType.TSENTENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsABBREVNull() {
                return this.IsNull(this.tableTagType.ABBREVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetABBREVNull() {
                this[this.tableTagType.ABBREVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWITDISPNull() {
                return this.IsNull(this.tableTagType.WITDISPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWITDISPNull() {
                this[this.tableTagType.WITDISPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPASTTENSENull() {
                return this.IsNull(this.tableTagType.PASTTENSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPASTTENSENull() {
                this[this.tableTagType.PASTTENSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPRINROLENull() {
                return this.IsNull(this.tableTagType.PRINROLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPRINROLENull() {
                this[this.tableTagType.PRINROLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWITROLENull() {
                return this.IsNull(this.tableTagType.WITROLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWITROLENull() {
                this[this.tableTagType.WITROLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMAXYEARNull() {
                return this.IsNull(this.tableTagType.MAXYEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMAXYEARNull() {
                this[this.tableTagType.MAXYEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMINYEARNull() {
                return this.IsNull(this.tableTagType.MINYEARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMINYEARNull() {
                this[this.tableTagType.MINYEARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsREMINDERSNull() {
                return this.IsNull(this.tableTagType.REMINDERSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetREMINDERSNull() {
                this[this.tableTagType.REMINDERSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableTagType.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableTagType.TTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPROPERTIESNull() {
                return this.IsNull(this.tableTagType.PROPERTIESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPROPERTIESNull() {
                this[this.tableTagType.PROPERTIESColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TimelineLockRow : global::System.Data.DataRow {
            
            private TimelineLockDataTable tableTimelineLock;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TimelineLockRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimelineLock = ((TimelineLockDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long IDLOCK {
                get {
                    try {
                        return ((long)(this[this.tableTimelineLock.IDLOCKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDLOCK\' in table \'TimelineLock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimelineLock.IDLOCKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TNAME {
                get {
                    try {
                        return ((string)(this[this.tableTimelineLock.TNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TNAME\' in table \'TimelineLock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimelineLock.TNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DSID {
                get {
                    try {
                        return ((long)(this[this.tableTimelineLock.DSIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSID\' in table \'TimelineLock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimelineLock.DSIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TT {
                get {
                    try {
                        return ((string)(this[this.tableTimelineLock.TTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TT\' in table \'TimelineLock\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimelineLock.TTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TimelineLock_ID {
                get {
                    return ((long)(this[this.tableTimelineLock.TimelineLock_IDColumn]));
                }
                set {
                    this[this.tableTimelineLock.TimelineLock_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDLOCKNull() {
                return this.IsNull(this.tableTimelineLock.IDLOCKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDLOCKNull() {
                this[this.tableTimelineLock.IDLOCKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTNAMENull() {
                return this.IsNull(this.tableTimelineLock.TNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTNAMENull() {
                this[this.tableTimelineLock.TNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDSIDNull() {
                return this.IsNull(this.tableTimelineLock.DSIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDSIDNull() {
                this[this.tableTimelineLock.DSIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTTNull() {
                return this.IsNull(this.tableTimelineLock.TTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTTNull() {
                this[this.tableTimelineLock.TTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DataSetRowChangeEvent : global::System.EventArgs {
            
            private DataSetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSetRowChangeEvent(DataSetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DNARowChangeEvent : global::System.EventArgs {
            
            private DNARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DNARowChangeEvent(DNARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DNARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EventRowChangeEvent : global::System.EventArgs {
            
            private EventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRowChangeEvent(EventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EventWitnessRowChangeEvent : global::System.EventArgs {
            
            private EventWitnessRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventWitnessRowChangeEvent(EventWitnessRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventWitnessRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ExhibitRowChangeEvent : global::System.EventArgs {
            
            private ExhibitRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExhibitRowChangeEvent(ExhibitRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExhibitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FlagRowChangeEvent : global::System.EventArgs {
            
            private FlagRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FlagRowChangeEvent(FlagRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FlagRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FocusGroupRowChangeEvent : global::System.EventArgs {
            
            private FocusGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupRowChangeEvent(FocusGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FocusGroupMemberRowChangeEvent : global::System.EventArgs {
            
            private FocusGroupMemberRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupMemberRowChangeEvent(FocusGroupMemberRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FocusGroupMemberRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NameRowChangeEvent : global::System.EventArgs {
            
            private NameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameRowChangeEvent(NameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NameDictionaryRowChangeEvent : global::System.EventArgs {
            
            private NameDictionaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameDictionaryRowChangeEvent(NameDictionaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NameDictionaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NamePartTypeRowChangeEvent : global::System.EventArgs {
            
            private NamePartTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartTypeRowChangeEvent(NamePartTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class NamePartValueRowChangeEvent : global::System.EventArgs {
            
            private NamePartValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartValueRowChangeEvent(NamePartValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public NamePartValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ParentChildRelationshipRowChangeEvent : global::System.EventArgs {
            
            private ParentChildRelationshipRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentChildRelationshipRowChangeEvent(ParentChildRelationshipRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ParentChildRelationshipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class personRowChangeEvent : global::System.EventArgs {
            
            private personRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public personRowChangeEvent(personRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public personRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PlaceDictionaryRowChangeEvent : global::System.EventArgs {
            
            private PlaceDictionaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceDictionaryRowChangeEvent(PlaceDictionaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceDictionaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PlaceFileRowChangeEvent : global::System.EventArgs {
            
            private PlaceFileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceFileRowChangeEvent(PlaceFileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlaceFileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PlacePartTypeRowChangeEvent : global::System.EventArgs {
            
            private PlacePartTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartTypeRowChangeEvent(PlacePartTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PlacePartValueRowChangeEvent : global::System.EventArgs {
            
            private PlacePartValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartValueRowChangeEvent(PlacePartValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PlacePartValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RepositoryRowChangeEvent : global::System.EventArgs {
            
            private RepositoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RepositoryRowChangeEvent(RepositoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RepositoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ResearchLogRowChangeEvent : global::System.EventArgs {
            
            private ResearchLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ResearchLogRowChangeEvent(ResearchLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ResearchLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SourceRowChangeEvent : global::System.EventArgs {
            
            private SourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceRowChangeEvent(SourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SourceCitationRowChangeEvent : global::System.EventArgs {
            
            private SourceCitationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceCitationRowChangeEvent(SourceCitationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SourceCitationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class sourcetypeRowChangeEvent : global::System.EventArgs {
            
            private sourcetypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public sourcetypeRowChangeEvent(sourcetypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public sourcetypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class StyleRowChangeEvent : global::System.EventArgs {
            
            private StyleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StyleRowChangeEvent(StyleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public StyleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TagTypeRowChangeEvent : global::System.EventArgs {
            
            private TagTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TagTypeRowChangeEvent(TagTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TagTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TimelineLockRowChangeEvent : global::System.EventArgs {
            
            private TimelineLockRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimelineLockRowChangeEvent(TimelineLockRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TimelineLockRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TMG.DataExtractor.tmgDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataSetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DataSetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DataSet";
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("DSNAME", "DSNAME");
            tableMapping.ColumnMappings.Add("DSLOCATION", "DSLOCATION");
            tableMapping.ColumnMappings.Add("DSTYPE", "DSTYPE");
            tableMapping.ColumnMappings.Add("DSLOCKED", "DSLOCKED");
            tableMapping.ColumnMappings.Add("DSENABLED", "DSENABLED");
            tableMapping.ColumnMappings.Add("PROPERTY", "PROPERTY");
            tableMapping.ColumnMappings.Add("DSP", "DSP");
            tableMapping.ColumnMappings.Add("DSP2", "DSP2");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DCOMMENT", "DCOMMENT");
            tableMapping.ColumnMappings.Add("HOST", "HOST");
            tableMapping.ColumnMappings.Add("NAMESTYLE", "NAMESTYLE");
            tableMapping.ColumnMappings.Add("PLACESTYLE", "PLACESTYLE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[DataSet] WHERE (([DSID] = @Original_DSID) AND ((@IsNull_DSNAME = 1 AND [DSNAME] IS NULL) OR ([DSNAME] = @Original_DSNAME)) AND ((@IsNull_DSLOCATION = 1 AND [DSLOCATION] IS NULL) OR ([DSLOCATION] = @Original_DSLOCATION)) AND ((@IsNull_DSTYPE = 1 AND [DSTYPE] IS NULL) OR ([DSTYPE] = @Original_DSTYPE)) AND ((@IsNull_DSLOCKED = 1 AND [DSLOCKED] IS NULL) OR ([DSLOCKED] = @Original_DSLOCKED)) AND ((@IsNull_DSENABLED = 1 AND [DSENABLED] IS NULL) OR ([DSENABLED] = @Original_DSENABLED)) AND ((@IsNull_PROPERTY = 1 AND [PROPERTY] IS NULL) OR ([PROPERTY] = @Original_PROPERTY)) AND ((@IsNull_DSP = 1 AND [DSP] IS NULL) OR ([DSP] = @Original_DSP)) AND ((@IsNull_DSP2 = 1 AND [DSP2] IS NULL) OR ([DSP2] = @Original_DSP2)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DCOMMENT = 1 AND [DCOMMENT] IS NULL) OR ([DCOMMENT] = @Original_DCOMMENT)) AND ((@IsNull_HOST = 1 AND [HOST] IS NULL) OR ([HOST] = @Original_HOST)) AND ((@IsNull_NAMESTYLE = 1 AND [NAMESTYLE] IS NULL) OR ([NAMESTYLE] = @Original_NAMESTYLE)) AND ((@IsNull_PLACESTYLE = 1 AND [PLACESTYLE] IS NULL) OR ([PLACESTYLE] = @Original_PLACESTYLE)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSLOCATION";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSLOCATION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSLOCATION";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSLOCATION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSTYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DSTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSLOCKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSLOCKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSLOCKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "DSLOCKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSENABLED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSENABLED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSENABLED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "DSENABLED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROPERTY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DSP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSP2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSP2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSP2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DSP2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DCOMMENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DCOMMENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DCOMMENT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DCOMMENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_HOST";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "HOST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_HOST";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "HOST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAMESTYLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAMESTYLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAMESTYLE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMESTYLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PLACESTYLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PLACESTYLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PLACESTYLE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PLACESTYLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[DataSet] ([DSID], [DSNAME], [DSLOCATION], [DSTYPE], [DSLOCKED], [DSENABLED], [PROPERTY], [DSP], [DSP2], [TT], [DCOMMENT], [HOST], [NAMESTYLE], [PLACESTYLE]) VALUES (@DSID, @DSNAME, @DSLOCATION, @DSTYPE, @DSLOCKED, @DSENABLED, @PROPERTY, @DSP, @DSP2, @TT, @DCOMMENT, @HOST, @NAMESTYLE, @PLACESTYLE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSLOCATION";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSLOCATION";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSTYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DSTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSLOCKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "DSLOCKED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSENABLED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "DSENABLED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DSP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSP2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DSP2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DCOMMENT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DCOMMENT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@HOST";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "HOST";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAMESTYLE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMESTYLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PLACESTYLE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PLACESTYLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[DataSet] SET [DSID] = @DSID, [DSNAME] = @DSNAME, [DSLOCATION] = @DSLOCATION, [DSTYPE] = @DSTYPE, [DSLOCKED] = @DSLOCKED, [DSENABLED] = @DSENABLED, [PROPERTY] = @PROPERTY, [DSP] = @DSP, [DSP2] = @DSP2, [TT] = @TT, [DCOMMENT] = @DCOMMENT, [HOST] = @HOST, [NAMESTYLE] = @NAMESTYLE, [PLACESTYLE] = @PLACESTYLE WHERE (([DSID] = @Original_DSID) AND ((@IsNull_DSNAME = 1 AND [DSNAME] IS NULL) OR ([DSNAME] = @Original_DSNAME)) AND ((@IsNull_DSLOCATION = 1 AND [DSLOCATION] IS NULL) OR ([DSLOCATION] = @Original_DSLOCATION)) AND ((@IsNull_DSTYPE = 1 AND [DSTYPE] IS NULL) OR ([DSTYPE] = @Original_DSTYPE)) AND ((@IsNull_DSLOCKED = 1 AND [DSLOCKED] IS NULL) OR ([DSLOCKED] = @Original_DSLOCKED)) AND ((@IsNull_DSENABLED = 1 AND [DSENABLED] IS NULL) OR ([DSENABLED] = @Original_DSENABLED)) AND ((@IsNull_PROPERTY = 1 AND [PROPERTY] IS NULL) OR ([PROPERTY] = @Original_PROPERTY)) AND ((@IsNull_DSP = 1 AND [DSP] IS NULL) OR ([DSP] = @Original_DSP)) AND ((@IsNull_DSP2 = 1 AND [DSP2] IS NULL) OR ([DSP2] = @Original_DSP2)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DCOMMENT = 1 AND [DCOMMENT] IS NULL) OR ([DCOMMENT] = @Original_DCOMMENT)) AND ((@IsNull_HOST = 1 AND [HOST] IS NULL) OR ([HOST] = @Original_HOST)) AND ((@IsNull_NAMESTYLE = 1 AND [NAMESTYLE] IS NULL) OR ([NAMESTYLE] = @Original_NAMESTYLE)) AND ((@IsNull_PLACESTYLE = 1 AND [PLACESTYLE] IS NULL) OR ([PLACESTYLE] = @Original_PLACESTYLE)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSLOCATION";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSLOCATION";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSTYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DSTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSLOCKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "DSLOCKED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSENABLED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "DSENABLED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DSP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSP2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DSP2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DCOMMENT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DCOMMENT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@HOST";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "HOST";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAMESTYLE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMESTYLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PLACESTYLE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PLACESTYLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSLOCATION";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSLOCATION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSLOCATION";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSLOCATION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSTYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "DSTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSLOCKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSLOCKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSLOCKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "DSLOCKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSENABLED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSENABLED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSENABLED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "DSENABLED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROPERTY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DSP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSP2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSP2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSP2";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DSP2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DCOMMENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DCOMMENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DCOMMENT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DCOMMENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_HOST";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "HOST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_HOST";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "HOST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAMESTYLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAMESTYLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAMESTYLE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMESTYLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PLACESTYLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PLACESTYLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PLACESTYLE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PLACESTYLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [DSID], [DSNAME], [DSLOCATION], [DSTYPE], [DSLOCKED], [DSENABLED], [PROPER" +
                "TY], [DSP], [DSP2], [TT], [DCOMMENT], [HOST], [NAMESTYLE], [PLACESTYLE] FROM [Da" +
                "taSet]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.DataSetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.DataSetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.DataSetDataTable dataTable = new tmgDataSet.DataSetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.DataSetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DataSet");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_DSID, string Original_DSNAME, string Original_DSLOCATION, global::System.Nullable<decimal> Original_DSTYPE, global::System.Nullable<bool> Original_DSLOCKED, global::System.Nullable<bool> Original_DSENABLED, string Original_PROPERTY, string Original_DSP, string Original_DSP2, string Original_TT, string Original_DCOMMENT, string Original_HOST, global::System.Nullable<long> Original_NAMESTYLE, global::System.Nullable<long> Original_PLACESTYLE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_DSID));
            if ((Original_DSNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DSNAME));
            }
            if ((Original_DSLOCATION == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_DSLOCATION));
            }
            if ((Original_DSTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_DSTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_DSLOCKED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_DSLOCKED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_DSENABLED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_DSENABLED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_PROPERTY == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_PROPERTY));
            }
            if ((Original_DSP == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_DSP));
            }
            if ((Original_DSP2 == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_DSP2));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TT));
            }
            if ((Original_DCOMMENT == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_DCOMMENT));
            }
            if ((Original_HOST == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_HOST));
            }
            if ((Original_NAMESTYLE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((long)(Original_NAMESTYLE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_PLACESTYLE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((long)(Original_PLACESTYLE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long DSID, string DSNAME, string DSLOCATION, global::System.Nullable<decimal> DSTYPE, global::System.Nullable<bool> DSLOCKED, global::System.Nullable<bool> DSENABLED, string PROPERTY, string DSP, string DSP2, string TT, string DCOMMENT, string HOST, global::System.Nullable<long> NAMESTYLE, global::System.Nullable<long> PLACESTYLE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(DSID));
            if ((DSNAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DSNAME));
            }
            if ((DSLOCATION == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DSLOCATION));
            }
            if ((DSTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(DSTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DSLOCKED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(DSLOCKED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((DSENABLED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(DSENABLED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PROPERTY == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(PROPERTY));
            }
            if ((DSP == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(DSP));
            }
            if ((DSP2 == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(DSP2));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(TT));
            }
            if ((DCOMMENT == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(DCOMMENT));
            }
            if ((HOST == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(HOST));
            }
            if ((NAMESTYLE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(NAMESTYLE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((PLACESTYLE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((long)(PLACESTYLE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long DSID, 
                    string DSNAME, 
                    string DSLOCATION, 
                    global::System.Nullable<decimal> DSTYPE, 
                    global::System.Nullable<bool> DSLOCKED, 
                    global::System.Nullable<bool> DSENABLED, 
                    string PROPERTY, 
                    string DSP, 
                    string DSP2, 
                    string TT, 
                    string DCOMMENT, 
                    string HOST, 
                    global::System.Nullable<long> NAMESTYLE, 
                    global::System.Nullable<long> PLACESTYLE, 
                    long Original_DSID, 
                    string Original_DSNAME, 
                    string Original_DSLOCATION, 
                    global::System.Nullable<decimal> Original_DSTYPE, 
                    global::System.Nullable<bool> Original_DSLOCKED, 
                    global::System.Nullable<bool> Original_DSENABLED, 
                    string Original_PROPERTY, 
                    string Original_DSP, 
                    string Original_DSP2, 
                    string Original_TT, 
                    string Original_DCOMMENT, 
                    string Original_HOST, 
                    global::System.Nullable<long> Original_NAMESTYLE, 
                    global::System.Nullable<long> Original_PLACESTYLE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(DSID));
            if ((DSNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DSNAME));
            }
            if ((DSLOCATION == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DSLOCATION));
            }
            if ((DSTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(DSTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DSLOCKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(DSLOCKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((DSENABLED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(DSENABLED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((PROPERTY == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(PROPERTY));
            }
            if ((DSP == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(DSP));
            }
            if ((DSP2 == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(DSP2));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(TT));
            }
            if ((DCOMMENT == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(DCOMMENT));
            }
            if ((HOST == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(HOST));
            }
            if ((NAMESTYLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(NAMESTYLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((PLACESTYLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(PLACESTYLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_DSID));
            if ((Original_DSNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_DSNAME));
            }
            if ((Original_DSLOCATION == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_DSLOCATION));
            }
            if ((Original_DSTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_DSTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_DSLOCKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((bool)(Original_DSLOCKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_DSENABLED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_DSENABLED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_PROPERTY == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_PROPERTY));
            }
            if ((Original_DSP == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_DSP));
            }
            if ((Original_DSP2 == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_DSP2));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_TT));
            }
            if ((Original_DCOMMENT == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_DCOMMENT));
            }
            if ((Original_HOST == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_HOST));
            }
            if ((Original_NAMESTYLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((long)(Original_NAMESTYLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_PLACESTYLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((long)(Original_PLACESTYLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string DSNAME, 
                    string DSLOCATION, 
                    global::System.Nullable<decimal> DSTYPE, 
                    global::System.Nullable<bool> DSLOCKED, 
                    global::System.Nullable<bool> DSENABLED, 
                    string PROPERTY, 
                    string DSP, 
                    string DSP2, 
                    string TT, 
                    string DCOMMENT, 
                    string HOST, 
                    global::System.Nullable<long> NAMESTYLE, 
                    global::System.Nullable<long> PLACESTYLE, 
                    long Original_DSID, 
                    string Original_DSNAME, 
                    string Original_DSLOCATION, 
                    global::System.Nullable<decimal> Original_DSTYPE, 
                    global::System.Nullable<bool> Original_DSLOCKED, 
                    global::System.Nullable<bool> Original_DSENABLED, 
                    string Original_PROPERTY, 
                    string Original_DSP, 
                    string Original_DSP2, 
                    string Original_TT, 
                    string Original_DCOMMENT, 
                    string Original_HOST, 
                    global::System.Nullable<long> Original_NAMESTYLE, 
                    global::System.Nullable<long> Original_PLACESTYLE) {
            return this.Update(Original_DSID, DSNAME, DSLOCATION, DSTYPE, DSLOCKED, DSENABLED, PROPERTY, DSP, DSP2, TT, DCOMMENT, HOST, NAMESTYLE, PLACESTYLE, Original_DSID, Original_DSNAME, Original_DSLOCATION, Original_DSTYPE, Original_DSLOCKED, Original_DSENABLED, Original_PROPERTY, Original_DSP, Original_DSP2, Original_TT, Original_DCOMMENT, Original_HOST, Original_NAMESTYLE, Original_PLACESTYLE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DNATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DNATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DNA";
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("ID_DNA", "ID_DNA");
            tableMapping.ColumnMappings.Add("ID_PERSON", "ID_PERSON");
            tableMapping.ColumnMappings.Add("DNANAME", "DNANAME");
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS");
            tableMapping.ColumnMappings.Add("DESCRIPT", "DESCRIPT");
            tableMapping.ColumnMappings.Add("RESULT", "RESULT");
            tableMapping.ColumnMappings.Add("URL", "URL");
            tableMapping.ColumnMappings.Add("LOGO", "LOGO");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("KITNUMBER", "KITNUMBER");
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("NAMEREC", "NAMEREC");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[DNA] WHERE (((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([ID_DNA] = @Original_ID_DNA) AND ((@IsNull_ID_PERSON = 1 AND [ID_PERSON] IS NULL) OR ([ID_PERSON] = @Original_ID_PERSON)) AND ((@IsNull_DNANAME = 1 AND [DNANAME] IS NULL) OR ([DNANAME] = @Original_DNANAME)) AND ((@IsNull_COMMENTS = 1 AND [COMMENTS] IS NULL) OR ([COMMENTS] = @Original_COMMENTS)) AND ((@IsNull_DESCRIPT = 1 AND [DESCRIPT] IS NULL) OR ([DESCRIPT] = @Original_DESCRIPT)) AND ((@IsNull_RESULT = 1 AND [RESULT] IS NULL) OR ([RESULT] = @Original_RESULT)) AND ((@IsNull_URL = 1 AND [URL] IS NULL) OR ([URL] = @Original_URL)) AND ((@IsNull_LOGO = 1 AND [LOGO] IS NULL) OR ([LOGO] = @Original_LOGO)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_KITNUMBER = 1 AND [KITNUMBER] IS NULL) OR ([KITNUMBER] = @Original_KITNUMBER)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_NAMEREC = 1 AND [NAMEREC] IS NULL) OR ([NAMEREC] = @Original_NAMEREC)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_DNA";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_DNA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DNANAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DNANAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DNANAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DNANAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMMENTS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMMENTS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMMENTS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENTS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DESCRIPT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RESULT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RESULT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RESULT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RESULT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_URL";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "URL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_URL";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "URL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LOGO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LOGO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LOGO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "LOGO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_KITNUMBER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "KITNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_KITNUMBER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "KITNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAMEREC";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAMEREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAMEREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMEREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[DNA] ([DSID], [ID_DNA], [ID_PERSON], [DNANAME], [COMMENTS], [DESCRIPT], [RESULT], [URL], [LOGO], [TT], [KITNUMBER], [TYPE], [NAMEREC]) VALUES (@DSID, @ID_DNA, @ID_PERSON, @DNANAME, @COMMENTS, @DESCRIPT, @RESULT, @URL, @LOGO, @TT, @KITNUMBER, @TYPE, @NAMEREC)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_DNA";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_DNA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DNANAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DNANAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMMENTS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENTS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RESULT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RESULT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@URL";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "URL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LOGO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "LOGO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@KITNUMBER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "KITNUMBER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAMEREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMEREC";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[DNA] SET [DSID] = @DSID, [ID_DNA] = @ID_DNA, [ID_PERSON] = @ID_PERSON, [DNANAME] = @DNANAME, [COMMENTS] = @COMMENTS, [DESCRIPT] = @DESCRIPT, [RESULT] = @RESULT, [URL] = @URL, [LOGO] = @LOGO, [TT] = @TT, [KITNUMBER] = @KITNUMBER, [TYPE] = @TYPE, [NAMEREC] = @NAMEREC WHERE (((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([ID_DNA] = @Original_ID_DNA) AND ((@IsNull_ID_PERSON = 1 AND [ID_PERSON] IS NULL) OR ([ID_PERSON] = @Original_ID_PERSON)) AND ((@IsNull_DNANAME = 1 AND [DNANAME] IS NULL) OR ([DNANAME] = @Original_DNANAME)) AND ((@IsNull_COMMENTS = 1 AND [COMMENTS] IS NULL) OR ([COMMENTS] = @Original_COMMENTS)) AND ((@IsNull_DESCRIPT = 1 AND [DESCRIPT] IS NULL) OR ([DESCRIPT] = @Original_DESCRIPT)) AND ((@IsNull_RESULT = 1 AND [RESULT] IS NULL) OR ([RESULT] = @Original_RESULT)) AND ((@IsNull_URL = 1 AND [URL] IS NULL) OR ([URL] = @Original_URL)) AND ((@IsNull_LOGO = 1 AND [LOGO] IS NULL) OR ([LOGO] = @Original_LOGO)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_KITNUMBER = 1 AND [KITNUMBER] IS NULL) OR ([KITNUMBER] = @Original_KITNUMBER)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_NAMEREC = 1 AND [NAMEREC] IS NULL) OR ([NAMEREC] = @Original_NAMEREC)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_DNA";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_DNA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DNANAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DNANAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMMENTS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENTS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RESULT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RESULT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@URL";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "URL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LOGO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "LOGO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@KITNUMBER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "KITNUMBER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAMEREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMEREC";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_DNA";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_DNA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DNANAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DNANAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DNANAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DNANAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMMENTS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMMENTS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMMENTS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENTS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DESCRIPT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RESULT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RESULT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RESULT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RESULT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_URL";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "URL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_URL";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "URL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LOGO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LOGO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LOGO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "LOGO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_KITNUMBER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "KITNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_KITNUMBER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "KITNUMBER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAMEREC";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAMEREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAMEREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMEREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [DSID], [ID_DNA], [ID_PERSON], [DNANAME], [COMMENTS], [DESCRIPT], [RESULT]" +
                ", [URL], [LOGO], [TT], [KITNUMBER], [TYPE], [NAMEREC] FROM [DNA]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.DNADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.DNADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.DNADataTable dataTable = new tmgDataSet.DNADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.DNADataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DNA");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_DSID, long Original_ID_DNA, global::System.Nullable<long> Original_ID_PERSON, string Original_DNANAME, string Original_COMMENTS, string Original_DESCRIPT, string Original_RESULT, string Original_URL, string Original_LOGO, string Original_TT, string Original_KITNUMBER, string Original_TYPE, global::System.Nullable<long> Original_NAMEREC) {
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_ID_DNA));
            if ((Original_ID_PERSON.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_ID_PERSON.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_DNANAME == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_DNANAME));
            }
            if ((Original_COMMENTS == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_COMMENTS));
            }
            if ((Original_DESCRIPT == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_DESCRIPT));
            }
            if ((Original_RESULT == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_RESULT));
            }
            if ((Original_URL == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_URL));
            }
            if ((Original_LOGO == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_LOGO));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TT));
            }
            if ((Original_KITNUMBER == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_KITNUMBER));
            }
            if ((Original_TYPE == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_TYPE));
            }
            if ((Original_NAMEREC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((long)(Original_NAMEREC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> DSID, long ID_DNA, global::System.Nullable<long> ID_PERSON, string DNANAME, string COMMENTS, string DESCRIPT, string RESULT, string URL, string LOGO, string TT, string KITNUMBER, string TYPE, global::System.Nullable<long> NAMEREC) {
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(ID_DNA));
            if ((ID_PERSON.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(ID_PERSON.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((DNANAME == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DNANAME));
            }
            if ((COMMENTS == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(COMMENTS));
            }
            if ((DESCRIPT == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(DESCRIPT));
            }
            if ((RESULT == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(RESULT));
            }
            if ((URL == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(URL));
            }
            if ((LOGO == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(LOGO));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(TT));
            }
            if ((KITNUMBER == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(KITNUMBER));
            }
            if ((TYPE == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(TYPE));
            }
            if ((NAMEREC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(NAMEREC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> DSID, 
                    long ID_DNA, 
                    global::System.Nullable<long> ID_PERSON, 
                    string DNANAME, 
                    string COMMENTS, 
                    string DESCRIPT, 
                    string RESULT, 
                    string URL, 
                    string LOGO, 
                    string TT, 
                    string KITNUMBER, 
                    string TYPE, 
                    global::System.Nullable<long> NAMEREC, 
                    global::System.Nullable<long> Original_DSID, 
                    long Original_ID_DNA, 
                    global::System.Nullable<long> Original_ID_PERSON, 
                    string Original_DNANAME, 
                    string Original_COMMENTS, 
                    string Original_DESCRIPT, 
                    string Original_RESULT, 
                    string Original_URL, 
                    string Original_LOGO, 
                    string Original_TT, 
                    string Original_KITNUMBER, 
                    string Original_TYPE, 
                    global::System.Nullable<long> Original_NAMEREC) {
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(ID_DNA));
            if ((ID_PERSON.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(ID_PERSON.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((DNANAME == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DNANAME));
            }
            if ((COMMENTS == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(COMMENTS));
            }
            if ((DESCRIPT == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(DESCRIPT));
            }
            if ((RESULT == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(RESULT));
            }
            if ((URL == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(URL));
            }
            if ((LOGO == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(LOGO));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(TT));
            }
            if ((KITNUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(KITNUMBER));
            }
            if ((TYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(TYPE));
            }
            if ((NAMEREC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(NAMEREC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_ID_DNA));
            if ((Original_ID_PERSON.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_ID_PERSON.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_DNANAME == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_DNANAME));
            }
            if ((Original_COMMENTS == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_COMMENTS));
            }
            if ((Original_DESCRIPT == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_DESCRIPT));
            }
            if ((Original_RESULT == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_RESULT));
            }
            if ((Original_URL == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_URL));
            }
            if ((Original_LOGO == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_LOGO));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_TT));
            }
            if ((Original_KITNUMBER == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_KITNUMBER));
            }
            if ((Original_TYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_TYPE));
            }
            if ((Original_NAMEREC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((long)(Original_NAMEREC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<long> ID_PERSON, 
                    string DNANAME, 
                    string COMMENTS, 
                    string DESCRIPT, 
                    string RESULT, 
                    string URL, 
                    string LOGO, 
                    string TT, 
                    string KITNUMBER, 
                    string TYPE, 
                    global::System.Nullable<long> NAMEREC, 
                    global::System.Nullable<long> Original_DSID, 
                    long Original_ID_DNA, 
                    global::System.Nullable<long> Original_ID_PERSON, 
                    string Original_DNANAME, 
                    string Original_COMMENTS, 
                    string Original_DESCRIPT, 
                    string Original_RESULT, 
                    string Original_URL, 
                    string Original_LOGO, 
                    string Original_TT, 
                    string Original_KITNUMBER, 
                    string Original_TYPE, 
                    global::System.Nullable<long> Original_NAMEREC) {
            return this.Update(DSID, Original_ID_DNA, ID_PERSON, DNANAME, COMMENTS, DESCRIPT, RESULT, URL, LOGO, TT, KITNUMBER, TYPE, NAMEREC, Original_DSID, Original_ID_DNA, Original_ID_PERSON, Original_DNANAME, Original_COMMENTS, Original_DESCRIPT, Original_RESULT, Original_URL, Original_LOGO, Original_TT, Original_KITNUMBER, Original_TYPE, Original_NAMEREC);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EventTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EventTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Event";
            tableMapping.ColumnMappings.Add("ETYPE", "ETYPE");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("PER1SHOW", "PER1SHOW");
            tableMapping.ColumnMappings.Add("PER2SHOW", "PER2SHOW");
            tableMapping.ColumnMappings.Add("PER1", "PER1");
            tableMapping.ColumnMappings.Add("PER2", "PER2");
            tableMapping.ColumnMappings.Add("EDATE", "EDATE");
            tableMapping.ColumnMappings.Add("PLACENUM", "PLACENUM");
            tableMapping.ColumnMappings.Add("EFOOT", "EFOOT");
            tableMapping.ColumnMappings.Add("ENSURE", "ENSURE");
            tableMapping.ColumnMappings.Add("ESSURE", "ESSURE");
            tableMapping.ColumnMappings.Add("EDSURE", "EDSURE");
            tableMapping.ColumnMappings.Add("EPSURE", "EPSURE");
            tableMapping.ColumnMappings.Add("EFSURE", "EFSURE");
            tableMapping.ColumnMappings.Add("RECNO", "RECNO");
            tableMapping.ColumnMappings.Add("SENTENCE", "SENTENCE");
            tableMapping.ColumnMappings.Add("SRTDATE", "SRTDATE");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("REF_ID", "REF_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[Event] WHERE (((@IsNull_ETYPE = 1 AND" +
                " [ETYPE] IS NULL) OR ([ETYPE] = @Original_ETYPE)) AND ((@IsNull_DSID = 1 AND [DS" +
                "ID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_PER1SHOW = 1 AND [PER1S" +
                "HOW] IS NULL) OR ([PER1SHOW] = @Original_PER1SHOW)) AND ((@IsNull_PER2SHOW = 1 A" +
                "ND [PER2SHOW] IS NULL) OR ([PER2SHOW] = @Original_PER2SHOW)) AND ((@IsNull_PER1 " +
                "= 1 AND [PER1] IS NULL) OR ([PER1] = @Original_PER1)) AND ((@IsNull_PER2 = 1 AND" +
                " [PER2] IS NULL) OR ([PER2] = @Original_PER2)) AND ((@IsNull_EDATE = 1 AND [EDAT" +
                "E] IS NULL) OR ([EDATE] = @Original_EDATE)) AND ((@IsNull_PLACENUM = 1 AND [PLAC" +
                "ENUM] IS NULL) OR ([PLACENUM] = @Original_PLACENUM)) AND ((@IsNull_EFOOT = 1 AND" +
                " [EFOOT] IS NULL) OR ([EFOOT] = @Original_EFOOT)) AND ((@IsNull_ENSURE = 1 AND [" +
                "ENSURE] IS NULL) OR ([ENSURE] = @Original_ENSURE)) AND ((@IsNull_ESSURE = 1 AND " +
                "[ESSURE] IS NULL) OR ([ESSURE] = @Original_ESSURE)) AND ((@IsNull_EDSURE = 1 AND" +
                " [EDSURE] IS NULL) OR ([EDSURE] = @Original_EDSURE)) AND ((@IsNull_EPSURE = 1 AN" +
                "D [EPSURE] IS NULL) OR ([EPSURE] = @Original_EPSURE)) AND ((@IsNull_EFSURE = 1 A" +
                "ND [EFSURE] IS NULL) OR ([EFSURE] = @Original_EFSURE)) AND ([RECNO] = @Original_" +
                "RECNO) AND ((@IsNull_SENTENCE = 1 AND [SENTENCE] IS NULL) OR ([SENTENCE] = @Orig" +
                "inal_SENTENCE)) AND ((@IsNull_SRTDATE = 1 AND [SRTDATE] IS NULL) OR ([SRTDATE] =" +
                " @Original_SRTDATE)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original" +
                "_TT)) AND ((@IsNull_REF_ID = 1 AND [REF_ID] IS NULL) OR ([REF_ID] = @Original_RE" +
                "F_ID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ETYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ETYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ETYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ETYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PER1SHOW";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PER1SHOW";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER1SHOW";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PER1SHOW";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PER2SHOW";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PER2SHOW";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER2SHOW";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PER2SHOW";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PER1";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PER2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PLACENUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PLACENUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PLACENUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PLACENUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EFOOT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EFOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EFOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "EFOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ENSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ENSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ENSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ENSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ESSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ESSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ESSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ESSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EDSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EDSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EDSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EDSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EPSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EPSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EPSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EPSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EFSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SENTENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRTDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRTDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[Event] ([ETYPE], [DSID], [PER1SHOW], [PER2SHOW], [PER1], [PER2], [EDATE], [PLACENUM], [EFOOT], [ENSURE], [ESSURE], [EDSURE], [EPSURE], [EFSURE], [RECNO], [SENTENCE], [SRTDATE], [TT], [REF_ID]) VALUES (@ETYPE, @DSID, @PER1SHOW, @PER2SHOW, @PER1, @PER2, @EDATE, @PLACENUM, @EFOOT, @ENSURE, @ESSURE, @EDSURE, @EPSURE, @EFSURE, @RECNO, @SENTENCE, @SRTDATE, @TT, @REF_ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ETYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ETYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER1SHOW";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PER1SHOW";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER2SHOW";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PER2SHOW";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PLACENUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PLACENUM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EFOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "EFOOT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ENSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ENSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ESSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ESSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EDSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EDSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EPSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EPSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EFSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SENTENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRTDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRTDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[Event] SET [ETYPE] = @ETYPE, [DSID] = @DSI" +
                "D, [PER1SHOW] = @PER1SHOW, [PER2SHOW] = @PER2SHOW, [PER1] = @PER1, [PER2] = @PER" +
                "2, [EDATE] = @EDATE, [PLACENUM] = @PLACENUM, [EFOOT] = @EFOOT, [ENSURE] = @ENSUR" +
                "E, [ESSURE] = @ESSURE, [EDSURE] = @EDSURE, [EPSURE] = @EPSURE, [EFSURE] = @EFSUR" +
                "E, [RECNO] = @RECNO, [SENTENCE] = @SENTENCE, [SRTDATE] = @SRTDATE, [TT] = @TT, [" +
                "REF_ID] = @REF_ID WHERE (((@IsNull_ETYPE = 1 AND [ETYPE] IS NULL) OR ([ETYPE] = " +
                "@Original_ETYPE)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Origi" +
                "nal_DSID)) AND ((@IsNull_PER1SHOW = 1 AND [PER1SHOW] IS NULL) OR ([PER1SHOW] = @" +
                "Original_PER1SHOW)) AND ((@IsNull_PER2SHOW = 1 AND [PER2SHOW] IS NULL) OR ([PER2" +
                "SHOW] = @Original_PER2SHOW)) AND ((@IsNull_PER1 = 1 AND [PER1] IS NULL) OR ([PER" +
                "1] = @Original_PER1)) AND ((@IsNull_PER2 = 1 AND [PER2] IS NULL) OR ([PER2] = @O" +
                "riginal_PER2)) AND ((@IsNull_EDATE = 1 AND [EDATE] IS NULL) OR ([EDATE] = @Origi" +
                "nal_EDATE)) AND ((@IsNull_PLACENUM = 1 AND [PLACENUM] IS NULL) OR ([PLACENUM] = " +
                "@Original_PLACENUM)) AND ((@IsNull_EFOOT = 1 AND [EFOOT] IS NULL) OR ([EFOOT] = " +
                "@Original_EFOOT)) AND ((@IsNull_ENSURE = 1 AND [ENSURE] IS NULL) OR ([ENSURE] = " +
                "@Original_ENSURE)) AND ((@IsNull_ESSURE = 1 AND [ESSURE] IS NULL) OR ([ESSURE] =" +
                " @Original_ESSURE)) AND ((@IsNull_EDSURE = 1 AND [EDSURE] IS NULL) OR ([EDSURE] " +
                "= @Original_EDSURE)) AND ((@IsNull_EPSURE = 1 AND [EPSURE] IS NULL) OR ([EPSURE]" +
                " = @Original_EPSURE)) AND ((@IsNull_EFSURE = 1 AND [EFSURE] IS NULL) OR ([EFSURE" +
                "] = @Original_EFSURE)) AND ([RECNO] = @Original_RECNO) AND ((@IsNull_SENTENCE = " +
                "1 AND [SENTENCE] IS NULL) OR ([SENTENCE] = @Original_SENTENCE)) AND ((@IsNull_SR" +
                "TDATE = 1 AND [SRTDATE] IS NULL) OR ([SRTDATE] = @Original_SRTDATE)) AND ((@IsNu" +
                "ll_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_REF_ID = 1 A" +
                "ND [REF_ID] IS NULL) OR ([REF_ID] = @Original_REF_ID)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ETYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ETYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER1SHOW";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PER1SHOW";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER2SHOW";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PER2SHOW";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PLACENUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PLACENUM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EFOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "EFOOT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ENSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ENSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ESSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ESSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EDSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EDSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EPSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EPSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EFSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SENTENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRTDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRTDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ETYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ETYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ETYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ETYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PER1SHOW";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PER1SHOW";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER1SHOW";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PER1SHOW";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PER2SHOW";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PER2SHOW";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER2SHOW";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PER2SHOW";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PER1";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PER2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PLACENUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PLACENUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PLACENUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PLACENUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EFOOT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EFOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EFOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "EFOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ENSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ENSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ENSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ENSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ESSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ESSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ESSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ESSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EDSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EDSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EDSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EDSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EPSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EPSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EPSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EPSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EFSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "EFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SENTENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRTDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRTDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ETYPE], [DSID], [PER1SHOW], [PER2SHOW], [PER1], [PER2], [EDATE], [PLACENU" +
                "M], [EFOOT], [ENSURE], [ESSURE], [EDSURE], [EPSURE], [EFSURE], [RECNO], [SENTENC" +
                "E], [SRTDATE], [TT], [REF_ID] FROM [Event]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.EventDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.EventDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.EventDataTable dataTable = new tmgDataSet.EventDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.EventDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Event");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    global::System.Nullable<long> Original_ETYPE, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<bool> Original_PER1SHOW, 
                    global::System.Nullable<bool> Original_PER2SHOW, 
                    global::System.Nullable<long> Original_PER1, 
                    global::System.Nullable<long> Original_PER2, 
                    string Original_EDATE, 
                    global::System.Nullable<long> Original_PLACENUM, 
                    string Original_EFOOT, 
                    string Original_ENSURE, 
                    string Original_ESSURE, 
                    string Original_EDSURE, 
                    string Original_EPSURE, 
                    string Original_EFSURE, 
                    long Original_RECNO, 
                    string Original_SENTENCE, 
                    string Original_SRTDATE, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_REF_ID) {
            if ((Original_ETYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_ETYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_PER1SHOW.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_PER1SHOW.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_PER2SHOW.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_PER2SHOW.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_PER1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((long)(Original_PER1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_PER2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((long)(Original_PER2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_EDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_EDATE));
            }
            if ((Original_PLACENUM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((long)(Original_PLACENUM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_EFOOT == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_EFOOT));
            }
            if ((Original_ENSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_ENSURE));
            }
            if ((Original_ESSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_ESSURE));
            }
            if ((Original_EDSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_EDSURE));
            }
            if ((Original_EPSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_EPSURE));
            }
            if ((Original_EFSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((string)(Original_EFSURE));
            }
            this.Adapter.DeleteCommand.Parameters[28].Value = ((long)(Original_RECNO));
            if ((Original_SENTENCE == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_SENTENCE));
            }
            if ((Original_SRTDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_SRTDATE));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_TT));
            }
            if ((Original_REF_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((long)(Original_REF_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<long> ETYPE, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<bool> PER1SHOW, 
                    global::System.Nullable<bool> PER2SHOW, 
                    global::System.Nullable<long> PER1, 
                    global::System.Nullable<long> PER2, 
                    string EDATE, 
                    global::System.Nullable<long> PLACENUM, 
                    string EFOOT, 
                    string ENSURE, 
                    string ESSURE, 
                    string EDSURE, 
                    string EPSURE, 
                    string EFSURE, 
                    long RECNO, 
                    string SENTENCE, 
                    string SRTDATE, 
                    string TT, 
                    global::System.Nullable<long> REF_ID) {
            if ((ETYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(ETYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PER1SHOW.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(PER1SHOW.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PER2SHOW.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(PER2SHOW.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PER1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(PER1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((PER2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(PER2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((EDATE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(EDATE));
            }
            if ((PLACENUM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(PLACENUM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((EFOOT == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(EFOOT));
            }
            if ((ENSURE == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ENSURE));
            }
            if ((ESSURE == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ESSURE));
            }
            if ((EDSURE == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(EDSURE));
            }
            if ((EPSURE == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(EPSURE));
            }
            if ((EFSURE == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(EFSURE));
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((long)(RECNO));
            if ((SENTENCE == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(SENTENCE));
            }
            if ((SRTDATE == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(SRTDATE));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(TT));
            }
            if ((REF_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((long)(REF_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> ETYPE, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<bool> PER1SHOW, 
                    global::System.Nullable<bool> PER2SHOW, 
                    global::System.Nullable<long> PER1, 
                    global::System.Nullable<long> PER2, 
                    string EDATE, 
                    global::System.Nullable<long> PLACENUM, 
                    string EFOOT, 
                    string ENSURE, 
                    string ESSURE, 
                    string EDSURE, 
                    string EPSURE, 
                    string EFSURE, 
                    long RECNO, 
                    string SENTENCE, 
                    string SRTDATE, 
                    string TT, 
                    global::System.Nullable<long> REF_ID, 
                    global::System.Nullable<long> Original_ETYPE, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<bool> Original_PER1SHOW, 
                    global::System.Nullable<bool> Original_PER2SHOW, 
                    global::System.Nullable<long> Original_PER1, 
                    global::System.Nullable<long> Original_PER2, 
                    string Original_EDATE, 
                    global::System.Nullable<long> Original_PLACENUM, 
                    string Original_EFOOT, 
                    string Original_ENSURE, 
                    string Original_ESSURE, 
                    string Original_EDSURE, 
                    string Original_EPSURE, 
                    string Original_EFSURE, 
                    long Original_RECNO, 
                    string Original_SENTENCE, 
                    string Original_SRTDATE, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_REF_ID) {
            if ((ETYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(ETYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PER1SHOW.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(PER1SHOW.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PER2SHOW.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(PER2SHOW.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PER1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(PER1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((PER2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(PER2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((EDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(EDATE));
            }
            if ((PLACENUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(PLACENUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((EFOOT == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(EFOOT));
            }
            if ((ENSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ENSURE));
            }
            if ((ESSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ESSURE));
            }
            if ((EDSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(EDSURE));
            }
            if ((EPSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(EPSURE));
            }
            if ((EFSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(EFSURE));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(RECNO));
            if ((SENTENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(SENTENCE));
            }
            if ((SRTDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(SRTDATE));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(TT));
            }
            if ((REF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(REF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_ETYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((long)(Original_ETYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_PER1SHOW.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_PER1SHOW.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_PER2SHOW.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(Original_PER2SHOW.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_PER1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(Original_PER1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_PER2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((long)(Original_PER2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_EDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_EDATE));
            }
            if ((Original_PLACENUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((long)(Original_PLACENUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_EFOOT == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_EFOOT));
            }
            if ((Original_ENSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_ENSURE));
            }
            if ((Original_ESSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_ESSURE));
            }
            if ((Original_EDSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_EDSURE));
            }
            if ((Original_EPSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_EPSURE));
            }
            if ((Original_EFSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_EFSURE));
            }
            this.Adapter.UpdateCommand.Parameters[47].Value = ((long)(Original_RECNO));
            if ((Original_SENTENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_SENTENCE));
            }
            if ((Original_SRTDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_SRTDATE));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_TT));
            }
            if ((Original_REF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((long)(Original_REF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> ETYPE, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<bool> PER1SHOW, 
                    global::System.Nullable<bool> PER2SHOW, 
                    global::System.Nullable<long> PER1, 
                    global::System.Nullable<long> PER2, 
                    string EDATE, 
                    global::System.Nullable<long> PLACENUM, 
                    string EFOOT, 
                    string ENSURE, 
                    string ESSURE, 
                    string EDSURE, 
                    string EPSURE, 
                    string EFSURE, 
                    string SENTENCE, 
                    string SRTDATE, 
                    string TT, 
                    global::System.Nullable<long> REF_ID, 
                    global::System.Nullable<long> Original_ETYPE, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<bool> Original_PER1SHOW, 
                    global::System.Nullable<bool> Original_PER2SHOW, 
                    global::System.Nullable<long> Original_PER1, 
                    global::System.Nullable<long> Original_PER2, 
                    string Original_EDATE, 
                    global::System.Nullable<long> Original_PLACENUM, 
                    string Original_EFOOT, 
                    string Original_ENSURE, 
                    string Original_ESSURE, 
                    string Original_EDSURE, 
                    string Original_EPSURE, 
                    string Original_EFSURE, 
                    long Original_RECNO, 
                    string Original_SENTENCE, 
                    string Original_SRTDATE, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_REF_ID) {
            return this.Update(ETYPE, DSID, PER1SHOW, PER2SHOW, PER1, PER2, EDATE, PLACENUM, EFOOT, ENSURE, ESSURE, EDSURE, EPSURE, EFSURE, Original_RECNO, SENTENCE, SRTDATE, TT, REF_ID, Original_ETYPE, Original_DSID, Original_PER1SHOW, Original_PER2SHOW, Original_PER1, Original_PER2, Original_EDATE, Original_PLACENUM, Original_EFOOT, Original_ENSURE, Original_ESSURE, Original_EDSURE, Original_EPSURE, Original_EFSURE, Original_RECNO, Original_SENTENCE, Original_SRTDATE, Original_TT, Original_REF_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EventWitnessTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EventWitnessTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EventWitness";
            tableMapping.ColumnMappings.Add("EPER", "EPER");
            tableMapping.ColumnMappings.Add("GNUM", "GNUM");
            tableMapping.ColumnMappings.Add("PRIMARY", "PRIMARY");
            tableMapping.ColumnMappings.Add("WSENTENCE", "WSENTENCE");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("ROLE", "ROLE");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("NAMEREC", "NAMEREC");
            tableMapping.ColumnMappings.Add("WITMEMO", "WITMEMO");
            tableMapping.ColumnMappings.Add("SEQUENCE", "SEQUENCE");
            tableMapping.ColumnMappings.Add("EventWitness_ID", "EventWitness_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[EventWitness] WHERE (((@IsNull_EPER = 1 AND [EPER] IS NULL) OR ([EPER] = @Original_EPER)) AND ((@IsNull_GNUM = 1 AND [GNUM] IS NULL) OR ([GNUM] = @Original_GNUM)) AND ((@IsNull_PRIMARY = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @Original_PRIMARY)) AND ((@IsNull_WSENTENCE = 1 AND [WSENTENCE] IS NULL) OR ([WSENTENCE] = @Original_WSENTENCE)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_ROLE = 1 AND [ROLE] IS NULL) OR ([ROLE] = @Original_ROLE)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_NAMEREC = 1 AND [NAMEREC] IS NULL) OR ([NAMEREC] = @Original_NAMEREC)) AND ((@IsNull_WITMEMO = 1 AND [WITMEMO] IS NULL) OR ([WITMEMO] = @Original_WITMEMO)) AND ((@IsNull_SEQUENCE = 1 AND [SEQUENCE] IS NULL) OR ([SEQUENCE] = @Original_SEQUENCE)) AND ([EventWitness_ID] = @Original_EventWitness_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EPER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EPER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EPER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EPER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WSENTENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WSENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WSENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "WSENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ROLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ROLE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAMEREC";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAMEREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAMEREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMEREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WITMEMO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WITMEMO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WITMEMO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "WITMEMO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EventWitness_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EventWitness_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[EventWitness] ([EPER], [GNUM], [PRIMA" +
                "RY], [WSENTENCE], [TT], [ROLE], [DSID], [NAMEREC], [WITMEMO], [SEQUENCE]) VALUES" +
                " (@EPER, @GNUM, @PRIMARY, @WSENTENCE, @TT, @ROLE, @DSID, @NAMEREC, @WITMEMO, @SE" +
                "QUENCE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EPER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EPER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GNUM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WSENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "WSENTENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ROLE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ROLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAMEREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMEREC";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WITMEMO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "WITMEMO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[EventWitness] SET [EPER] = @EPER, [GNUM] = @GNUM, [PRIMARY] = @PRIMARY, [WSENTENCE] = @WSENTENCE, [TT] = @TT, [ROLE] = @ROLE, [DSID] = @DSID, [NAMEREC] = @NAMEREC, [WITMEMO] = @WITMEMO, [SEQUENCE] = @SEQUENCE WHERE (((@IsNull_EPER = 1 AND [EPER] IS NULL) OR ([EPER] = @Original_EPER)) AND ((@IsNull_GNUM = 1 AND [GNUM] IS NULL) OR ([GNUM] = @Original_GNUM)) AND ((@IsNull_PRIMARY = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @Original_PRIMARY)) AND ((@IsNull_WSENTENCE = 1 AND [WSENTENCE] IS NULL) OR ([WSENTENCE] = @Original_WSENTENCE)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_ROLE = 1 AND [ROLE] IS NULL) OR ([ROLE] = @Original_ROLE)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_NAMEREC = 1 AND [NAMEREC] IS NULL) OR ([NAMEREC] = @Original_NAMEREC)) AND ((@IsNull_WITMEMO = 1 AND [WITMEMO] IS NULL) OR ([WITMEMO] = @Original_WITMEMO)) AND ((@IsNull_SEQUENCE = 1 AND [SEQUENCE] IS NULL) OR ([SEQUENCE] = @Original_SEQUENCE)) AND ([EventWitness_ID] = @Original_EventWitness_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EPER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EPER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GNUM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WSENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "WSENTENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ROLE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ROLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAMEREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMEREC";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WITMEMO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "WITMEMO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EPER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EPER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EPER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EPER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WSENTENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WSENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WSENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "WSENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ROLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ROLE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAMEREC";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAMEREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAMEREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NAMEREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WITMEMO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WITMEMO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WITMEMO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "WITMEMO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EventWitness_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EventWitness_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [EPER], [GNUM], [PRIMARY], [WSENTENCE], [TT], [ROLE], [DSID], [NAMEREC], [" +
                "WITMEMO], [SEQUENCE], [EventWitness_ID] FROM [EventWitness]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.EventWitnessDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.EventWitnessDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.EventWitnessDataTable dataTable = new tmgDataSet.EventWitnessDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.EventWitnessDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EventWitness");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_EPER, global::System.Nullable<long> Original_GNUM, global::System.Nullable<bool> Original_PRIMARY, string Original_WSENTENCE, string Original_TT, string Original_ROLE, global::System.Nullable<long> Original_DSID, global::System.Nullable<long> Original_NAMEREC, string Original_WITMEMO, global::System.Nullable<long> Original_SEQUENCE, long Original_EventWitness_ID) {
            if ((Original_EPER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_EPER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_GNUM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_GNUM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_WSENTENCE == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_WSENTENCE));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_TT));
            }
            if ((Original_ROLE == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_ROLE));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_NAMEREC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((long)(Original_NAMEREC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_WITMEMO == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_WITMEMO));
            }
            if ((Original_SEQUENCE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((long)(Original_SEQUENCE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[20].Value = ((long)(Original_EventWitness_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> EPER, global::System.Nullable<long> GNUM, global::System.Nullable<bool> PRIMARY, string WSENTENCE, string TT, string ROLE, global::System.Nullable<long> DSID, global::System.Nullable<long> NAMEREC, string WITMEMO, global::System.Nullable<long> SEQUENCE) {
            if ((EPER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(EPER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((GNUM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(GNUM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((WSENTENCE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(WSENTENCE));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TT));
            }
            if ((ROLE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ROLE));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((NAMEREC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(NAMEREC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((WITMEMO == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(WITMEMO));
            }
            if ((SEQUENCE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((long)(SEQUENCE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> EPER, 
                    global::System.Nullable<long> GNUM, 
                    global::System.Nullable<bool> PRIMARY, 
                    string WSENTENCE, 
                    string TT, 
                    string ROLE, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<long> NAMEREC, 
                    string WITMEMO, 
                    global::System.Nullable<long> SEQUENCE, 
                    global::System.Nullable<long> Original_EPER, 
                    global::System.Nullable<long> Original_GNUM, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    string Original_WSENTENCE, 
                    string Original_TT, 
                    string Original_ROLE, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<long> Original_NAMEREC, 
                    string Original_WITMEMO, 
                    global::System.Nullable<long> Original_SEQUENCE, 
                    long Original_EventWitness_ID) {
            if ((EPER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(EPER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((GNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(GNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((WSENTENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(WSENTENCE));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TT));
            }
            if ((ROLE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ROLE));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((NAMEREC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(NAMEREC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((WITMEMO == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(WITMEMO));
            }
            if ((SEQUENCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(SEQUENCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_EPER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_EPER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_GNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_GNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_WSENTENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_WSENTENCE));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_TT));
            }
            if ((Original_ROLE == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_ROLE));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_NAMEREC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((long)(Original_NAMEREC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_WITMEMO == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_WITMEMO));
            }
            if ((Original_SEQUENCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((long)(Original_SEQUENCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[30].Value = ((long)(Original_EventWitness_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExhibitTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ExhibitTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Exhibit";
            tableMapping.ColumnMappings.Add("IDEXHIBIT", "IDEXHIBIT");
            tableMapping.ColumnMappings.Add("IDREF", "IDREF");
            tableMapping.ColumnMappings.Add("RLTYPE", "RLTYPE");
            tableMapping.ColumnMappings.Add("RLNUM", "RLNUM");
            tableMapping.ColumnMappings.Add("XNAME", "XNAME");
            tableMapping.ColumnMappings.Add("VFILENAME", "VFILENAME");
            tableMapping.ColumnMappings.Add("IFILENAME", "IFILENAME");
            tableMapping.ColumnMappings.Add("AFILENAME", "AFILENAME");
            tableMapping.ColumnMappings.Add("TFILENAME", "TFILENAME");
            tableMapping.ColumnMappings.Add("REFERENCE", "REFERENCE");
            tableMapping.ColumnMappings.Add("TEXT", "TEXT");
            tableMapping.ColumnMappings.Add("IMAGE", "IMAGE");
            tableMapping.ColumnMappings.Add("AUDIO", "AUDIO");
            tableMapping.ColumnMappings.Add("DESCRIPT", "DESCRIPT");
            tableMapping.ColumnMappings.Add("RLPER1", "RLPER1");
            tableMapping.ColumnMappings.Add("RLPER2", "RLPER2");
            tableMapping.ColumnMappings.Add("RLGTYPE", "RLGTYPE");
            tableMapping.ColumnMappings.Add("OLE_OBJECT", "OLE_OBJECT");
            tableMapping.ColumnMappings.Add("PRIMARY", "PRIMARY");
            tableMapping.ColumnMappings.Add("VIDEO", "VIDEO");
            tableMapping.ColumnMappings.Add("PROPERTY", "PROPERTY");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("ID_PERSON", "ID_PERSON");
            tableMapping.ColumnMappings.Add("ID_EVENT", "ID_EVENT");
            tableMapping.ColumnMappings.Add("ID_SOURCE", "ID_SOURCE");
            tableMapping.ColumnMappings.Add("ID_REPOS", "ID_REPOS");
            tableMapping.ColumnMappings.Add("THUMB", "THUMB");
            tableMapping.ColumnMappings.Add("ID_CIT", "ID_CIT");
            tableMapping.ColumnMappings.Add("ID_PLACE", "ID_PLACE");
            tableMapping.ColumnMappings.Add("CAPTION", "CAPTION");
            tableMapping.ColumnMappings.Add("SORTEXH", "SORTEXH");
            tableMapping.ColumnMappings.Add("IMAGEFORE", "IMAGEFORE");
            tableMapping.ColumnMappings.Add("IMAGEBACK", "IMAGEBACK");
            tableMapping.ColumnMappings.Add("TRANSPAR", "TRANSPAR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[Exhibit] WHERE (([IDEXHIBIT] = @Origi" +
                "nal_IDEXHIBIT) AND ((@IsNull_IDREF = 1 AND [IDREF] IS NULL) OR ([IDREF] = @Origi" +
                "nal_IDREF)) AND ((@IsNull_RLTYPE = 1 AND [RLTYPE] IS NULL) OR ([RLTYPE] = @Origi" +
                "nal_RLTYPE)) AND ((@IsNull_RLNUM = 1 AND [RLNUM] IS NULL) OR ([RLNUM] = @Origina" +
                "l_RLNUM)) AND ((@IsNull_XNAME = 1 AND [XNAME] IS NULL) OR ([XNAME] = @Original_X" +
                "NAME)) AND ((@IsNull_VFILENAME = 1 AND [VFILENAME] IS NULL) OR ([VFILENAME] = @O" +
                "riginal_VFILENAME)) AND ((@IsNull_IFILENAME = 1 AND [IFILENAME] IS NULL) OR ([IF" +
                "ILENAME] = @Original_IFILENAME)) AND ((@IsNull_AFILENAME = 1 AND [AFILENAME] IS " +
                "NULL) OR ([AFILENAME] = @Original_AFILENAME)) AND ((@IsNull_TFILENAME = 1 AND [T" +
                "FILENAME] IS NULL) OR ([TFILENAME] = @Original_TFILENAME)) AND ((@IsNull_REFEREN" +
                "CE = 1 AND [REFERENCE] IS NULL) OR ([REFERENCE] = @Original_REFERENCE)) AND ((@I" +
                "sNull_TEXT = 1 AND [TEXT] IS NULL) OR ([TEXT] = @Original_TEXT)) AND ((@IsNull_I" +
                "MAGE = 1 AND [IMAGE] IS NULL) OR ([IMAGE] = @Original_IMAGE)) AND ((@IsNull_AUDI" +
                "O = 1 AND [AUDIO] IS NULL) OR ([AUDIO] = @Original_AUDIO)) AND ((@IsNull_DESCRIP" +
                "T = 1 AND [DESCRIPT] IS NULL) OR ([DESCRIPT] = @Original_DESCRIPT)) AND ((@IsNul" +
                "l_RLPER1 = 1 AND [RLPER1] IS NULL) OR ([RLPER1] = @Original_RLPER1)) AND ((@IsNu" +
                "ll_RLPER2 = 1 AND [RLPER2] IS NULL) OR ([RLPER2] = @Original_RLPER2)) AND ((@IsN" +
                "ull_RLGTYPE = 1 AND [RLGTYPE] IS NULL) OR ([RLGTYPE] = @Original_RLGTYPE)) AND (" +
                "(@IsNull_OLE_OBJECT = 1 AND [OLE_OBJECT] IS NULL) OR ([OLE_OBJECT] = @Original_O" +
                "LE_OBJECT)) AND ((@IsNull_PRIMARY = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @Or" +
                "iginal_PRIMARY)) AND ((@IsNull_VIDEO = 1 AND [VIDEO] IS NULL) OR ([VIDEO] = @Ori" +
                "ginal_VIDEO)) AND ((@IsNull_PROPERTY = 1 AND [PROPERTY] IS NULL) OR ([PROPERTY] " +
                "= @Original_PROPERTY)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @" +
                "Original_DSID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT))" +
                " AND ((@IsNull_ID_PERSON = 1 AND [ID_PERSON] IS NULL) OR ([ID_PERSON] = @Origina" +
                "l_ID_PERSON)) AND ((@IsNull_ID_EVENT = 1 AND [ID_EVENT] IS NULL) OR ([ID_EVENT] " +
                "= @Original_ID_EVENT)) AND ((@IsNull_ID_SOURCE = 1 AND [ID_SOURCE] IS NULL) OR (" +
                "[ID_SOURCE] = @Original_ID_SOURCE)) AND ((@IsNull_ID_REPOS = 1 AND [ID_REPOS] IS" +
                " NULL) OR ([ID_REPOS] = @Original_ID_REPOS)) AND ((@IsNull_THUMB = 1 AND [THUMB]" +
                " IS NULL) OR ([THUMB] = @Original_THUMB)) AND ((@IsNull_ID_CIT = 1 AND [ID_CIT] " +
                "IS NULL) OR ([ID_CIT] = @Original_ID_CIT)) AND ((@IsNull_ID_PLACE = 1 AND [ID_PL" +
                "ACE] IS NULL) OR ([ID_PLACE] = @Original_ID_PLACE)) AND ((@IsNull_CAPTION = 1 AN" +
                "D [CAPTION] IS NULL) OR ([CAPTION] = @Original_CAPTION)) AND ((@IsNull_SORTEXH =" +
                " 1 AND [SORTEXH] IS NULL) OR ([SORTEXH] = @Original_SORTEXH)) AND ((@IsNull_IMAG" +
                "EFORE = 1 AND [IMAGEFORE] IS NULL) OR ([IMAGEFORE] = @Original_IMAGEFORE)) AND (" +
                "(@IsNull_IMAGEBACK = 1 AND [IMAGEBACK] IS NULL) OR ([IMAGEBACK] = @Original_IMAG" +
                "EBACK)) AND ((@IsNull_TRANSPAR = 1 AND [TRANSPAR] IS NULL) OR ([TRANSPAR] = @Ori" +
                "ginal_TRANSPAR)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IDEXHIBIT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDEXHIBIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IDREF";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IDREF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IDREF";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDREF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLTYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_XNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "XNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_XNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "XNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VFILENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IFILENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "IFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_AFILENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "AFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "AFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TFILENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFERENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TEXT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TEXT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IMAGE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IMAGE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IMAGE";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_AUDIO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "AUDIO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AUDIO";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "AUDIO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DESCRIPT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLPER1";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLPER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLPER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLPER2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLPER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLPER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLGTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLGTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLGTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLGTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_OLE_OBJECT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "OLE_OBJECT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_OLE_OBJECT";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "OLE_OBJECT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VIDEO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VIDEO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VIDEO";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "VIDEO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROPERTY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_EVENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_EVENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_EVENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_EVENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_SOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_SOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_REPOS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_REPOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_REPOS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_REPOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_THUMB";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "THUMB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_THUMB";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "THUMB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_CIT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_CIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_CIT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_CIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_PLACE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_PLACE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_PLACE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PLACE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CAPTION";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CAPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CAPTION";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CAPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SORTEXH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SORTEXH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SORTEXH";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SORTEXH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IMAGEFORE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IMAGEFORE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IMAGEFORE";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGEFORE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IMAGEBACK";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IMAGEBACK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IMAGEBACK";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGEBACK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSPAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSPAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSPAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSPAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[Exhibit] ([IDEXHIBIT], [IDREF], [RLTYPE], [RLNUM], [XNAME], [VFILENAME], [IFILENAME], [AFILENAME], [TFILENAME], [REFERENCE], [TEXT], [IMAGE], [AUDIO], [DESCRIPT], [RLPER1], [RLPER2], [RLGTYPE], [OLE_OBJECT], [PRIMARY], [VIDEO], [PROPERTY], [DSID], [TT], [ID_PERSON], [ID_EVENT], [ID_SOURCE], [ID_REPOS], [THUMB], [ID_CIT], [ID_PLACE], [CAPTION], [SORTEXH], [IMAGEFORE], [IMAGEBACK], [TRANSPAR]) VALUES (@IDEXHIBIT, @IDREF, @RLTYPE, @RLNUM, @XNAME, @VFILENAME, @IFILENAME, @AFILENAME, @TFILENAME, @REFERENCE, @TEXT, @IMAGE, @AUDIO, @DESCRIPT, @RLPER1, @RLPER2, @RLGTYPE, @OLE_OBJECT, @PRIMARY, @VIDEO, @PROPERTY, @DSID, @TT, @ID_PERSON, @ID_EVENT, @ID_SOURCE, @ID_REPOS, @THUMB, @ID_CIT, @ID_PLACE, @CAPTION, @SORTEXH, @IMAGEFORE, @IMAGEBACK, @TRANSPAR)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IDEXHIBIT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDEXHIBIT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IDREF";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDREF";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLTYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLNUM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@XNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "XNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VFILENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "IFILENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "AFILENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TFILENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFERENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TEXT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TEXT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IMAGE";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AUDIO";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "AUDIO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLPER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLPER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLGTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLGTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@OLE_OBJECT";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "OLE_OBJECT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VIDEO";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "VIDEO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_EVENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_EVENT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_SOURCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_REPOS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_REPOS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@THUMB";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "THUMB";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_CIT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_CIT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_PLACE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PLACE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CAPTION";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CAPTION";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SORTEXH";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SORTEXH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IMAGEFORE";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGEFORE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IMAGEBACK";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGEBACK";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSPAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSPAR";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[Exhibit] SET [IDEXHIBIT] = @IDEXHIBIT, [ID" +
                "REF] = @IDREF, [RLTYPE] = @RLTYPE, [RLNUM] = @RLNUM, [XNAME] = @XNAME, [VFILENAM" +
                "E] = @VFILENAME, [IFILENAME] = @IFILENAME, [AFILENAME] = @AFILENAME, [TFILENAME]" +
                " = @TFILENAME, [REFERENCE] = @REFERENCE, [TEXT] = @TEXT, [IMAGE] = @IMAGE, [AUDI" +
                "O] = @AUDIO, [DESCRIPT] = @DESCRIPT, [RLPER1] = @RLPER1, [RLPER2] = @RLPER2, [RL" +
                "GTYPE] = @RLGTYPE, [OLE_OBJECT] = @OLE_OBJECT, [PRIMARY] = @PRIMARY, [VIDEO] = @" +
                "VIDEO, [PROPERTY] = @PROPERTY, [DSID] = @DSID, [TT] = @TT, [ID_PERSON] = @ID_PER" +
                "SON, [ID_EVENT] = @ID_EVENT, [ID_SOURCE] = @ID_SOURCE, [ID_REPOS] = @ID_REPOS, [" +
                "THUMB] = @THUMB, [ID_CIT] = @ID_CIT, [ID_PLACE] = @ID_PLACE, [CAPTION] = @CAPTIO" +
                "N, [SORTEXH] = @SORTEXH, [IMAGEFORE] = @IMAGEFORE, [IMAGEBACK] = @IMAGEBACK, [TR" +
                "ANSPAR] = @TRANSPAR WHERE (([IDEXHIBIT] = @Original_IDEXHIBIT) AND ((@IsNull_IDR" +
                "EF = 1 AND [IDREF] IS NULL) OR ([IDREF] = @Original_IDREF)) AND ((@IsNull_RLTYPE" +
                " = 1 AND [RLTYPE] IS NULL) OR ([RLTYPE] = @Original_RLTYPE)) AND ((@IsNull_RLNUM" +
                " = 1 AND [RLNUM] IS NULL) OR ([RLNUM] = @Original_RLNUM)) AND ((@IsNull_XNAME = " +
                "1 AND [XNAME] IS NULL) OR ([XNAME] = @Original_XNAME)) AND ((@IsNull_VFILENAME =" +
                " 1 AND [VFILENAME] IS NULL) OR ([VFILENAME] = @Original_VFILENAME)) AND ((@IsNul" +
                "l_IFILENAME = 1 AND [IFILENAME] IS NULL) OR ([IFILENAME] = @Original_IFILENAME))" +
                " AND ((@IsNull_AFILENAME = 1 AND [AFILENAME] IS NULL) OR ([AFILENAME] = @Origina" +
                "l_AFILENAME)) AND ((@IsNull_TFILENAME = 1 AND [TFILENAME] IS NULL) OR ([TFILENAM" +
                "E] = @Original_TFILENAME)) AND ((@IsNull_REFERENCE = 1 AND [REFERENCE] IS NULL) " +
                "OR ([REFERENCE] = @Original_REFERENCE)) AND ((@IsNull_TEXT = 1 AND [TEXT] IS NUL" +
                "L) OR ([TEXT] = @Original_TEXT)) AND ((@IsNull_IMAGE = 1 AND [IMAGE] IS NULL) OR" +
                " ([IMAGE] = @Original_IMAGE)) AND ((@IsNull_AUDIO = 1 AND [AUDIO] IS NULL) OR ([" +
                "AUDIO] = @Original_AUDIO)) AND ((@IsNull_DESCRIPT = 1 AND [DESCRIPT] IS NULL) OR" +
                " ([DESCRIPT] = @Original_DESCRIPT)) AND ((@IsNull_RLPER1 = 1 AND [RLPER1] IS NUL" +
                "L) OR ([RLPER1] = @Original_RLPER1)) AND ((@IsNull_RLPER2 = 1 AND [RLPER2] IS NU" +
                "LL) OR ([RLPER2] = @Original_RLPER2)) AND ((@IsNull_RLGTYPE = 1 AND [RLGTYPE] IS" +
                " NULL) OR ([RLGTYPE] = @Original_RLGTYPE)) AND ((@IsNull_OLE_OBJECT = 1 AND [OLE" +
                "_OBJECT] IS NULL) OR ([OLE_OBJECT] = @Original_OLE_OBJECT)) AND ((@IsNull_PRIMAR" +
                "Y = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @Original_PRIMARY)) AND ((@IsNull_V" +
                "IDEO = 1 AND [VIDEO] IS NULL) OR ([VIDEO] = @Original_VIDEO)) AND ((@IsNull_PROP" +
                "ERTY = 1 AND [PROPERTY] IS NULL) OR ([PROPERTY] = @Original_PROPERTY)) AND ((@Is" +
                "Null_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_TT" +
                " = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_ID_PERSON = 1 AND" +
                " [ID_PERSON] IS NULL) OR ([ID_PERSON] = @Original_ID_PERSON)) AND ((@IsNull_ID_E" +
                "VENT = 1 AND [ID_EVENT] IS NULL) OR ([ID_EVENT] = @Original_ID_EVENT)) AND ((@Is" +
                "Null_ID_SOURCE = 1 AND [ID_SOURCE] IS NULL) OR ([ID_SOURCE] = @Original_ID_SOURC" +
                "E)) AND ((@IsNull_ID_REPOS = 1 AND [ID_REPOS] IS NULL) OR ([ID_REPOS] = @Origina" +
                "l_ID_REPOS)) AND ((@IsNull_THUMB = 1 AND [THUMB] IS NULL) OR ([THUMB] = @Origina" +
                "l_THUMB)) AND ((@IsNull_ID_CIT = 1 AND [ID_CIT] IS NULL) OR ([ID_CIT] = @Origina" +
                "l_ID_CIT)) AND ((@IsNull_ID_PLACE = 1 AND [ID_PLACE] IS NULL) OR ([ID_PLACE] = @" +
                "Original_ID_PLACE)) AND ((@IsNull_CAPTION = 1 AND [CAPTION] IS NULL) OR ([CAPTIO" +
                "N] = @Original_CAPTION)) AND ((@IsNull_SORTEXH = 1 AND [SORTEXH] IS NULL) OR ([S" +
                "ORTEXH] = @Original_SORTEXH)) AND ((@IsNull_IMAGEFORE = 1 AND [IMAGEFORE] IS NUL" +
                "L) OR ([IMAGEFORE] = @Original_IMAGEFORE)) AND ((@IsNull_IMAGEBACK = 1 AND [IMAG" +
                "EBACK] IS NULL) OR ([IMAGEBACK] = @Original_IMAGEBACK)) AND ((@IsNull_TRANSPAR =" +
                " 1 AND [TRANSPAR] IS NULL) OR ([TRANSPAR] = @Original_TRANSPAR)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IDEXHIBIT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDEXHIBIT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IDREF";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDREF";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLTYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLNUM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@XNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "XNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VFILENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "IFILENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "AFILENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TFILENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFERENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TEXT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TEXT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IMAGE";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@AUDIO";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "AUDIO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLPER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLPER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLGTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLGTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@OLE_OBJECT";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "OLE_OBJECT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VIDEO";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "VIDEO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_EVENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_EVENT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_SOURCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_REPOS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_REPOS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@THUMB";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "THUMB";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_CIT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_CIT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_PLACE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PLACE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CAPTION";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CAPTION";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SORTEXH";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SORTEXH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IMAGEFORE";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGEFORE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IMAGEBACK";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGEBACK";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANSPAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSPAR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IDEXHIBIT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDEXHIBIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IDREF";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IDREF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IDREF";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDREF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLTYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_XNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "XNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_XNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "XNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VFILENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IFILENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "IFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_AFILENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "AFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "AFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TFILENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TFILENAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TFILENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFERENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TEXT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TEXT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IMAGE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IMAGE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IMAGE";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_AUDIO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "AUDIO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_AUDIO";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "AUDIO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DESCRIPT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLPER1";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLPER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLPER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLPER2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLPER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLPER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLGTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLGTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLGTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLGTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_OLE_OBJECT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "OLE_OBJECT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_OLE_OBJECT";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "OLE_OBJECT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VIDEO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VIDEO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VIDEO";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "VIDEO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROPERTY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_EVENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_EVENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_EVENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_EVENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_SOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_SOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_REPOS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_REPOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_REPOS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_REPOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_THUMB";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "THUMB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_THUMB";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "THUMB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_CIT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_CIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_CIT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_CIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_PLACE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_PLACE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_PLACE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PLACE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CAPTION";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CAPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CAPTION";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CAPTION";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SORTEXH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SORTEXH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SORTEXH";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SORTEXH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IMAGEFORE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IMAGEFORE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IMAGEFORE";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGEFORE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IMAGEBACK";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IMAGEBACK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IMAGEBACK";
            param.DbType = global::System.Data.DbType.Binary;
            param.DbType = global::System.Data.DbType.Binary;
            param.SourceColumn = "IMAGEBACK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANSPAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANSPAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANSPAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TRANSPAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [IDEXHIBIT], [IDREF], [RLTYPE], [RLNUM], [XNAME], [VFILENAME], [IFILENAME], [AFILENAME], [TFILENAME], [REFERENCE], [TEXT], [IMAGE], [AUDIO], [DESCRIPT], [RLPER1], [RLPER2], [RLGTYPE], [OLE_OBJECT], [PRIMARY], [VIDEO], [PROPERTY], [DSID], [TT], [ID_PERSON], [ID_EVENT], [ID_SOURCE], [ID_REPOS], [THUMB], [ID_CIT], [ID_PLACE], [CAPTION], [SORTEXH], [IMAGEFORE], [IMAGEBACK], [TRANSPAR] FROM [Exhibit]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.ExhibitDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.ExhibitDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.ExhibitDataTable dataTable = new tmgDataSet.ExhibitDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.ExhibitDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Exhibit");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_IDEXHIBIT, 
                    global::System.Nullable<long> Original_IDREF, 
                    string Original_RLTYPE, 
                    global::System.Nullable<long> Original_RLNUM, 
                    string Original_XNAME, 
                    string Original_VFILENAME, 
                    string Original_IFILENAME, 
                    string Original_AFILENAME, 
                    string Original_TFILENAME, 
                    string Original_REFERENCE, 
                    string Original_TEXT, 
                    byte[] Original_IMAGE, 
                    byte[] Original_AUDIO, 
                    string Original_DESCRIPT, 
                    global::System.Nullable<long> Original_RLPER1, 
                    global::System.Nullable<long> Original_RLPER2, 
                    global::System.Nullable<long> Original_RLGTYPE, 
                    byte[] Original_OLE_OBJECT, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    byte[] Original_VIDEO, 
                    string Original_PROPERTY, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_ID_PERSON, 
                    global::System.Nullable<long> Original_ID_EVENT, 
                    global::System.Nullable<long> Original_ID_SOURCE, 
                    global::System.Nullable<long> Original_ID_REPOS, 
                    byte[] Original_THUMB, 
                    global::System.Nullable<long> Original_ID_CIT, 
                    global::System.Nullable<long> Original_ID_PLACE, 
                    string Original_CAPTION, 
                    global::System.Nullable<long> Original_SORTEXH, 
                    byte[] Original_IMAGEFORE, 
                    byte[] Original_IMAGEBACK, 
                    global::System.Nullable<decimal> Original_TRANSPAR) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_IDEXHIBIT));
            if ((Original_IDREF.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_IDREF.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_RLTYPE == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_RLTYPE));
            }
            if ((Original_RLNUM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_RLNUM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_XNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_XNAME));
            }
            if ((Original_VFILENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_VFILENAME));
            }
            if ((Original_IFILENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_IFILENAME));
            }
            if ((Original_AFILENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_AFILENAME));
            }
            if ((Original_TFILENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_TFILENAME));
            }
            if ((Original_REFERENCE == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_REFERENCE));
            }
            if ((Original_TEXT == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_TEXT));
            }
            if ((Original_IMAGE == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((byte[])(Original_IMAGE));
            }
            if ((Original_AUDIO == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((byte[])(Original_AUDIO));
            }
            if ((Original_DESCRIPT == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_DESCRIPT));
            }
            if ((Original_RLPER1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((long)(Original_RLPER1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_RLPER2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((long)(Original_RLPER2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_RLGTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((long)(Original_RLGTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_OLE_OBJECT == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((byte[])(Original_OLE_OBJECT));
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_VIDEO == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((byte[])(Original_VIDEO));
            }
            if ((Original_PROPERTY == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_PROPERTY));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_TT));
            }
            if ((Original_ID_PERSON.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((long)(Original_ID_PERSON.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_EVENT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((long)(Original_ID_EVENT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_SOURCE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((long)(Original_ID_SOURCE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_REPOS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((long)(Original_ID_REPOS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_THUMB == null)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((byte[])(Original_THUMB));
            }
            if ((Original_ID_CIT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((long)(Original_ID_CIT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_PLACE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((long)(Original_ID_PLACE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_CAPTION == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_CAPTION));
            }
            if ((Original_SORTEXH.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((long)(Original_SORTEXH.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_IMAGEFORE == null)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((byte[])(Original_IMAGEFORE));
            }
            if ((Original_IMAGEBACK == null)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((byte[])(Original_IMAGEBACK));
            }
            if ((Original_TRANSPAR.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((decimal)(Original_TRANSPAR.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long IDEXHIBIT, 
                    global::System.Nullable<long> IDREF, 
                    string RLTYPE, 
                    global::System.Nullable<long> RLNUM, 
                    string XNAME, 
                    string VFILENAME, 
                    string IFILENAME, 
                    string AFILENAME, 
                    string TFILENAME, 
                    string REFERENCE, 
                    string TEXT, 
                    byte[] IMAGE, 
                    byte[] AUDIO, 
                    string DESCRIPT, 
                    global::System.Nullable<long> RLPER1, 
                    global::System.Nullable<long> RLPER2, 
                    global::System.Nullable<long> RLGTYPE, 
                    byte[] OLE_OBJECT, 
                    global::System.Nullable<bool> PRIMARY, 
                    byte[] VIDEO, 
                    string PROPERTY, 
                    global::System.Nullable<long> DSID, 
                    string TT, 
                    global::System.Nullable<long> ID_PERSON, 
                    global::System.Nullable<long> ID_EVENT, 
                    global::System.Nullable<long> ID_SOURCE, 
                    global::System.Nullable<long> ID_REPOS, 
                    byte[] THUMB, 
                    global::System.Nullable<long> ID_CIT, 
                    global::System.Nullable<long> ID_PLACE, 
                    string CAPTION, 
                    global::System.Nullable<long> SORTEXH, 
                    byte[] IMAGEFORE, 
                    byte[] IMAGEBACK, 
                    global::System.Nullable<decimal> TRANSPAR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(IDEXHIBIT));
            if ((IDREF.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(IDREF.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RLTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RLTYPE));
            }
            if ((RLNUM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(RLNUM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((XNAME == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(XNAME));
            }
            if ((VFILENAME == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(VFILENAME));
            }
            if ((IFILENAME == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(IFILENAME));
            }
            if ((AFILENAME == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(AFILENAME));
            }
            if ((TFILENAME == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TFILENAME));
            }
            if ((REFERENCE == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(REFERENCE));
            }
            if ((TEXT == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(TEXT));
            }
            if ((IMAGE == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((byte[])(IMAGE));
            }
            if ((AUDIO == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((byte[])(AUDIO));
            }
            if ((DESCRIPT == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(DESCRIPT));
            }
            if ((RLPER1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((long)(RLPER1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((RLPER2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((long)(RLPER2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((RLGTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((long)(RLGTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((OLE_OBJECT == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((byte[])(OLE_OBJECT));
            }
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((VIDEO == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((byte[])(VIDEO));
            }
            if ((PROPERTY == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(PROPERTY));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(TT));
            }
            if ((ID_PERSON.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((long)(ID_PERSON.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((ID_EVENT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((long)(ID_EVENT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((ID_SOURCE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((long)(ID_SOURCE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((ID_REPOS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((long)(ID_REPOS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((THUMB == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((byte[])(THUMB));
            }
            if ((ID_CIT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((long)(ID_CIT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((ID_PLACE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((long)(ID_PLACE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((CAPTION == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(CAPTION));
            }
            if ((SORTEXH.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((long)(SORTEXH.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((IMAGEFORE == null)) {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = ((byte[])(IMAGEFORE));
            }
            if ((IMAGEBACK == null)) {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = ((byte[])(IMAGEBACK));
            }
            if ((TRANSPAR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((decimal)(TRANSPAR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long IDEXHIBIT, 
                    global::System.Nullable<long> IDREF, 
                    string RLTYPE, 
                    global::System.Nullable<long> RLNUM, 
                    string XNAME, 
                    string VFILENAME, 
                    string IFILENAME, 
                    string AFILENAME, 
                    string TFILENAME, 
                    string REFERENCE, 
                    string TEXT, 
                    byte[] IMAGE, 
                    byte[] AUDIO, 
                    string DESCRIPT, 
                    global::System.Nullable<long> RLPER1, 
                    global::System.Nullable<long> RLPER2, 
                    global::System.Nullable<long> RLGTYPE, 
                    byte[] OLE_OBJECT, 
                    global::System.Nullable<bool> PRIMARY, 
                    byte[] VIDEO, 
                    string PROPERTY, 
                    global::System.Nullable<long> DSID, 
                    string TT, 
                    global::System.Nullable<long> ID_PERSON, 
                    global::System.Nullable<long> ID_EVENT, 
                    global::System.Nullable<long> ID_SOURCE, 
                    global::System.Nullable<long> ID_REPOS, 
                    byte[] THUMB, 
                    global::System.Nullable<long> ID_CIT, 
                    global::System.Nullable<long> ID_PLACE, 
                    string CAPTION, 
                    global::System.Nullable<long> SORTEXH, 
                    byte[] IMAGEFORE, 
                    byte[] IMAGEBACK, 
                    global::System.Nullable<decimal> TRANSPAR, 
                    long Original_IDEXHIBIT, 
                    global::System.Nullable<long> Original_IDREF, 
                    string Original_RLTYPE, 
                    global::System.Nullable<long> Original_RLNUM, 
                    string Original_XNAME, 
                    string Original_VFILENAME, 
                    string Original_IFILENAME, 
                    string Original_AFILENAME, 
                    string Original_TFILENAME, 
                    string Original_REFERENCE, 
                    string Original_TEXT, 
                    byte[] Original_IMAGE, 
                    byte[] Original_AUDIO, 
                    string Original_DESCRIPT, 
                    global::System.Nullable<long> Original_RLPER1, 
                    global::System.Nullable<long> Original_RLPER2, 
                    global::System.Nullable<long> Original_RLGTYPE, 
                    byte[] Original_OLE_OBJECT, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    byte[] Original_VIDEO, 
                    string Original_PROPERTY, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_ID_PERSON, 
                    global::System.Nullable<long> Original_ID_EVENT, 
                    global::System.Nullable<long> Original_ID_SOURCE, 
                    global::System.Nullable<long> Original_ID_REPOS, 
                    byte[] Original_THUMB, 
                    global::System.Nullable<long> Original_ID_CIT, 
                    global::System.Nullable<long> Original_ID_PLACE, 
                    string Original_CAPTION, 
                    global::System.Nullable<long> Original_SORTEXH, 
                    byte[] Original_IMAGEFORE, 
                    byte[] Original_IMAGEBACK, 
                    global::System.Nullable<decimal> Original_TRANSPAR) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(IDEXHIBIT));
            if ((IDREF.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(IDREF.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RLTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(RLTYPE));
            }
            if ((RLNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(RLNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((XNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(XNAME));
            }
            if ((VFILENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(VFILENAME));
            }
            if ((IFILENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(IFILENAME));
            }
            if ((AFILENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(AFILENAME));
            }
            if ((TFILENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TFILENAME));
            }
            if ((REFERENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(REFERENCE));
            }
            if ((TEXT == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(TEXT));
            }
            if ((IMAGE == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((byte[])(IMAGE));
            }
            if ((AUDIO == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((byte[])(AUDIO));
            }
            if ((DESCRIPT == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(DESCRIPT));
            }
            if ((RLPER1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(RLPER1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((RLPER2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(RLPER2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((RLGTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(RLGTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((OLE_OBJECT == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((byte[])(OLE_OBJECT));
            }
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((VIDEO == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((byte[])(VIDEO));
            }
            if ((PROPERTY == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(PROPERTY));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(TT));
            }
            if ((ID_PERSON.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(ID_PERSON.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((ID_EVENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(ID_EVENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((ID_SOURCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((long)(ID_SOURCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((ID_REPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((long)(ID_REPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((THUMB == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((byte[])(THUMB));
            }
            if ((ID_CIT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(ID_CIT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((ID_PLACE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((long)(ID_PLACE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((CAPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(CAPTION));
            }
            if ((SORTEXH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((long)(SORTEXH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((IMAGEFORE == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((byte[])(IMAGEFORE));
            }
            if ((IMAGEBACK == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((byte[])(IMAGEBACK));
            }
            if ((TRANSPAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(TRANSPAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((long)(Original_IDEXHIBIT));
            if ((Original_IDREF.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((long)(Original_IDREF.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_RLTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_RLTYPE));
            }
            if ((Original_RLNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((long)(Original_RLNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_XNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_XNAME));
            }
            if ((Original_VFILENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_VFILENAME));
            }
            if ((Original_IFILENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_IFILENAME));
            }
            if ((Original_AFILENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_AFILENAME));
            }
            if ((Original_TFILENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_TFILENAME));
            }
            if ((Original_REFERENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_REFERENCE));
            }
            if ((Original_TEXT == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_TEXT));
            }
            if ((Original_IMAGE == null)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((byte[])(Original_IMAGE));
            }
            if ((Original_AUDIO == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((byte[])(Original_AUDIO));
            }
            if ((Original_DESCRIPT == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_DESCRIPT));
            }
            if ((Original_RLPER1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((long)(Original_RLPER1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            if ((Original_RLPER2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((long)(Original_RLPER2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_RLGTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((long)(Original_RLGTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((Original_OLE_OBJECT == null)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((byte[])(Original_OLE_OBJECT));
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_VIDEO == null)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((byte[])(Original_VIDEO));
            }
            if ((Original_PROPERTY == null)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((string)(Original_PROPERTY));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((string)(Original_TT));
            }
            if ((Original_ID_PERSON.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((long)(Original_ID_PERSON.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_EVENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((long)(Original_ID_EVENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_SOURCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((long)(Original_ID_SOURCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_REPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((long)(Original_ID_REPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((Original_THUMB == null)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((byte[])(Original_THUMB));
            }
            if ((Original_ID_CIT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((long)(Original_ID_CIT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_PLACE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[93].Value = ((long)(Original_ID_PLACE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[92].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[93].Value = global::System.DBNull.Value;
            }
            if ((Original_CAPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[95].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[94].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[95].Value = ((string)(Original_CAPTION));
            }
            if ((Original_SORTEXH.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[97].Value = ((long)(Original_SORTEXH.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[96].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[97].Value = global::System.DBNull.Value;
            }
            if ((Original_IMAGEFORE == null)) {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[99].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[98].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[99].Value = ((byte[])(Original_IMAGEFORE));
            }
            if ((Original_IMAGEBACK == null)) {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[101].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[100].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[101].Value = ((byte[])(Original_IMAGEBACK));
            }
            if ((Original_TRANSPAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[103].Value = ((decimal)(Original_TRANSPAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[102].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[103].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> IDREF, 
                    string RLTYPE, 
                    global::System.Nullable<long> RLNUM, 
                    string XNAME, 
                    string VFILENAME, 
                    string IFILENAME, 
                    string AFILENAME, 
                    string TFILENAME, 
                    string REFERENCE, 
                    string TEXT, 
                    byte[] IMAGE, 
                    byte[] AUDIO, 
                    string DESCRIPT, 
                    global::System.Nullable<long> RLPER1, 
                    global::System.Nullable<long> RLPER2, 
                    global::System.Nullable<long> RLGTYPE, 
                    byte[] OLE_OBJECT, 
                    global::System.Nullable<bool> PRIMARY, 
                    byte[] VIDEO, 
                    string PROPERTY, 
                    global::System.Nullable<long> DSID, 
                    string TT, 
                    global::System.Nullable<long> ID_PERSON, 
                    global::System.Nullable<long> ID_EVENT, 
                    global::System.Nullable<long> ID_SOURCE, 
                    global::System.Nullable<long> ID_REPOS, 
                    byte[] THUMB, 
                    global::System.Nullable<long> ID_CIT, 
                    global::System.Nullable<long> ID_PLACE, 
                    string CAPTION, 
                    global::System.Nullable<long> SORTEXH, 
                    byte[] IMAGEFORE, 
                    byte[] IMAGEBACK, 
                    global::System.Nullable<decimal> TRANSPAR, 
                    long Original_IDEXHIBIT, 
                    global::System.Nullable<long> Original_IDREF, 
                    string Original_RLTYPE, 
                    global::System.Nullable<long> Original_RLNUM, 
                    string Original_XNAME, 
                    string Original_VFILENAME, 
                    string Original_IFILENAME, 
                    string Original_AFILENAME, 
                    string Original_TFILENAME, 
                    string Original_REFERENCE, 
                    string Original_TEXT, 
                    byte[] Original_IMAGE, 
                    byte[] Original_AUDIO, 
                    string Original_DESCRIPT, 
                    global::System.Nullable<long> Original_RLPER1, 
                    global::System.Nullable<long> Original_RLPER2, 
                    global::System.Nullable<long> Original_RLGTYPE, 
                    byte[] Original_OLE_OBJECT, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    byte[] Original_VIDEO, 
                    string Original_PROPERTY, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_ID_PERSON, 
                    global::System.Nullable<long> Original_ID_EVENT, 
                    global::System.Nullable<long> Original_ID_SOURCE, 
                    global::System.Nullable<long> Original_ID_REPOS, 
                    byte[] Original_THUMB, 
                    global::System.Nullable<long> Original_ID_CIT, 
                    global::System.Nullable<long> Original_ID_PLACE, 
                    string Original_CAPTION, 
                    global::System.Nullable<long> Original_SORTEXH, 
                    byte[] Original_IMAGEFORE, 
                    byte[] Original_IMAGEBACK, 
                    global::System.Nullable<decimal> Original_TRANSPAR) {
            return this.Update(Original_IDEXHIBIT, IDREF, RLTYPE, RLNUM, XNAME, VFILENAME, IFILENAME, AFILENAME, TFILENAME, REFERENCE, TEXT, IMAGE, AUDIO, DESCRIPT, RLPER1, RLPER2, RLGTYPE, OLE_OBJECT, PRIMARY, VIDEO, PROPERTY, DSID, TT, ID_PERSON, ID_EVENT, ID_SOURCE, ID_REPOS, THUMB, ID_CIT, ID_PLACE, CAPTION, SORTEXH, IMAGEFORE, IMAGEBACK, TRANSPAR, Original_IDEXHIBIT, Original_IDREF, Original_RLTYPE, Original_RLNUM, Original_XNAME, Original_VFILENAME, Original_IFILENAME, Original_AFILENAME, Original_TFILENAME, Original_REFERENCE, Original_TEXT, Original_IMAGE, Original_AUDIO, Original_DESCRIPT, Original_RLPER1, Original_RLPER2, Original_RLGTYPE, Original_OLE_OBJECT, Original_PRIMARY, Original_VIDEO, Original_PROPERTY, Original_DSID, Original_TT, Original_ID_PERSON, Original_ID_EVENT, Original_ID_SOURCE, Original_ID_REPOS, Original_THUMB, Original_ID_CIT, Original_ID_PLACE, Original_CAPTION, Original_SORTEXH, Original_IMAGEFORE, Original_IMAGEBACK, Original_TRANSPAR);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FlagTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FlagTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Flag";
            tableMapping.ColumnMappings.Add("FLAGLABEL", "FLAGLABEL");
            tableMapping.ColumnMappings.Add("FLAGFIELD", "FLAGFIELD");
            tableMapping.ColumnMappings.Add("FLAGVALUE", "FLAGVALUE");
            tableMapping.ColumnMappings.Add("SEQUENCE", "SEQUENCE");
            tableMapping.ColumnMappings.Add("DESCRIPT", "DESCRIPT");
            tableMapping.ColumnMappings.Add("ACTIVE", "ACTIVE");
            tableMapping.ColumnMappings.Add("FLAGID", "FLAGID");
            tableMapping.ColumnMappings.Add("PROPERTY", "PROPERTY");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("TT", "TT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[Flag] WHERE (((@IsNull_FLAGLABEL = 1 AND [FLAGLABEL] IS NULL) OR ([FLAGLABEL] = @Original_FLAGLABEL)) AND ((@IsNull_FLAGFIELD = 1 AND [FLAGFIELD] IS NULL) OR ([FLAGFIELD] = @Original_FLAGFIELD)) AND ((@IsNull_FLAGVALUE = 1 AND [FLAGVALUE] IS NULL) OR ([FLAGVALUE] = @Original_FLAGVALUE)) AND ((@IsNull_SEQUENCE = 1 AND [SEQUENCE] IS NULL) OR ([SEQUENCE] = @Original_SEQUENCE)) AND ((@IsNull_DESCRIPT = 1 AND [DESCRIPT] IS NULL) OR ([DESCRIPT] = @Original_DESCRIPT)) AND ((@IsNull_ACTIVE = 1 AND [ACTIVE] IS NULL) OR ([ACTIVE] = @Original_ACTIVE)) AND ([FLAGID] = @Original_FLAGID) AND ((@IsNull_PROPERTY = 1 AND [PROPERTY] IS NULL) OR ([PROPERTY] = @Original_PROPERTY)) AND ([DSID] = @Original_DSID) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FLAGLABEL";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FLAGLABEL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAGLABEL";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGLABEL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FLAGFIELD";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FLAGFIELD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAGFIELD";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGFIELD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FLAGVALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FLAGVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAGVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DESCRIPT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ACTIVE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FLAGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROPERTY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[Flag] ([FLAGLABEL], [FLAGFIELD], [FLAGVALUE], [SEQUENCE], [DESCRIPT], [ACTIVE], [FLAGID], [PROPERTY], [DSID], [TT]) VALUES (@FLAGLABEL, @FLAGFIELD, @FLAGVALUE, @SEQUENCE, @DESCRIPT, @ACTIVE, @FLAGID, @PROPERTY, @DSID, @TT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAGLABEL";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGLABEL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAGFIELD";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGFIELD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAGVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGVALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ACTIVE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FLAGID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[Flag] SET [FLAGLABEL] = @FLAGLABEL, [FLAGFIELD] = @FLAGFIELD, [FLAGVALUE] = @FLAGVALUE, [SEQUENCE] = @SEQUENCE, [DESCRIPT] = @DESCRIPT, [ACTIVE] = @ACTIVE, [FLAGID] = @FLAGID, [PROPERTY] = @PROPERTY, [DSID] = @DSID, [TT] = @TT WHERE (((@IsNull_FLAGLABEL = 1 AND [FLAGLABEL] IS NULL) OR ([FLAGLABEL] = @Original_FLAGLABEL)) AND ((@IsNull_FLAGFIELD = 1 AND [FLAGFIELD] IS NULL) OR ([FLAGFIELD] = @Original_FLAGFIELD)) AND ((@IsNull_FLAGVALUE = 1 AND [FLAGVALUE] IS NULL) OR ([FLAGVALUE] = @Original_FLAGVALUE)) AND ((@IsNull_SEQUENCE = 1 AND [SEQUENCE] IS NULL) OR ([SEQUENCE] = @Original_SEQUENCE)) AND ((@IsNull_DESCRIPT = 1 AND [DESCRIPT] IS NULL) OR ([DESCRIPT] = @Original_DESCRIPT)) AND ((@IsNull_ACTIVE = 1 AND [ACTIVE] IS NULL) OR ([ACTIVE] = @Original_ACTIVE)) AND ([FLAGID] = @Original_FLAGID) AND ((@IsNull_PROPERTY = 1 AND [PROPERTY] IS NULL) OR ([PROPERTY] = @Original_PROPERTY)) AND ([DSID] = @Original_DSID) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAGLABEL";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGLABEL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAGFIELD";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGFIELD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAGVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGVALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ACTIVE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FLAGID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FLAGLABEL";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FLAGLABEL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAGLABEL";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGLABEL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FLAGFIELD";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FLAGFIELD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAGFIELD";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGFIELD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FLAGVALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FLAGVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAGVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAGVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DESCRIPT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESCRIPT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "DESCRIPT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ACTIVE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAGID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FLAGID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROPERTY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROPERTY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [FLAGLABEL], [FLAGFIELD], [FLAGVALUE], [SEQUENCE], [DESCRIPT], [ACTIVE], [" +
                "FLAGID], [PROPERTY], [DSID], [TT] FROM [Flag]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.FlagDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.FlagDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.FlagDataTable dataTable = new tmgDataSet.FlagDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.FlagDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Flag");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_FLAGLABEL, string Original_FLAGFIELD, string Original_FLAGVALUE, global::System.Nullable<long> Original_SEQUENCE, string Original_DESCRIPT, global::System.Nullable<bool> Original_ACTIVE, long Original_FLAGID, string Original_PROPERTY, long Original_DSID, string Original_TT) {
            if ((Original_FLAGLABEL == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_FLAGLABEL));
            }
            if ((Original_FLAGFIELD == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_FLAGFIELD));
            }
            if ((Original_FLAGVALUE == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_FLAGVALUE));
            }
            if ((Original_SEQUENCE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_SEQUENCE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_DESCRIPT == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_DESCRIPT));
            }
            if ((Original_ACTIVE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_ACTIVE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_FLAGID));
            if ((Original_PROPERTY == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_PROPERTY));
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((long)(Original_DSID));
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string FLAGLABEL, string FLAGFIELD, string FLAGVALUE, global::System.Nullable<long> SEQUENCE, string DESCRIPT, global::System.Nullable<bool> ACTIVE, long FLAGID, string PROPERTY, long DSID, string TT) {
            if ((FLAGLABEL == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(FLAGLABEL));
            }
            if ((FLAGFIELD == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FLAGFIELD));
            }
            if ((FLAGVALUE == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FLAGVALUE));
            }
            if ((SEQUENCE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(SEQUENCE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DESCRIPT == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DESCRIPT));
            }
            if ((ACTIVE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(ACTIVE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((long)(FLAGID));
            if ((PROPERTY == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(PROPERTY));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((long)(DSID));
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string FLAGLABEL, 
                    string FLAGFIELD, 
                    string FLAGVALUE, 
                    global::System.Nullable<long> SEQUENCE, 
                    string DESCRIPT, 
                    global::System.Nullable<bool> ACTIVE, 
                    long FLAGID, 
                    string PROPERTY, 
                    long DSID, 
                    string TT, 
                    string Original_FLAGLABEL, 
                    string Original_FLAGFIELD, 
                    string Original_FLAGVALUE, 
                    global::System.Nullable<long> Original_SEQUENCE, 
                    string Original_DESCRIPT, 
                    global::System.Nullable<bool> Original_ACTIVE, 
                    long Original_FLAGID, 
                    string Original_PROPERTY, 
                    long Original_DSID, 
                    string Original_TT) {
            if ((FLAGLABEL == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(FLAGLABEL));
            }
            if ((FLAGFIELD == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FLAGFIELD));
            }
            if ((FLAGVALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FLAGVALUE));
            }
            if ((SEQUENCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(SEQUENCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DESCRIPT == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DESCRIPT));
            }
            if ((ACTIVE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(ACTIVE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(FLAGID));
            if ((PROPERTY == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(PROPERTY));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(DSID));
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(TT));
            }
            if ((Original_FLAGLABEL == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_FLAGLABEL));
            }
            if ((Original_FLAGFIELD == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_FLAGFIELD));
            }
            if ((Original_FLAGVALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_FLAGVALUE));
            }
            if ((Original_SEQUENCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_SEQUENCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_DESCRIPT == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_DESCRIPT));
            }
            if ((Original_ACTIVE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(Original_ACTIVE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(Original_FLAGID));
            if ((Original_PROPERTY == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_PROPERTY));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((long)(Original_DSID));
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string FLAGLABEL, 
                    string FLAGFIELD, 
                    string FLAGVALUE, 
                    global::System.Nullable<long> SEQUENCE, 
                    string DESCRIPT, 
                    global::System.Nullable<bool> ACTIVE, 
                    string PROPERTY, 
                    long DSID, 
                    string TT, 
                    string Original_FLAGLABEL, 
                    string Original_FLAGFIELD, 
                    string Original_FLAGVALUE, 
                    global::System.Nullable<long> Original_SEQUENCE, 
                    string Original_DESCRIPT, 
                    global::System.Nullable<bool> Original_ACTIVE, 
                    long Original_FLAGID, 
                    string Original_PROPERTY, 
                    long Original_DSID, 
                    string Original_TT) {
            return this.Update(FLAGLABEL, FLAGFIELD, FLAGVALUE, SEQUENCE, DESCRIPT, ACTIVE, Original_FLAGID, PROPERTY, DSID, TT, Original_FLAGLABEL, Original_FLAGFIELD, Original_FLAGVALUE, Original_SEQUENCE, Original_DESCRIPT, Original_ACTIVE, Original_FLAGID, Original_PROPERTY, Original_DSID, Original_TT);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FocusGroupTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FocusGroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FocusGroup";
            tableMapping.ColumnMappings.Add("GROUPNUM", "GROUPNUM");
            tableMapping.ColumnMappings.Add("GROUPNAME", "GROUPNAME");
            tableMapping.ColumnMappings.Add("RECENT", "RECENT");
            tableMapping.ColumnMappings.Add("TT", "TT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[FocusGroup] WHERE (([GROUPNUM] = @Original_GROUPNUM) AND ((@IsNull_GROUPNAME = 1 AND [GROUPNAME] IS NULL) OR ([GROUPNAME] = @Original_GROUPNAME)) AND ((@IsNull_RECENT = 1 AND [RECENT] IS NULL) OR ([RECENT] = @Original_RECENT)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GROUPNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GROUPNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GROUPNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GROUPNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GROUPNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GROUPNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RECENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RECENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECENT";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "RECENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[FocusGroup] ([GROUPNAME], [RECENT], [" +
                "TT]) VALUES (@GROUPNAME, @RECENT, @TT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GROUPNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GROUPNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECENT";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "RECENT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[FocusGroup] SET [GROUPNAME] = @GROUPNAME, [RECENT] = @RECENT, [TT] = @TT WHERE (([GROUPNUM] = @Original_GROUPNUM) AND ((@IsNull_GROUPNAME = 1 AND [GROUPNAME] IS NULL) OR ([GROUPNAME] = @Original_GROUPNAME)) AND ((@IsNull_RECENT = 1 AND [RECENT] IS NULL) OR ([RECENT] = @Original_RECENT)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GROUPNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GROUPNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECENT";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "RECENT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GROUPNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GROUPNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GROUPNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GROUPNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GROUPNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GROUPNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RECENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RECENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECENT";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "RECENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [GROUPNUM], [GROUPNAME], [RECENT], [TT] FROM [FocusGroup]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.FocusGroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.FocusGroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.FocusGroupDataTable dataTable = new tmgDataSet.FocusGroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.FocusGroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FocusGroup");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_GROUPNUM, string Original_GROUPNAME, global::System.Nullable<bool> Original_RECENT, string Original_TT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_GROUPNUM));
            if ((Original_GROUPNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_GROUPNAME));
            }
            if ((Original_RECENT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_RECENT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string GROUPNAME, global::System.Nullable<bool> RECENT, string TT) {
            if ((GROUPNAME == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(GROUPNAME));
            }
            if ((RECENT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(RECENT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string GROUPNAME, global::System.Nullable<bool> RECENT, string TT, long Original_GROUPNUM, string Original_GROUPNAME, global::System.Nullable<bool> Original_RECENT, string Original_TT) {
            if ((GROUPNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(GROUPNAME));
            }
            if ((RECENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(RECENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TT));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_GROUPNUM));
            if ((Original_GROUPNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_GROUPNAME));
            }
            if ((Original_RECENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Original_RECENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FocusGroupMemberTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FocusGroupMemberTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FocusGroupMember";
            tableMapping.ColumnMappings.Add("GROUPNUM", "GROUPNUM");
            tableMapping.ColumnMappings.Add("MEMBERNUM", "MEMBERNUM");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("FocusGroupMember_ID", "FocusGroupMember_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[FocusGroupMember] WHERE (((@IsNull_GROUPNUM = 1 AND [GROUPNUM] IS NULL) OR ([GROUPNUM] = @Original_GROUPNUM)) AND ((@IsNull_MEMBERNUM = 1 AND [MEMBERNUM] IS NULL) OR ([MEMBERNUM] = @Original_MEMBERNUM)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([FocusGroupMember_ID] = @Original_FocusGroupMember_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GROUPNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GROUPNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GROUPNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GROUPNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MEMBERNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MEMBERNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MEMBERNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MEMBERNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FocusGroupMember_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FocusGroupMember_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[FocusGroupMember] ([GROUPNUM], [MEMBE" +
                "RNUM], [TT], [DSID]) VALUES (@GROUPNUM, @MEMBERNUM, @TT, @DSID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GROUPNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GROUPNUM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MEMBERNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MEMBERNUM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[FocusGroupMember] SET [GROUPNUM] = @GROUPNUM, [MEMBERNUM] = @MEMBERNUM, [TT] = @TT, [DSID] = @DSID WHERE (((@IsNull_GROUPNUM = 1 AND [GROUPNUM] IS NULL) OR ([GROUPNUM] = @Original_GROUPNUM)) AND ((@IsNull_MEMBERNUM = 1 AND [MEMBERNUM] IS NULL) OR ([MEMBERNUM] = @Original_MEMBERNUM)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([FocusGroupMember_ID] = @Original_FocusGroupMember_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GROUPNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GROUPNUM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MEMBERNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MEMBERNUM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GROUPNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GROUPNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GROUPNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GROUPNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MEMBERNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MEMBERNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MEMBERNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MEMBERNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FocusGroupMember_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FocusGroupMember_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [GROUPNUM], [MEMBERNUM], [TT], [DSID], [FocusGroupMember_ID] FROM [FocusGr" +
                "oupMember]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.FocusGroupMemberDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.FocusGroupMemberDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.FocusGroupMemberDataTable dataTable = new tmgDataSet.FocusGroupMemberDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.FocusGroupMemberDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FocusGroupMember");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_GROUPNUM, global::System.Nullable<long> Original_MEMBERNUM, string Original_TT, global::System.Nullable<long> Original_DSID, long Original_FocusGroupMember_ID) {
            if ((Original_GROUPNUM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_GROUPNUM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_MEMBERNUM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_MEMBERNUM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_FocusGroupMember_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> GROUPNUM, global::System.Nullable<long> MEMBERNUM, string TT, global::System.Nullable<long> DSID) {
            if ((GROUPNUM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(GROUPNUM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((MEMBERNUM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(MEMBERNUM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> GROUPNUM, global::System.Nullable<long> MEMBERNUM, string TT, global::System.Nullable<long> DSID, global::System.Nullable<long> Original_GROUPNUM, global::System.Nullable<long> Original_MEMBERNUM, string Original_TT, global::System.Nullable<long> Original_DSID, long Original_FocusGroupMember_ID) {
            if ((GROUPNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(GROUPNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((MEMBERNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(MEMBERNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_GROUPNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_GROUPNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_MEMBERNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_MEMBERNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_FocusGroupMember_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NameTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public NameTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Name";
            tableMapping.ColumnMappings.Add("NPER", "NPER");
            tableMapping.ColumnMappings.Add("ALTYPE", "ALTYPE");
            tableMapping.ColumnMappings.Add("ISPICKED", "ISPICKED");
            tableMapping.ColumnMappings.Add("INFS", "INFS");
            tableMapping.ColumnMappings.Add("INFG", "INFG");
            tableMapping.ColumnMappings.Add("PRIMARY", "PRIMARY");
            tableMapping.ColumnMappings.Add("NSURE", "NSURE");
            tableMapping.ColumnMappings.Add("FSURE", "FSURE");
            tableMapping.ColumnMappings.Add("NNOTE", "NNOTE");
            tableMapping.ColumnMappings.Add("RECNO", "RECNO");
            tableMapping.ColumnMappings.Add("SENTENCE", "SENTENCE");
            tableMapping.ColumnMappings.Add("NDATE", "NDATE");
            tableMapping.ColumnMappings.Add("SRTDATE", "SRTDATE");
            tableMapping.ColumnMappings.Add("DSURE", "DSURE");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("SRNAMESORT", "SRNAMESORT");
            tableMapping.ColumnMappings.Add("GVNAMESORT", "GVNAMESORT");
            tableMapping.ColumnMappings.Add("STYLEID", "STYLEID");
            tableMapping.ColumnMappings.Add("SURID", "SURID");
            tableMapping.ColumnMappings.Add("GIVID", "GIVID");
            tableMapping.ColumnMappings.Add("SRNAMEDISP", "SRNAMEDISP");
            tableMapping.ColumnMappings.Add("SNDXSURN", "SNDXSURN");
            tableMapping.ColumnMappings.Add("SNDXGVN", "SNDXGVN");
            tableMapping.ColumnMappings.Add("PBIRTH", "PBIRTH");
            tableMapping.ColumnMappings.Add("PDEATH", "PDEATH");
            tableMapping.ColumnMappings.Add("REFER", "REFER");
            tableMapping.ColumnMappings.Add("PREF_ID", "PREF_ID");
            tableMapping.ColumnMappings.Add("LAST_EDIT", "LAST_EDIT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[Name] WHERE (((@IsNull_NPER = 1 AND [" +
                "NPER] IS NULL) OR ([NPER] = @Original_NPER)) AND ((@IsNull_ALTYPE = 1 AND [ALTYP" +
                "E] IS NULL) OR ([ALTYPE] = @Original_ALTYPE)) AND ((@IsNull_ISPICKED = 1 AND [IS" +
                "PICKED] IS NULL) OR ([ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_INFS = 1 AN" +
                "D [INFS] IS NULL) OR ([INFS] = @Original_INFS)) AND ((@IsNull_INFG = 1 AND [INFG" +
                "] IS NULL) OR ([INFG] = @Original_INFG)) AND ((@IsNull_PRIMARY = 1 AND [PRIMARY]" +
                " IS NULL) OR ([PRIMARY] = @Original_PRIMARY)) AND ((@IsNull_NSURE = 1 AND [NSURE" +
                "] IS NULL) OR ([NSURE] = @Original_NSURE)) AND ((@IsNull_FSURE = 1 AND [FSURE] I" +
                "S NULL) OR ([FSURE] = @Original_FSURE)) AND ((@IsNull_NNOTE = 1 AND [NNOTE] IS N" +
                "ULL) OR ([NNOTE] = @Original_NNOTE)) AND ([RECNO] = @Original_RECNO) AND ((@IsNu" +
                "ll_SENTENCE = 1 AND [SENTENCE] IS NULL) OR ([SENTENCE] = @Original_SENTENCE)) AN" +
                "D ((@IsNull_NDATE = 1 AND [NDATE] IS NULL) OR ([NDATE] = @Original_NDATE)) AND (" +
                "(@IsNull_SRTDATE = 1 AND [SRTDATE] IS NULL) OR ([SRTDATE] = @Original_SRTDATE)) " +
                "AND ((@IsNull_DSURE = 1 AND [DSURE] IS NULL) OR ([DSURE] = @Original_DSURE)) AND" +
                " ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsN" +
                "ull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_SRNAMESORT " +
                "= 1 AND [SRNAMESORT] IS NULL) OR ([SRNAMESORT] = @Original_SRNAMESORT)) AND ((@I" +
                "sNull_GVNAMESORT = 1 AND [GVNAMESORT] IS NULL) OR ([GVNAMESORT] = @Original_GVNA" +
                "MESORT)) AND ((@IsNull_STYLEID = 1 AND [STYLEID] IS NULL) OR ([STYLEID] = @Origi" +
                "nal_STYLEID)) AND ((@IsNull_SURID = 1 AND [SURID] IS NULL) OR ([SURID] = @Origin" +
                "al_SURID)) AND ((@IsNull_GIVID = 1 AND [GIVID] IS NULL) OR ([GIVID] = @Original_" +
                "GIVID)) AND ((@IsNull_SRNAMEDISP = 1 AND [SRNAMEDISP] IS NULL) OR ([SRNAMEDISP] " +
                "= @Original_SRNAMEDISP)) AND ((@IsNull_SNDXSURN = 1 AND [SNDXSURN] IS NULL) OR (" +
                "[SNDXSURN] = @Original_SNDXSURN)) AND ((@IsNull_SNDXGVN = 1 AND [SNDXGVN] IS NUL" +
                "L) OR ([SNDXGVN] = @Original_SNDXGVN)) AND ((@IsNull_PBIRTH = 1 AND [PBIRTH] IS " +
                "NULL) OR ([PBIRTH] = @Original_PBIRTH)) AND ((@IsNull_PDEATH = 1 AND [PDEATH] IS" +
                " NULL) OR ([PDEATH] = @Original_PDEATH)) AND ((@IsNull_REFER = 1 AND [REFER] IS " +
                "NULL) OR ([REFER] = @Original_REFER)) AND ((@IsNull_PREF_ID = 1 AND [PREF_ID] IS" +
                " NULL) OR ([PREF_ID] = @Original_PREF_ID)) AND ((@IsNull_LAST_EDIT = 1 AND [LAST" +
                "_EDIT] IS NULL) OR ([LAST_EDIT] = @Original_LAST_EDIT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NPER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NPER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NPER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NPER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ALTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ALTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ALTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ALTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INFS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INFS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFS";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "INFS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INFG";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INFG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFG";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "INFG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NNOTE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "NNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SENTENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRTDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRTDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRNAMESORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GVNAMESORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GVNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GVNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GVNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STYLEID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SURID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SURID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SURID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SURID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GIVID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GIVID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GIVID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GIVID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRNAMEDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SNDXSURN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SNDXSURN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SNDXSURN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNDXSURN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SNDXGVN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SNDXGVN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SNDXGVN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNDXGVN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PBIRTH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PBIRTH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PDEATH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PDEATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PDEATH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PDEATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PREF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PREF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PREF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PREF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LAST_EDIT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LAST_EDIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LAST_EDIT";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "LAST_EDIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[Name] ([NPER], [ALTYPE], [ISPICKED], [INFS], [INFG], [PRIMARY], [NSURE], [FSURE], [NNOTE], [RECNO], [SENTENCE], [NDATE], [SRTDATE], [DSURE], [DSID], [TT], [SRNAMESORT], [GVNAMESORT], [STYLEID], [SURID], [GIVID], [SRNAMEDISP], [SNDXSURN], [SNDXGVN], [PBIRTH], [PDEATH], [REFER], [PREF_ID], [LAST_EDIT]) VALUES (@NPER, @ALTYPE, @ISPICKED, @INFS, @INFG, @PRIMARY, @NSURE, @FSURE, @NNOTE, @RECNO, @SENTENCE, @NDATE, @SRTDATE, @DSURE, @DSID, @TT, @SRNAMESORT, @GVNAMESORT, @STYLEID, @SURID, @GIVID, @SRNAMEDISP, @SNDXSURN, @SNDXGVN, @PBIRTH, @PDEATH, @REFER, @PREF_ID, @LAST_EDIT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NPER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NPER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ALTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ALTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFS";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "INFS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFG";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "INFG";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "NNOTE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SENTENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRTDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRTDATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRNAMESORT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GVNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GVNAMESORT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SURID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SURID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GIVID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GIVID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRNAMEDISP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SNDXSURN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNDXSURN";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SNDXGVN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNDXGVN";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PBIRTH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PBIRTH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PDEATH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PDEATH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PREF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PREF_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LAST_EDIT";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "LAST_EDIT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[Name] SET [NPER] = @NPER, [ALTYPE] = @ALTY" +
                "PE, [ISPICKED] = @ISPICKED, [INFS] = @INFS, [INFG] = @INFG, [PRIMARY] = @PRIMARY" +
                ", [NSURE] = @NSURE, [FSURE] = @FSURE, [NNOTE] = @NNOTE, [RECNO] = @RECNO, [SENTE" +
                "NCE] = @SENTENCE, [NDATE] = @NDATE, [SRTDATE] = @SRTDATE, [DSURE] = @DSURE, [DSI" +
                "D] = @DSID, [TT] = @TT, [SRNAMESORT] = @SRNAMESORT, [GVNAMESORT] = @GVNAMESORT, " +
                "[STYLEID] = @STYLEID, [SURID] = @SURID, [GIVID] = @GIVID, [SRNAMEDISP] = @SRNAME" +
                "DISP, [SNDXSURN] = @SNDXSURN, [SNDXGVN] = @SNDXGVN, [PBIRTH] = @PBIRTH, [PDEATH]" +
                " = @PDEATH, [REFER] = @REFER, [PREF_ID] = @PREF_ID, [LAST_EDIT] = @LAST_EDIT WHE" +
                "RE (((@IsNull_NPER = 1 AND [NPER] IS NULL) OR ([NPER] = @Original_NPER)) AND ((@" +
                "IsNull_ALTYPE = 1 AND [ALTYPE] IS NULL) OR ([ALTYPE] = @Original_ALTYPE)) AND ((" +
                "@IsNull_ISPICKED = 1 AND [ISPICKED] IS NULL) OR ([ISPICKED] = @Original_ISPICKED" +
                ")) AND ((@IsNull_INFS = 1 AND [INFS] IS NULL) OR ([INFS] = @Original_INFS)) AND " +
                "((@IsNull_INFG = 1 AND [INFG] IS NULL) OR ([INFG] = @Original_INFG)) AND ((@IsNu" +
                "ll_PRIMARY = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @Original_PRIMARY)) AND ((" +
                "@IsNull_NSURE = 1 AND [NSURE] IS NULL) OR ([NSURE] = @Original_NSURE)) AND ((@Is" +
                "Null_FSURE = 1 AND [FSURE] IS NULL) OR ([FSURE] = @Original_FSURE)) AND ((@IsNul" +
                "l_NNOTE = 1 AND [NNOTE] IS NULL) OR ([NNOTE] = @Original_NNOTE)) AND ([RECNO] = " +
                "@Original_RECNO) AND ((@IsNull_SENTENCE = 1 AND [SENTENCE] IS NULL) OR ([SENTENC" +
                "E] = @Original_SENTENCE)) AND ((@IsNull_NDATE = 1 AND [NDATE] IS NULL) OR ([NDAT" +
                "E] = @Original_NDATE)) AND ((@IsNull_SRTDATE = 1 AND [SRTDATE] IS NULL) OR ([SRT" +
                "DATE] = @Original_SRTDATE)) AND ((@IsNull_DSURE = 1 AND [DSURE] IS NULL) OR ([DS" +
                "URE] = @Original_DSURE)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] =" +
                " @Original_DSID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT" +
                ")) AND ((@IsNull_SRNAMESORT = 1 AND [SRNAMESORT] IS NULL) OR ([SRNAMESORT] = @Or" +
                "iginal_SRNAMESORT)) AND ((@IsNull_GVNAMESORT = 1 AND [GVNAMESORT] IS NULL) OR ([" +
                "GVNAMESORT] = @Original_GVNAMESORT)) AND ((@IsNull_STYLEID = 1 AND [STYLEID] IS " +
                "NULL) OR ([STYLEID] = @Original_STYLEID)) AND ((@IsNull_SURID = 1 AND [SURID] IS" +
                " NULL) OR ([SURID] = @Original_SURID)) AND ((@IsNull_GIVID = 1 AND [GIVID] IS NU" +
                "LL) OR ([GIVID] = @Original_GIVID)) AND ((@IsNull_SRNAMEDISP = 1 AND [SRNAMEDISP" +
                "] IS NULL) OR ([SRNAMEDISP] = @Original_SRNAMEDISP)) AND ((@IsNull_SNDXSURN = 1 " +
                "AND [SNDXSURN] IS NULL) OR ([SNDXSURN] = @Original_SNDXSURN)) AND ((@IsNull_SNDX" +
                "GVN = 1 AND [SNDXGVN] IS NULL) OR ([SNDXGVN] = @Original_SNDXGVN)) AND ((@IsNull" +
                "_PBIRTH = 1 AND [PBIRTH] IS NULL) OR ([PBIRTH] = @Original_PBIRTH)) AND ((@IsNul" +
                "l_PDEATH = 1 AND [PDEATH] IS NULL) OR ([PDEATH] = @Original_PDEATH)) AND ((@IsNu" +
                "ll_REFER = 1 AND [REFER] IS NULL) OR ([REFER] = @Original_REFER)) AND ((@IsNull_" +
                "PREF_ID = 1 AND [PREF_ID] IS NULL) OR ([PREF_ID] = @Original_PREF_ID)) AND ((@Is" +
                "Null_LAST_EDIT = 1 AND [LAST_EDIT] IS NULL) OR ([LAST_EDIT] = @Original_LAST_EDI" +
                "T)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NPER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NPER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ALTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ALTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFS";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "INFS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFG";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "INFG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "NNOTE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SENTENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRTDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRTDATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRNAMESORT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GVNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GVNAMESORT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SURID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SURID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GIVID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GIVID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRNAMEDISP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SNDXSURN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNDXSURN";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SNDXGVN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNDXGVN";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PBIRTH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PBIRTH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PDEATH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PDEATH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PREF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PREF_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LAST_EDIT";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "LAST_EDIT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NPER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NPER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NPER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NPER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ALTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ALTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ALTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ALTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INFS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INFS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFS";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "INFS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INFG";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INFG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFG";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "INFG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NNOTE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "NNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SENTENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRTDATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRTDATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRTDATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRNAMESORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GVNAMESORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GVNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GVNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GVNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STYLEID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SURID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SURID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SURID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SURID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GIVID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GIVID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GIVID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "GIVID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRNAMEDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SRNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SNDXSURN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SNDXSURN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SNDXSURN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNDXSURN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SNDXGVN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SNDXGVN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SNDXGVN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNDXGVN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PBIRTH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PBIRTH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PDEATH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PDEATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PDEATH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PDEATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PREF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PREF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PREF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PREF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LAST_EDIT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LAST_EDIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LAST_EDIT";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "LAST_EDIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [NPER], [ALTYPE], [ISPICKED], [INFS], [INFG], [PRIMARY], [NSURE], [FSURE], [NNOTE], [RECNO], [SENTENCE], [NDATE], [SRTDATE], [DSURE], [DSID], [TT], [SRNAMESORT], [GVNAMESORT], [STYLEID], [SURID], [GIVID], [SRNAMEDISP], [SNDXSURN], [SNDXGVN], [PBIRTH], [PDEATH], [REFER], [PREF_ID], [LAST_EDIT] FROM [Name]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.NameDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.NameDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.NameDataTable dataTable = new tmgDataSet.NameDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.NameDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Name");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    global::System.Nullable<long> Original_NPER, 
                    global::System.Nullable<long> Original_ALTYPE, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    global::System.Nullable<bool> Original_INFS, 
                    global::System.Nullable<bool> Original_INFG, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    string Original_NSURE, 
                    string Original_FSURE, 
                    string Original_NNOTE, 
                    long Original_RECNO, 
                    string Original_SENTENCE, 
                    string Original_NDATE, 
                    string Original_SRTDATE, 
                    string Original_DSURE, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_TT, 
                    string Original_SRNAMESORT, 
                    string Original_GVNAMESORT, 
                    global::System.Nullable<long> Original_STYLEID, 
                    global::System.Nullable<long> Original_SURID, 
                    global::System.Nullable<long> Original_GIVID, 
                    string Original_SRNAMEDISP, 
                    string Original_SNDXSURN, 
                    string Original_SNDXGVN, 
                    string Original_PBIRTH, 
                    string Original_PDEATH, 
                    string Original_REFER, 
                    global::System.Nullable<long> Original_PREF_ID, 
                    global::System.Nullable<global::System.DateTime> Original_LAST_EDIT) {
            if ((Original_NPER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_NPER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_ALTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_ALTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_INFS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_INFS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_INFG.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_INFG.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_NSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_NSURE));
            }
            if ((Original_FSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_FSURE));
            }
            if ((Original_NNOTE == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_NNOTE));
            }
            this.Adapter.DeleteCommand.Parameters[18].Value = ((long)(Original_RECNO));
            if ((Original_SENTENCE == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_SENTENCE));
            }
            if ((Original_NDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_NDATE));
            }
            if ((Original_SRTDATE == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_SRTDATE));
            }
            if ((Original_DSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_DSURE));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_TT));
            }
            if ((Original_SRNAMESORT == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_SRNAMESORT));
            }
            if ((Original_GVNAMESORT == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_GVNAMESORT));
            }
            if ((Original_STYLEID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((long)(Original_STYLEID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_SURID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((long)(Original_SURID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_GIVID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((long)(Original_GIVID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_SRNAMEDISP == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_SRNAMEDISP));
            }
            if ((Original_SNDXSURN == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_SNDXSURN));
            }
            if ((Original_SNDXGVN == null)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((string)(Original_SNDXGVN));
            }
            if ((Original_PBIRTH == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_PBIRTH));
            }
            if ((Original_PDEATH == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_PDEATH));
            }
            if ((Original_REFER == null)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((string)(Original_REFER));
            }
            if ((Original_PREF_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((long)(Original_PREF_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_LAST_EDIT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((System.DateTime)(Original_LAST_EDIT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<long> NPER, 
                    global::System.Nullable<long> ALTYPE, 
                    global::System.Nullable<bool> ISPICKED, 
                    global::System.Nullable<bool> INFS, 
                    global::System.Nullable<bool> INFG, 
                    global::System.Nullable<bool> PRIMARY, 
                    string NSURE, 
                    string FSURE, 
                    string NNOTE, 
                    long RECNO, 
                    string SENTENCE, 
                    string NDATE, 
                    string SRTDATE, 
                    string DSURE, 
                    global::System.Nullable<long> DSID, 
                    string TT, 
                    string SRNAMESORT, 
                    string GVNAMESORT, 
                    global::System.Nullable<long> STYLEID, 
                    global::System.Nullable<long> SURID, 
                    global::System.Nullable<long> GIVID, 
                    string SRNAMEDISP, 
                    string SNDXSURN, 
                    string SNDXGVN, 
                    string PBIRTH, 
                    string PDEATH, 
                    string REFER, 
                    global::System.Nullable<long> PREF_ID, 
                    global::System.Nullable<global::System.DateTime> LAST_EDIT) {
            if ((NPER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(NPER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ALTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(ALTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((INFS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(INFS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((INFG.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(INFG.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((NSURE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(NSURE));
            }
            if ((FSURE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(FSURE));
            }
            if ((NNOTE == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(NNOTE));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((long)(RECNO));
            if ((SENTENCE == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(SENTENCE));
            }
            if ((NDATE == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(NDATE));
            }
            if ((SRTDATE == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(SRTDATE));
            }
            if ((DSURE == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(DSURE));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(TT));
            }
            if ((SRNAMESORT == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(SRNAMESORT));
            }
            if ((GVNAMESORT == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(GVNAMESORT));
            }
            if ((STYLEID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((long)(STYLEID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((SURID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((long)(SURID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((GIVID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((long)(GIVID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((SRNAMEDISP == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(SRNAMEDISP));
            }
            if ((SNDXSURN == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(SNDXSURN));
            }
            if ((SNDXGVN == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(SNDXGVN));
            }
            if ((PBIRTH == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(PBIRTH));
            }
            if ((PDEATH == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(PDEATH));
            }
            if ((REFER == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(REFER));
            }
            if ((PREF_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((long)(PREF_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((LAST_EDIT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((System.DateTime)(LAST_EDIT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> NPER, 
                    global::System.Nullable<long> ALTYPE, 
                    global::System.Nullable<bool> ISPICKED, 
                    global::System.Nullable<bool> INFS, 
                    global::System.Nullable<bool> INFG, 
                    global::System.Nullable<bool> PRIMARY, 
                    string NSURE, 
                    string FSURE, 
                    string NNOTE, 
                    long RECNO, 
                    string SENTENCE, 
                    string NDATE, 
                    string SRTDATE, 
                    string DSURE, 
                    global::System.Nullable<long> DSID, 
                    string TT, 
                    string SRNAMESORT, 
                    string GVNAMESORT, 
                    global::System.Nullable<long> STYLEID, 
                    global::System.Nullable<long> SURID, 
                    global::System.Nullable<long> GIVID, 
                    string SRNAMEDISP, 
                    string SNDXSURN, 
                    string SNDXGVN, 
                    string PBIRTH, 
                    string PDEATH, 
                    string REFER, 
                    global::System.Nullable<long> PREF_ID, 
                    global::System.Nullable<global::System.DateTime> LAST_EDIT, 
                    global::System.Nullable<long> Original_NPER, 
                    global::System.Nullable<long> Original_ALTYPE, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    global::System.Nullable<bool> Original_INFS, 
                    global::System.Nullable<bool> Original_INFG, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    string Original_NSURE, 
                    string Original_FSURE, 
                    string Original_NNOTE, 
                    long Original_RECNO, 
                    string Original_SENTENCE, 
                    string Original_NDATE, 
                    string Original_SRTDATE, 
                    string Original_DSURE, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_TT, 
                    string Original_SRNAMESORT, 
                    string Original_GVNAMESORT, 
                    global::System.Nullable<long> Original_STYLEID, 
                    global::System.Nullable<long> Original_SURID, 
                    global::System.Nullable<long> Original_GIVID, 
                    string Original_SRNAMEDISP, 
                    string Original_SNDXSURN, 
                    string Original_SNDXGVN, 
                    string Original_PBIRTH, 
                    string Original_PDEATH, 
                    string Original_REFER, 
                    global::System.Nullable<long> Original_PREF_ID, 
                    global::System.Nullable<global::System.DateTime> Original_LAST_EDIT) {
            if ((NPER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(NPER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ALTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(ALTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((INFS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(INFS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((INFG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(INFG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((NSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(NSURE));
            }
            if ((FSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(FSURE));
            }
            if ((NNOTE == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(NNOTE));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(RECNO));
            if ((SENTENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(SENTENCE));
            }
            if ((NDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(NDATE));
            }
            if ((SRTDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(SRTDATE));
            }
            if ((DSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(DSURE));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(TT));
            }
            if ((SRNAMESORT == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(SRNAMESORT));
            }
            if ((GVNAMESORT == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(GVNAMESORT));
            }
            if ((STYLEID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(STYLEID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((SURID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(SURID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((GIVID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((long)(GIVID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((SRNAMEDISP == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(SRNAMEDISP));
            }
            if ((SNDXSURN == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(SNDXSURN));
            }
            if ((SNDXGVN == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(SNDXGVN));
            }
            if ((PBIRTH == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(PBIRTH));
            }
            if ((PDEATH == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(PDEATH));
            }
            if ((REFER == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(REFER));
            }
            if ((PREF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(PREF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((LAST_EDIT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(LAST_EDIT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_NPER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((long)(Original_NPER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_ALTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((long)(Original_ALTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_INFS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((bool)(Original_INFS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_INFG.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((bool)(Original_INFG.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_NSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_NSURE));
            }
            if ((Original_FSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_FSURE));
            }
            if ((Original_NNOTE == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_NNOTE));
            }
            this.Adapter.UpdateCommand.Parameters[47].Value = ((long)(Original_RECNO));
            if ((Original_SENTENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(Original_SENTENCE));
            }
            if ((Original_NDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((string)(Original_NDATE));
            }
            if ((Original_SRTDATE == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_SRTDATE));
            }
            if ((Original_DSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_DSURE));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((string)(Original_TT));
            }
            if ((Original_SRNAMESORT == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_SRNAMESORT));
            }
            if ((Original_GVNAMESORT == null)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((string)(Original_GVNAMESORT));
            }
            if ((Original_STYLEID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((long)(Original_STYLEID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            if ((Original_SURID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((long)(Original_SURID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            if ((Original_GIVID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((long)(Original_GIVID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_SRNAMEDISP == null)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((string)(Original_SRNAMEDISP));
            }
            if ((Original_SNDXSURN == null)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((string)(Original_SNDXSURN));
            }
            if ((Original_SNDXGVN == null)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((string)(Original_SNDXGVN));
            }
            if ((Original_PBIRTH == null)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((string)(Original_PBIRTH));
            }
            if ((Original_PDEATH == null)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((string)(Original_PDEATH));
            }
            if ((Original_REFER == null)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((string)(Original_REFER));
            }
            if ((Original_PREF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((long)(Original_PREF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((Original_LAST_EDIT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((System.DateTime)(Original_LAST_EDIT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> NPER, 
                    global::System.Nullable<long> ALTYPE, 
                    global::System.Nullable<bool> ISPICKED, 
                    global::System.Nullable<bool> INFS, 
                    global::System.Nullable<bool> INFG, 
                    global::System.Nullable<bool> PRIMARY, 
                    string NSURE, 
                    string FSURE, 
                    string NNOTE, 
                    string SENTENCE, 
                    string NDATE, 
                    string SRTDATE, 
                    string DSURE, 
                    global::System.Nullable<long> DSID, 
                    string TT, 
                    string SRNAMESORT, 
                    string GVNAMESORT, 
                    global::System.Nullable<long> STYLEID, 
                    global::System.Nullable<long> SURID, 
                    global::System.Nullable<long> GIVID, 
                    string SRNAMEDISP, 
                    string SNDXSURN, 
                    string SNDXGVN, 
                    string PBIRTH, 
                    string PDEATH, 
                    string REFER, 
                    global::System.Nullable<long> PREF_ID, 
                    global::System.Nullable<global::System.DateTime> LAST_EDIT, 
                    global::System.Nullable<long> Original_NPER, 
                    global::System.Nullable<long> Original_ALTYPE, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    global::System.Nullable<bool> Original_INFS, 
                    global::System.Nullable<bool> Original_INFG, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    string Original_NSURE, 
                    string Original_FSURE, 
                    string Original_NNOTE, 
                    long Original_RECNO, 
                    string Original_SENTENCE, 
                    string Original_NDATE, 
                    string Original_SRTDATE, 
                    string Original_DSURE, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_TT, 
                    string Original_SRNAMESORT, 
                    string Original_GVNAMESORT, 
                    global::System.Nullable<long> Original_STYLEID, 
                    global::System.Nullable<long> Original_SURID, 
                    global::System.Nullable<long> Original_GIVID, 
                    string Original_SRNAMEDISP, 
                    string Original_SNDXSURN, 
                    string Original_SNDXGVN, 
                    string Original_PBIRTH, 
                    string Original_PDEATH, 
                    string Original_REFER, 
                    global::System.Nullable<long> Original_PREF_ID, 
                    global::System.Nullable<global::System.DateTime> Original_LAST_EDIT) {
            return this.Update(NPER, ALTYPE, ISPICKED, INFS, INFG, PRIMARY, NSURE, FSURE, NNOTE, Original_RECNO, SENTENCE, NDATE, SRTDATE, DSURE, DSID, TT, SRNAMESORT, GVNAMESORT, STYLEID, SURID, GIVID, SRNAMEDISP, SNDXSURN, SNDXGVN, PBIRTH, PDEATH, REFER, PREF_ID, LAST_EDIT, Original_NPER, Original_ALTYPE, Original_ISPICKED, Original_INFS, Original_INFG, Original_PRIMARY, Original_NSURE, Original_FSURE, Original_NNOTE, Original_RECNO, Original_SENTENCE, Original_NDATE, Original_SRTDATE, Original_DSURE, Original_DSID, Original_TT, Original_SRNAMESORT, Original_GVNAMESORT, Original_STYLEID, Original_SURID, Original_GIVID, Original_SRNAMEDISP, Original_SNDXSURN, Original_SNDXGVN, Original_PBIRTH, Original_PDEATH, Original_REFER, Original_PREF_ID, Original_LAST_EDIT);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NameDictionaryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public NameDictionaryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NameDictionary";
            tableMapping.ColumnMappings.Add("UID", "UID");
            tableMapping.ColumnMappings.Add("VALUE", "VALUE");
            tableMapping.ColumnMappings.Add("SDX", "SDX");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("NameDictionary_ID", "NameDictionary_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[NameDictionary] WHERE (((@IsNull_UID = 1 AND [UID] IS NULL) OR ([UID] = @Original_UID)) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_SDX = 1 AND [SDX] IS NULL) OR ([SDX] = @Original_SDX)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ([NameDictionary_ID] = @Original_NameDictionary_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SDX";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SDX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SDX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NameDictionary_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NameDictionary_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[NameDictionary] ([UID], [VALUE], [SDX" +
                "], [TT]) VALUES (@UID, @VALUE, @SDX, @TT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SDX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDX";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[NameDictionary] SET [UID] = @UID, [VALUE] = @VALUE, [SDX] = @SDX, [TT] = @TT WHERE (((@IsNull_UID = 1 AND [UID] IS NULL) OR ([UID] = @Original_UID)) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_SDX = 1 AND [SDX] IS NULL) OR ([SDX] = @Original_SDX)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ([NameDictionary_ID] = @Original_NameDictionary_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SDX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDX";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SDX";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SDX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SDX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NameDictionary_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NameDictionary_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [UID], [VALUE], [SDX], [TT], [NameDictionary_ID] FROM [NameDictionary]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.NameDictionaryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.NameDictionaryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.NameDictionaryDataTable dataTable = new tmgDataSet.NameDictionaryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.NameDictionaryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "NameDictionary");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_UID, string Original_VALUE, string Original_SDX, string Original_TT, long Original_NameDictionary_ID) {
            if ((Original_UID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_UID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUE == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_VALUE));
            }
            if ((Original_SDX == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_SDX));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_TT));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_NameDictionary_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> UID, string VALUE, string SDX, string TT) {
            if ((UID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(UID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((VALUE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(VALUE));
            }
            if ((SDX == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SDX));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> UID, string VALUE, string SDX, string TT, global::System.Nullable<long> Original_UID, string Original_VALUE, string Original_SDX, string Original_TT, long Original_NameDictionary_ID) {
            if ((UID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(UID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((VALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(VALUE));
            }
            if ((SDX == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SDX));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TT));
            }
            if ((Original_UID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_UID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_VALUE));
            }
            if ((Original_SDX == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_SDX));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_TT));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_NameDictionary_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NamePartTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public NamePartTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NamePartType";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("VALUE", "VALUE");
            tableMapping.ColumnMappings.Add("SYSTEM", "SYSTEM");
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("SHORTVALUE", "SHORTVALUE");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("TEMPLATE", "TEMPLATE");
            tableMapping.ColumnMappings.Add("NamePartType_ID", "NamePartType_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[NamePartType] WHERE (((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_SYSTEM = 1 AND [SYSTEM] IS NULL) OR ([SYSTEM] = @Original_SYSTEM)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_SHORTVALUE = 1 AND [SHORTVALUE] IS NULL) OR ([SHORTVALUE] = @Original_SHORTVALUE)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_TEMPLATE = 1 AND [TEMPLATE] IS NULL) OR ([TEMPLATE] = @Original_TEMPLATE)) AND ([NamePartType_ID] = @Original_NamePartType_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SYSTEM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SYSTEM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SYSTEM";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "SYSTEM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SHORTVALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SHORTVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SHORTVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SHORTVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TEMPLATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TEMPLATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TEMPLATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TEMPLATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NamePartType_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NamePartType_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[NamePartType] ([ID], [VALUE], [SYSTEM" +
                "], [TYPE], [SHORTVALUE], [TT], [DSID], [TEMPLATE]) VALUES (@ID, @VALUE, @SYSTEM," +
                " @TYPE, @SHORTVALUE, @TT, @DSID, @TEMPLATE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "VALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SYSTEM";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "SYSTEM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SHORTVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SHORTVALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TEMPLATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TEMPLATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[NamePartType] SET [ID] = @ID, [VALUE] = @VALUE, [SYSTEM] = @SYSTEM, [TYPE] = @TYPE, [SHORTVALUE] = @SHORTVALUE, [TT] = @TT, [DSID] = @DSID, [TEMPLATE] = @TEMPLATE WHERE (((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_SYSTEM = 1 AND [SYSTEM] IS NULL) OR ([SYSTEM] = @Original_SYSTEM)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_SHORTVALUE = 1 AND [SHORTVALUE] IS NULL) OR ([SHORTVALUE] = @Original_SHORTVALUE)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_TEMPLATE = 1 AND [TEMPLATE] IS NULL) OR ([TEMPLATE] = @Original_TEMPLATE)) AND ([NamePartType_ID] = @Original_NamePartType_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "VALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SYSTEM";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "SYSTEM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SHORTVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SHORTVALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TEMPLATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TEMPLATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SYSTEM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SYSTEM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SYSTEM";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "SYSTEM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SHORTVALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SHORTVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SHORTVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SHORTVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TEMPLATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TEMPLATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TEMPLATE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TEMPLATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NamePartType_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NamePartType_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [VALUE], [SYSTEM], [TYPE], [SHORTVALUE], [TT], [DSID], [TEMPLATE], [" +
                "NamePartType_ID] FROM [NamePartType]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.NamePartTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.NamePartTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.NamePartTypeDataTable dataTable = new tmgDataSet.NamePartTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.NamePartTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "NamePartType");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_ID, string Original_VALUE, global::System.Nullable<bool> Original_SYSTEM, global::System.Nullable<long> Original_TYPE, string Original_SHORTVALUE, string Original_TT, global::System.Nullable<long> Original_DSID, string Original_TEMPLATE, long Original_NamePartType_ID) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUE == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_VALUE));
            }
            if ((Original_SYSTEM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_SYSTEM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_TYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_SHORTVALUE == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_SHORTVALUE));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_TEMPLATE == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_TEMPLATE));
            }
            this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_NamePartType_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> ID, string VALUE, global::System.Nullable<bool> SYSTEM, global::System.Nullable<long> TYPE, string SHORTVALUE, string TT, global::System.Nullable<long> DSID, string TEMPLATE) {
            if ((ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((VALUE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(VALUE));
            }
            if ((SYSTEM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(SYSTEM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SHORTVALUE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SHORTVALUE));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((TEMPLATE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(TEMPLATE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> ID, 
                    string VALUE, 
                    global::System.Nullable<bool> SYSTEM, 
                    global::System.Nullable<long> TYPE, 
                    string SHORTVALUE, 
                    string TT, 
                    global::System.Nullable<long> DSID, 
                    string TEMPLATE, 
                    global::System.Nullable<long> Original_ID, 
                    string Original_VALUE, 
                    global::System.Nullable<bool> Original_SYSTEM, 
                    global::System.Nullable<long> Original_TYPE, 
                    string Original_SHORTVALUE, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_TEMPLATE, 
                    long Original_NamePartType_ID) {
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((VALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(VALUE));
            }
            if ((SYSTEM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(SYSTEM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SHORTVALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SHORTVALUE));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((TEMPLATE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(TEMPLATE));
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_VALUE));
            }
            if ((Original_SYSTEM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_SYSTEM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_SHORTVALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_SHORTVALUE));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_TEMPLATE == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_TEMPLATE));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(Original_NamePartType_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class NamePartValueTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public NamePartValueTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "NamePartValue";
            tableMapping.ColumnMappings.Add("RECNO", "RECNO");
            tableMapping.ColumnMappings.Add("UID", "UID");
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("NamePartValue_ID", "NamePartValue_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[NamePartValue] WHERE (((@IsNull_RECNO = 1 AND [RECNO] IS NULL) OR ([RECNO] = @Original_RECNO)) AND ((@IsNull_UID = 1 AND [UID] IS NULL) OR ([UID] = @Original_UID)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([NamePartValue_ID] = @Original_NamePartValue_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RECNO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NamePartValue_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NamePartValue_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[NamePartValue] ([RECNO], [UID], [TYPE" +
                "], [ID], [TT], [DSID]) VALUES (@RECNO, @UID, @TYPE, @ID, @TT, @DSID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[NamePartValue] SET [RECNO] = @RECNO, [UID] = @UID, [TYPE] = @TYPE, [ID] = @ID, [TT] = @TT, [DSID] = @DSID WHERE (((@IsNull_RECNO = 1 AND [RECNO] IS NULL) OR ([RECNO] = @Original_RECNO)) AND ((@IsNull_UID = 1 AND [UID] IS NULL) OR ([UID] = @Original_UID)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([NamePartValue_ID] = @Original_NamePartValue_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RECNO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NamePartValue_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "NamePartValue_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [RECNO], [UID], [TYPE], [ID], [TT], [DSID], [NamePartValue_ID] FROM [NameP" +
                "artValue]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.NamePartValueDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.NamePartValueDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.NamePartValueDataTable dataTable = new tmgDataSet.NamePartValueDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.NamePartValueDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "NamePartValue");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_RECNO, global::System.Nullable<long> Original_UID, global::System.Nullable<long> Original_TYPE, global::System.Nullable<long> Original_ID, string Original_TT, global::System.Nullable<long> Original_DSID, long Original_NamePartValue_ID) {
            if ((Original_RECNO.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_RECNO.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_UID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_UID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_TYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_NamePartValue_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> RECNO, global::System.Nullable<long> UID, global::System.Nullable<long> TYPE, global::System.Nullable<long> ID, string TT, global::System.Nullable<long> DSID) {
            if ((RECNO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(RECNO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((UID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(UID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> RECNO, global::System.Nullable<long> UID, global::System.Nullable<long> TYPE, global::System.Nullable<long> ID, string TT, global::System.Nullable<long> DSID, global::System.Nullable<long> Original_RECNO, global::System.Nullable<long> Original_UID, global::System.Nullable<long> Original_TYPE, global::System.Nullable<long> Original_ID, string Original_TT, global::System.Nullable<long> Original_DSID, long Original_NamePartValue_ID) {
            if ((RECNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(RECNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((UID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(UID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_RECNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_RECNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_UID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_UID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_NamePartValue_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ParentChildRelationshipTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ParentChildRelationshipTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ParentChildRelationship";
            tableMapping.ColumnMappings.Add("PRIMARY", "PRIMARY");
            tableMapping.ColumnMappings.Add("CHILD", "CHILD");
            tableMapping.ColumnMappings.Add("PARENT", "PARENT");
            tableMapping.ColumnMappings.Add("PTYPE", "PTYPE");
            tableMapping.ColumnMappings.Add("PNOTE", "PNOTE");
            tableMapping.ColumnMappings.Add("PSURE", "PSURE");
            tableMapping.ColumnMappings.Add("FSURE", "FSURE");
            tableMapping.ColumnMappings.Add("RECNO", "RECNO");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[ParentChildRelationship] WHERE (((@IsNull_PRIMARY = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @Original_PRIMARY)) AND ((@IsNull_CHILD = 1 AND [CHILD] IS NULL) OR ([CHILD] = @Original_CHILD)) AND ((@IsNull_PARENT = 1 AND [PARENT] IS NULL) OR ([PARENT] = @Original_PARENT)) AND ((@IsNull_PTYPE = 1 AND [PTYPE] IS NULL) OR ([PTYPE] = @Original_PTYPE)) AND ((@IsNull_PNOTE = 1 AND [PNOTE] IS NULL) OR ([PNOTE] = @Original_PNOTE)) AND ((@IsNull_PSURE = 1 AND [PSURE] IS NULL) OR ([PSURE] = @Original_PSURE)) AND ((@IsNull_FSURE = 1 AND [FSURE] IS NULL) OR ([FSURE] = @Original_FSURE)) AND ([RECNO] = @Original_RECNO) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CHILD";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CHILD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CHILD";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CHILD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PARENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PARENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PARENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PARENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PNOTE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[ParentChildRelationship] ([PRIMARY], " +
                "[CHILD], [PARENT], [PTYPE], [PNOTE], [PSURE], [FSURE], [RECNO], [TT], [DSID]) VA" +
                "LUES (@PRIMARY, @CHILD, @PARENT, @PTYPE, @PNOTE, @PSURE, @FSURE, @RECNO, @TT, @D" +
                "SID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CHILD";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CHILD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PARENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PARENT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PNOTE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[ParentChildRelationship] SET [PRIMARY] = @PRIMARY, [CHILD] = @CHILD, [PARENT] = @PARENT, [PTYPE] = @PTYPE, [PNOTE] = @PNOTE, [PSURE] = @PSURE, [FSURE] = @FSURE, [RECNO] = @RECNO, [TT] = @TT, [DSID] = @DSID WHERE (((@IsNull_PRIMARY = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @Original_PRIMARY)) AND ((@IsNull_CHILD = 1 AND [CHILD] IS NULL) OR ([CHILD] = @Original_CHILD)) AND ((@IsNull_PARENT = 1 AND [PARENT] IS NULL) OR ([PARENT] = @Original_PARENT)) AND ((@IsNull_PTYPE = 1 AND [PTYPE] IS NULL) OR ([PTYPE] = @Original_PTYPE)) AND ((@IsNull_PNOTE = 1 AND [PNOTE] IS NULL) OR ([PNOTE] = @Original_PNOTE)) AND ((@IsNull_PSURE = 1 AND [PSURE] IS NULL) OR ([PSURE] = @Original_PSURE)) AND ((@IsNull_FSURE = 1 AND [FSURE] IS NULL) OR ([FSURE] = @Original_FSURE)) AND ([RECNO] = @Original_RECNO) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CHILD";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CHILD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PARENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PARENT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PNOTE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CHILD";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CHILD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CHILD";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CHILD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PARENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PARENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PARENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PARENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PNOTE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [PRIMARY], [CHILD], [PARENT], [PTYPE], [PNOTE], [PSURE], [FSURE], [RECNO]," +
                " [TT], [DSID] FROM [ParentChildRelationship]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.ParentChildRelationshipDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.ParentChildRelationshipDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.ParentChildRelationshipDataTable dataTable = new tmgDataSet.ParentChildRelationshipDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.ParentChildRelationshipDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ParentChildRelationship");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<bool> Original_PRIMARY, global::System.Nullable<long> Original_CHILD, global::System.Nullable<long> Original_PARENT, global::System.Nullable<long> Original_PTYPE, string Original_PNOTE, string Original_PSURE, string Original_FSURE, long Original_RECNO, string Original_TT, global::System.Nullable<long> Original_DSID) {
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_CHILD.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_CHILD.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_PARENT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_PARENT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_PTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_PTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_PNOTE == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_PNOTE));
            }
            if ((Original_PSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_PSURE));
            }
            if ((Original_FSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_FSURE));
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_RECNO));
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<bool> PRIMARY, global::System.Nullable<long> CHILD, global::System.Nullable<long> PARENT, global::System.Nullable<long> PTYPE, string PNOTE, string PSURE, string FSURE, long RECNO, string TT, global::System.Nullable<long> DSID) {
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((CHILD.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(CHILD.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PARENT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(PARENT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(PTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PNOTE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PNOTE));
            }
            if ((PSURE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(PSURE));
            }
            if ((FSURE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FSURE));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((long)(RECNO));
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<bool> PRIMARY, 
                    global::System.Nullable<long> CHILD, 
                    global::System.Nullable<long> PARENT, 
                    global::System.Nullable<long> PTYPE, 
                    string PNOTE, 
                    string PSURE, 
                    string FSURE, 
                    long RECNO, 
                    string TT, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    global::System.Nullable<long> Original_CHILD, 
                    global::System.Nullable<long> Original_PARENT, 
                    global::System.Nullable<long> Original_PTYPE, 
                    string Original_PNOTE, 
                    string Original_PSURE, 
                    string Original_FSURE, 
                    long Original_RECNO, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_DSID) {
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((CHILD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(CHILD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((PARENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(PARENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(PTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((PNOTE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PNOTE));
            }
            if ((PSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(PSURE));
            }
            if ((FSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FSURE));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(RECNO));
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_CHILD.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_CHILD.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_PARENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_PARENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_PTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_PTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_PNOTE == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_PNOTE));
            }
            if ((Original_PSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_PSURE));
            }
            if ((Original_FSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_FSURE));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(Original_RECNO));
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<bool> PRIMARY, 
                    global::System.Nullable<long> CHILD, 
                    global::System.Nullable<long> PARENT, 
                    global::System.Nullable<long> PTYPE, 
                    string PNOTE, 
                    string PSURE, 
                    string FSURE, 
                    string TT, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    global::System.Nullable<long> Original_CHILD, 
                    global::System.Nullable<long> Original_PARENT, 
                    global::System.Nullable<long> Original_PTYPE, 
                    string Original_PNOTE, 
                    string Original_PSURE, 
                    string Original_FSURE, 
                    long Original_RECNO, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_DSID) {
            return this.Update(PRIMARY, CHILD, PARENT, PTYPE, PNOTE, PSURE, FSURE, Original_RECNO, TT, DSID, Original_PRIMARY, Original_CHILD, Original_PARENT, Original_PTYPE, Original_PNOTE, Original_PSURE, Original_FSURE, Original_RECNO, Original_TT, Original_DSID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class personTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public personTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "person";
            tableMapping.ColumnMappings.Add("PER_NO", "PER_NO");
            tableMapping.ColumnMappings.Add("FATHER", "FATHER");
            tableMapping.ColumnMappings.Add("MOTHER", "MOTHER");
            tableMapping.ColumnMappings.Add("LAST_EDIT", "LAST_EDIT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("REF_ID", "REF_ID");
            tableMapping.ColumnMappings.Add("REFERENCE", "REFERENCE");
            tableMapping.ColumnMappings.Add("SPOULAST", "SPOULAST");
            tableMapping.ColumnMappings.Add("SCBUFF", "SCBUFF");
            tableMapping.ColumnMappings.Add("PBIRTH", "PBIRTH");
            tableMapping.ColumnMappings.Add("PDEATH", "PDEATH");
            tableMapping.ColumnMappings.Add("SEX", "SEX");
            tableMapping.ColumnMappings.Add("LIVING", "LIVING");
            tableMapping.ColumnMappings.Add("BIRTHORDER", "BIRTHORDER");
            tableMapping.ColumnMappings.Add("MULTIBIRTH", "MULTIBIRTH");
            tableMapping.ColumnMappings.Add("ADOPTED", "ADOPTED");
            tableMapping.ColumnMappings.Add("ANCE_INT", "ANCE_INT");
            tableMapping.ColumnMappings.Add("DESC_INT", "DESC_INT");
            tableMapping.ColumnMappings.Add("RELATE", "RELATE");
            tableMapping.ColumnMappings.Add("RELATEFO", "RELATEFO");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("FLAG1", "FLAG1");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[person] WHERE (([PER_NO] = @Original_PER_NO) AND ((@IsNull_FATHER = 1 AND [FATHER] IS NULL) OR ([FATHER] = @Original_FATHER)) AND ((@IsNull_MOTHER = 1 AND [MOTHER] IS NULL) OR ([MOTHER] = @Original_MOTHER)) AND ([LAST_EDIT] = @Original_LAST_EDIT) AND ([DSID] = @Original_DSID) AND ((@IsNull_REF_ID = 1 AND [REF_ID] IS NULL) OR ([REF_ID] = @Original_REF_ID)) AND ((@IsNull_REFERENCE = 1 AND [REFERENCE] IS NULL) OR ([REFERENCE] = @Original_REFERENCE)) AND ((@IsNull_SPOULAST = 1 AND [SPOULAST] IS NULL) OR ([SPOULAST] = @Original_SPOULAST)) AND ((@IsNull_SCBUFF = 1 AND [SCBUFF] IS NULL) OR ([SCBUFF] = @Original_SCBUFF)) AND ((@IsNull_PBIRTH = 1 AND [PBIRTH] IS NULL) OR ([PBIRTH] = @Original_PBIRTH)) AND ((@IsNull_PDEATH = 1 AND [PDEATH] IS NULL) OR ([PDEATH] = @Original_PDEATH)) AND ([SEX] = @Original_SEX) AND ([LIVING] = @Original_LIVING) AND ([BIRTHORDER] = @Original_BIRTHORDER) AND ([MULTIBIRTH] = @Original_MULTIBIRTH) AND ([ADOPTED] = @Original_ADOPTED) AND ([ANCE_INT] = @Original_ANCE_INT) AND ([DESC_INT] = @Original_DESC_INT) AND ((@IsNull_RELATE = 1 AND [RELATE] IS NULL) OR ([RELATE] = @Original_RELATE)) AND ((@IsNull_RELATEFO = 1 AND [RELATEFO] IS NULL) OR ([RELATEFO] = @Original_RELATEFO)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_FLAG1 = 1 AND [FLAG1] IS NULL) OR ([FLAG1] = @Original_FLAG1)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER_NO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER_NO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FATHER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FATHER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FATHER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FATHER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MOTHER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MOTHER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MOTHER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MOTHER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LAST_EDIT";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "LAST_EDIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFERENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPOULAST";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPOULAST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPOULAST";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPOULAST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SCBUFF";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SCBUFF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SCBUFF";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SCBUFF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PBIRTH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PBIRTH";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PDEATH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PDEATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PDEATH";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PDEATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SEX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SEX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LIVING";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "LIVING";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BIRTHORDER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "BIRTHORDER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MULTIBIRTH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "MULTIBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ADOPTED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ADOPTED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ANCE_INT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ANCE_INT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESC_INT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DESC_INT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RELATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RELATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RELATE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RELATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RELATEFO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RELATEFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RELATEFO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RELATEFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FLAG1";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FLAG1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAG1";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAG1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[person] ([PER_NO], [FATHER], [MOTHER], [LAST_EDIT], [DSID], [REF_ID], [REFERENCE], [SPOULAST], [SCBUFF], [PBIRTH], [PDEATH], [SEX], [LIVING], [BIRTHORDER], [MULTIBIRTH], [ADOPTED], [ANCE_INT], [DESC_INT], [RELATE], [RELATEFO], [TT], [FLAG1]) VALUES (@PER_NO, @FATHER, @MOTHER, @LAST_EDIT, @DSID, @REF_ID, @REFERENCE, @SPOULAST, @SCBUFF, @PBIRTH, @PDEATH, @SEX, @LIVING, @BIRTHORDER, @MULTIBIRTH, @ADOPTED, @ANCE_INT, @DESC_INT, @RELATE, @RELATEFO, @TT, @FLAG1)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER_NO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER_NO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FATHER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FATHER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MOTHER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MOTHER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LAST_EDIT";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "LAST_EDIT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REFERENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPOULAST";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPOULAST";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SCBUFF";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SCBUFF";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PBIRTH";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PBIRTH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PDEATH";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PDEATH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SEX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SEX";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LIVING";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "LIVING";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BIRTHORDER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "BIRTHORDER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MULTIBIRTH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "MULTIBIRTH";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ADOPTED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ADOPTED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ANCE_INT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ANCE_INT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESC_INT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DESC_INT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RELATE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RELATE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RELATEFO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RELATEFO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAG1";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAG1";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[person] SET [PER_NO] = @PER_NO, [FATHER] =" +
                " @FATHER, [MOTHER] = @MOTHER, [LAST_EDIT] = @LAST_EDIT, [DSID] = @DSID, [REF_ID]" +
                " = @REF_ID, [REFERENCE] = @REFERENCE, [SPOULAST] = @SPOULAST, [SCBUFF] = @SCBUFF" +
                ", [PBIRTH] = @PBIRTH, [PDEATH] = @PDEATH, [SEX] = @SEX, [LIVING] = @LIVING, [BIR" +
                "THORDER] = @BIRTHORDER, [MULTIBIRTH] = @MULTIBIRTH, [ADOPTED] = @ADOPTED, [ANCE_" +
                "INT] = @ANCE_INT, [DESC_INT] = @DESC_INT, [RELATE] = @RELATE, [RELATEFO] = @RELA" +
                "TEFO, [TT] = @TT, [FLAG1] = @FLAG1 WHERE (([PER_NO] = @Original_PER_NO) AND ((@I" +
                "sNull_FATHER = 1 AND [FATHER] IS NULL) OR ([FATHER] = @Original_FATHER)) AND ((@" +
                "IsNull_MOTHER = 1 AND [MOTHER] IS NULL) OR ([MOTHER] = @Original_MOTHER)) AND ([" +
                "LAST_EDIT] = @Original_LAST_EDIT) AND ([DSID] = @Original_DSID) AND ((@IsNull_RE" +
                "F_ID = 1 AND [REF_ID] IS NULL) OR ([REF_ID] = @Original_REF_ID)) AND ((@IsNull_R" +
                "EFERENCE = 1 AND [REFERENCE] IS NULL) OR ([REFERENCE] = @Original_REFERENCE)) AN" +
                "D ((@IsNull_SPOULAST = 1 AND [SPOULAST] IS NULL) OR ([SPOULAST] = @Original_SPOU" +
                "LAST)) AND ((@IsNull_SCBUFF = 1 AND [SCBUFF] IS NULL) OR ([SCBUFF] = @Original_S" +
                "CBUFF)) AND ((@IsNull_PBIRTH = 1 AND [PBIRTH] IS NULL) OR ([PBIRTH] = @Original_" +
                "PBIRTH)) AND ((@IsNull_PDEATH = 1 AND [PDEATH] IS NULL) OR ([PDEATH] = @Original" +
                "_PDEATH)) AND ([SEX] = @Original_SEX) AND ([LIVING] = @Original_LIVING) AND ([BI" +
                "RTHORDER] = @Original_BIRTHORDER) AND ([MULTIBIRTH] = @Original_MULTIBIRTH) AND " +
                "([ADOPTED] = @Original_ADOPTED) AND ([ANCE_INT] = @Original_ANCE_INT) AND ([DESC" +
                "_INT] = @Original_DESC_INT) AND ((@IsNull_RELATE = 1 AND [RELATE] IS NULL) OR ([" +
                "RELATE] = @Original_RELATE)) AND ((@IsNull_RELATEFO = 1 AND [RELATEFO] IS NULL) " +
                "OR ([RELATEFO] = @Original_RELATEFO)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR " +
                "([TT] = @Original_TT)) AND ((@IsNull_FLAG1 = 1 AND [FLAG1] IS NULL) OR ([FLAG1] " +
                "= @Original_FLAG1)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PER_NO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER_NO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FATHER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FATHER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MOTHER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MOTHER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LAST_EDIT";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "LAST_EDIT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REFERENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPOULAST";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPOULAST";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SCBUFF";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SCBUFF";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PBIRTH";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PBIRTH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PDEATH";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PDEATH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SEX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SEX";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LIVING";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "LIVING";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BIRTHORDER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "BIRTHORDER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MULTIBIRTH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "MULTIBIRTH";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ADOPTED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ADOPTED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ANCE_INT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ANCE_INT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESC_INT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DESC_INT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RELATE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RELATE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RELATEFO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RELATEFO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FLAG1";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAG1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PER_NO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PER_NO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FATHER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FATHER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FATHER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "FATHER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MOTHER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MOTHER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MOTHER";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MOTHER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LAST_EDIT";
            param.DbType = global::System.Data.DbType.DateTime;
            param.DbType = global::System.Data.DbType.DateTime;
            param.SourceColumn = "LAST_EDIT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFERENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPOULAST";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPOULAST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPOULAST";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPOULAST";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SCBUFF";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SCBUFF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SCBUFF";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SCBUFF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PBIRTH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PBIRTH";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PDEATH";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PDEATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PDEATH";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PDEATH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SEX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SEX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LIVING";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "LIVING";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BIRTHORDER";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "BIRTHORDER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MULTIBIRTH";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "MULTIBIRTH";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ADOPTED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ADOPTED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ANCE_INT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ANCE_INT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESC_INT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DESC_INT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RELATE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RELATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RELATE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RELATE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RELATEFO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RELATEFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RELATEFO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RELATEFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FLAG1";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FLAG1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FLAG1";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "FLAG1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [PER_NO], [FATHER], [MOTHER], [LAST_EDIT], [DSID], [REF_ID], [REFERENCE], " +
                "[SPOULAST], [SCBUFF], [PBIRTH], [PDEATH], [SEX], [LIVING], [BIRTHORDER], [MULTIB" +
                "IRTH], [ADOPTED], [ANCE_INT], [DESC_INT], [RELATE], [RELATEFO], [TT], [FLAG1] FR" +
                "OM [person]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.personDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.personDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.personDataTable dataTable = new tmgDataSet.personDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.personDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "person");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_PER_NO, 
                    global::System.Nullable<long> Original_FATHER, 
                    global::System.Nullable<long> Original_MOTHER, 
                    System.DateTime Original_LAST_EDIT, 
                    long Original_DSID, 
                    global::System.Nullable<long> Original_REF_ID, 
                    string Original_REFERENCE, 
                    global::System.Nullable<long> Original_SPOULAST, 
                    string Original_SCBUFF, 
                    string Original_PBIRTH, 
                    string Original_PDEATH, 
                    string Original_SEX, 
                    string Original_LIVING, 
                    string Original_BIRTHORDER, 
                    string Original_MULTIBIRTH, 
                    string Original_ADOPTED, 
                    string Original_ANCE_INT, 
                    string Original_DESC_INT, 
                    global::System.Nullable<long> Original_RELATE, 
                    global::System.Nullable<long> Original_RELATEFO, 
                    string Original_TT, 
                    string Original_FLAG1) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_PER_NO));
            if ((Original_FATHER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_FATHER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_MOTHER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_MOTHER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_LAST_EDIT));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_DSID));
            if ((Original_REF_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_REF_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_REFERENCE == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_REFERENCE));
            }
            if ((Original_SPOULAST.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_SPOULAST.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_SCBUFF == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_SCBUFF));
            }
            if ((Original_PBIRTH == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_PBIRTH));
            }
            if ((Original_PDEATH == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_PDEATH));
            }
            if ((Original_SEX == null)) {
                throw new global::System.ArgumentNullException("Original_SEX");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_SEX));
            }
            if ((Original_LIVING == null)) {
                throw new global::System.ArgumentNullException("Original_LIVING");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_LIVING));
            }
            if ((Original_BIRTHORDER == null)) {
                throw new global::System.ArgumentNullException("Original_BIRTHORDER");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_BIRTHORDER));
            }
            if ((Original_MULTIBIRTH == null)) {
                throw new global::System.ArgumentNullException("Original_MULTIBIRTH");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_MULTIBIRTH));
            }
            if ((Original_ADOPTED == null)) {
                throw new global::System.ArgumentNullException("Original_ADOPTED");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_ADOPTED));
            }
            if ((Original_ANCE_INT == null)) {
                throw new global::System.ArgumentNullException("Original_ANCE_INT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_ANCE_INT));
            }
            if ((Original_DESC_INT == null)) {
                throw new global::System.ArgumentNullException("Original_DESC_INT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_DESC_INT));
            }
            if ((Original_RELATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((long)(Original_RELATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_RELATEFO.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((long)(Original_RELATEFO.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((string)(Original_TT));
            }
            if ((Original_FLAG1 == null)) {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[33].Value = ((string)(Original_FLAG1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long PER_NO, 
                    global::System.Nullable<long> FATHER, 
                    global::System.Nullable<long> MOTHER, 
                    System.DateTime LAST_EDIT, 
                    long DSID, 
                    global::System.Nullable<long> REF_ID, 
                    string REFERENCE, 
                    global::System.Nullable<long> SPOULAST, 
                    string SCBUFF, 
                    string PBIRTH, 
                    string PDEATH, 
                    string SEX, 
                    string LIVING, 
                    string BIRTHORDER, 
                    string MULTIBIRTH, 
                    string ADOPTED, 
                    string ANCE_INT, 
                    string DESC_INT, 
                    global::System.Nullable<long> RELATE, 
                    global::System.Nullable<long> RELATEFO, 
                    string TT, 
                    string FLAG1) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(PER_NO));
            if ((FATHER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(FATHER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MOTHER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(MOTHER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(LAST_EDIT));
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(DSID));
            if ((REF_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(REF_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((REFERENCE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(REFERENCE));
            }
            if ((SPOULAST.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(SPOULAST.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SCBUFF == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(SCBUFF));
            }
            if ((PBIRTH == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PBIRTH));
            }
            if ((PDEATH == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(PDEATH));
            }
            if ((SEX == null)) {
                throw new global::System.ArgumentNullException("SEX");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(SEX));
            }
            if ((LIVING == null)) {
                throw new global::System.ArgumentNullException("LIVING");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(LIVING));
            }
            if ((BIRTHORDER == null)) {
                throw new global::System.ArgumentNullException("BIRTHORDER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(BIRTHORDER));
            }
            if ((MULTIBIRTH == null)) {
                throw new global::System.ArgumentNullException("MULTIBIRTH");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(MULTIBIRTH));
            }
            if ((ADOPTED == null)) {
                throw new global::System.ArgumentNullException("ADOPTED");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(ADOPTED));
            }
            if ((ANCE_INT == null)) {
                throw new global::System.ArgumentNullException("ANCE_INT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(ANCE_INT));
            }
            if ((DESC_INT == null)) {
                throw new global::System.ArgumentNullException("DESC_INT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(DESC_INT));
            }
            if ((RELATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((long)(RELATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((RELATEFO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((long)(RELATEFO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(TT));
            }
            if ((FLAG1 == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(FLAG1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long PER_NO, 
                    global::System.Nullable<long> FATHER, 
                    global::System.Nullable<long> MOTHER, 
                    System.DateTime LAST_EDIT, 
                    long DSID, 
                    global::System.Nullable<long> REF_ID, 
                    string REFERENCE, 
                    global::System.Nullable<long> SPOULAST, 
                    string SCBUFF, 
                    string PBIRTH, 
                    string PDEATH, 
                    string SEX, 
                    string LIVING, 
                    string BIRTHORDER, 
                    string MULTIBIRTH, 
                    string ADOPTED, 
                    string ANCE_INT, 
                    string DESC_INT, 
                    global::System.Nullable<long> RELATE, 
                    global::System.Nullable<long> RELATEFO, 
                    string TT, 
                    string FLAG1, 
                    long Original_PER_NO, 
                    global::System.Nullable<long> Original_FATHER, 
                    global::System.Nullable<long> Original_MOTHER, 
                    System.DateTime Original_LAST_EDIT, 
                    long Original_DSID, 
                    global::System.Nullable<long> Original_REF_ID, 
                    string Original_REFERENCE, 
                    global::System.Nullable<long> Original_SPOULAST, 
                    string Original_SCBUFF, 
                    string Original_PBIRTH, 
                    string Original_PDEATH, 
                    string Original_SEX, 
                    string Original_LIVING, 
                    string Original_BIRTHORDER, 
                    string Original_MULTIBIRTH, 
                    string Original_ADOPTED, 
                    string Original_ANCE_INT, 
                    string Original_DESC_INT, 
                    global::System.Nullable<long> Original_RELATE, 
                    global::System.Nullable<long> Original_RELATEFO, 
                    string Original_TT, 
                    string Original_FLAG1) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(PER_NO));
            if ((FATHER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(FATHER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MOTHER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(MOTHER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(LAST_EDIT));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(DSID));
            if ((REF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(REF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((REFERENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(REFERENCE));
            }
            if ((SPOULAST.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(SPOULAST.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SCBUFF == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(SCBUFF));
            }
            if ((PBIRTH == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(PBIRTH));
            }
            if ((PDEATH == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(PDEATH));
            }
            if ((SEX == null)) {
                throw new global::System.ArgumentNullException("SEX");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(SEX));
            }
            if ((LIVING == null)) {
                throw new global::System.ArgumentNullException("LIVING");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(LIVING));
            }
            if ((BIRTHORDER == null)) {
                throw new global::System.ArgumentNullException("BIRTHORDER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(BIRTHORDER));
            }
            if ((MULTIBIRTH == null)) {
                throw new global::System.ArgumentNullException("MULTIBIRTH");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(MULTIBIRTH));
            }
            if ((ADOPTED == null)) {
                throw new global::System.ArgumentNullException("ADOPTED");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(ADOPTED));
            }
            if ((ANCE_INT == null)) {
                throw new global::System.ArgumentNullException("ANCE_INT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(ANCE_INT));
            }
            if ((DESC_INT == null)) {
                throw new global::System.ArgumentNullException("DESC_INT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(DESC_INT));
            }
            if ((RELATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(RELATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((RELATEFO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(RELATEFO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(TT));
            }
            if ((FLAG1 == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(FLAG1));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(Original_PER_NO));
            if ((Original_FATHER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(Original_FATHER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_MOTHER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((long)(Original_MOTHER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(Original_LAST_EDIT));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(Original_DSID));
            if ((Original_REF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((long)(Original_REF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_REFERENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_REFERENCE));
            }
            if ((Original_SPOULAST.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((long)(Original_SPOULAST.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_SCBUFF == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_SCBUFF));
            }
            if ((Original_PBIRTH == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_PBIRTH));
            }
            if ((Original_PDEATH == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_PDEATH));
            }
            if ((Original_SEX == null)) {
                throw new global::System.ArgumentNullException("Original_SEX");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_SEX));
            }
            if ((Original_LIVING == null)) {
                throw new global::System.ArgumentNullException("Original_LIVING");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_LIVING));
            }
            if ((Original_BIRTHORDER == null)) {
                throw new global::System.ArgumentNullException("Original_BIRTHORDER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((string)(Original_BIRTHORDER));
            }
            if ((Original_MULTIBIRTH == null)) {
                throw new global::System.ArgumentNullException("Original_MULTIBIRTH");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_MULTIBIRTH));
            }
            if ((Original_ADOPTED == null)) {
                throw new global::System.ArgumentNullException("Original_ADOPTED");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_ADOPTED));
            }
            if ((Original_ANCE_INT == null)) {
                throw new global::System.ArgumentNullException("Original_ANCE_INT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_ANCE_INT));
            }
            if ((Original_DESC_INT == null)) {
                throw new global::System.ArgumentNullException("Original_DESC_INT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_DESC_INT));
            }
            if ((Original_RELATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((long)(Original_RELATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_RELATEFO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((long)(Original_RELATEFO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((string)(Original_TT));
            }
            if ((Original_FLAG1 == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_FLAG1));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> FATHER, 
                    global::System.Nullable<long> MOTHER, 
                    System.DateTime LAST_EDIT, 
                    long DSID, 
                    global::System.Nullable<long> REF_ID, 
                    string REFERENCE, 
                    global::System.Nullable<long> SPOULAST, 
                    string SCBUFF, 
                    string PBIRTH, 
                    string PDEATH, 
                    string SEX, 
                    string LIVING, 
                    string BIRTHORDER, 
                    string MULTIBIRTH, 
                    string ADOPTED, 
                    string ANCE_INT, 
                    string DESC_INT, 
                    global::System.Nullable<long> RELATE, 
                    global::System.Nullable<long> RELATEFO, 
                    string TT, 
                    string FLAG1, 
                    long Original_PER_NO, 
                    global::System.Nullable<long> Original_FATHER, 
                    global::System.Nullable<long> Original_MOTHER, 
                    System.DateTime Original_LAST_EDIT, 
                    long Original_DSID, 
                    global::System.Nullable<long> Original_REF_ID, 
                    string Original_REFERENCE, 
                    global::System.Nullable<long> Original_SPOULAST, 
                    string Original_SCBUFF, 
                    string Original_PBIRTH, 
                    string Original_PDEATH, 
                    string Original_SEX, 
                    string Original_LIVING, 
                    string Original_BIRTHORDER, 
                    string Original_MULTIBIRTH, 
                    string Original_ADOPTED, 
                    string Original_ANCE_INT, 
                    string Original_DESC_INT, 
                    global::System.Nullable<long> Original_RELATE, 
                    global::System.Nullable<long> Original_RELATEFO, 
                    string Original_TT, 
                    string Original_FLAG1) {
            return this.Update(Original_PER_NO, FATHER, MOTHER, LAST_EDIT, DSID, REF_ID, REFERENCE, SPOULAST, SCBUFF, PBIRTH, PDEATH, SEX, LIVING, BIRTHORDER, MULTIBIRTH, ADOPTED, ANCE_INT, DESC_INT, RELATE, RELATEFO, TT, FLAG1, Original_PER_NO, Original_FATHER, Original_MOTHER, Original_LAST_EDIT, Original_DSID, Original_REF_ID, Original_REFERENCE, Original_SPOULAST, Original_SCBUFF, Original_PBIRTH, Original_PDEATH, Original_SEX, Original_LIVING, Original_BIRTHORDER, Original_MULTIBIRTH, Original_ADOPTED, Original_ANCE_INT, Original_DESC_INT, Original_RELATE, Original_RELATEFO, Original_TT, Original_FLAG1);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlaceDictionaryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlaceDictionaryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PlaceDictionary";
            tableMapping.ColumnMappings.Add("UID", "UID");
            tableMapping.ColumnMappings.Add("VALUE", "VALUE");
            tableMapping.ColumnMappings.Add("SDX", "SDX");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("PlaceDictionary_ID", "PlaceDictionary_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[PlaceDictionary] WHERE (((@IsNull_UID = 1 AND [UID] IS NULL) OR ([UID] = @Original_UID)) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_SDX = 1 AND [SDX] IS NULL) OR ([SDX] = @Original_SDX)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ([PlaceDictionary_ID] = @Original_PlaceDictionary_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SDX";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SDX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SDX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PlaceDictionary_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PlaceDictionary_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[PlaceDictionary] ([UID], [VALUE], [SD" +
                "X], [TT]) VALUES (@UID, @VALUE, @SDX, @TT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SDX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDX";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[PlaceDictionary] SET [UID] = @UID, [VALUE] = @VALUE, [SDX] = @SDX, [TT] = @TT WHERE (((@IsNull_UID = 1 AND [UID] IS NULL) OR ([UID] = @Original_UID)) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_SDX = 1 AND [SDX] IS NULL) OR ([SDX] = @Original_SDX)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ([PlaceDictionary_ID] = @Original_PlaceDictionary_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SDX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDX";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SDX";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SDX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SDX";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDX";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PlaceDictionary_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PlaceDictionary_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [UID], [VALUE], [SDX], [TT], [PlaceDictionary_ID] FROM [PlaceDictionary]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.PlaceDictionaryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.PlaceDictionaryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.PlaceDictionaryDataTable dataTable = new tmgDataSet.PlaceDictionaryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.PlaceDictionaryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PlaceDictionary");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_UID, string Original_VALUE, string Original_SDX, string Original_TT, long Original_PlaceDictionary_ID) {
            if ((Original_UID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_UID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUE == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_VALUE));
            }
            if ((Original_SDX == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_SDX));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_TT));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_PlaceDictionary_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> UID, string VALUE, string SDX, string TT) {
            if ((UID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(UID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((VALUE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(VALUE));
            }
            if ((SDX == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SDX));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> UID, string VALUE, string SDX, string TT, global::System.Nullable<long> Original_UID, string Original_VALUE, string Original_SDX, string Original_TT, long Original_PlaceDictionary_ID) {
            if ((UID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(UID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((VALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(VALUE));
            }
            if ((SDX == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SDX));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TT));
            }
            if ((Original_UID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_UID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_VALUE));
            }
            if ((Original_SDX == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_SDX));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_TT));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_PlaceDictionary_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlaceFileTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlaceFileTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PlaceFile";
            tableMapping.ColumnMappings.Add("RECNO", "RECNO");
            tableMapping.ColumnMappings.Add("STYLEID", "STYLEID");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("STARTYEAR", "STARTYEAR");
            tableMapping.ColumnMappings.Add("ENDYEAR", "ENDYEAR");
            tableMapping.ColumnMappings.Add("COMMENT", "COMMENT");
            tableMapping.ColumnMappings.Add("SHORTPLACE", "SHORTPLACE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[PlaceFile] WHERE (([RECNO] = @Original_RECNO) AND ((@IsNull_STYLEID = 1 AND [STYLEID] IS NULL) OR ([STYLEID] = @Original_STYLEID)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_STARTYEAR = 1 AND [STARTYEAR] IS NULL) OR ([STARTYEAR] = @Original_STARTYEAR)) AND ((@IsNull_ENDYEAR = 1 AND [ENDYEAR] IS NULL) OR ([ENDYEAR] = @Original_ENDYEAR)) AND ((@IsNull_COMMENT = 1 AND [COMMENT] IS NULL) OR ([COMMENT] = @Original_COMMENT)) AND ((@IsNull_SHORTPLACE = 1 AND [SHORTPLACE] IS NULL) OR ([SHORTPLACE] = @Original_SHORTPLACE)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STYLEID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STARTYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STARTYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STARTYEAR";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STARTYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ENDYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ENDYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ENDYEAR";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ENDYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMMENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMMENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMMENT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SHORTPLACE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SHORTPLACE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SHORTPLACE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SHORTPLACE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[PlaceFile] ([RECNO], [STYLEID], [DSID" +
                "], [TT], [STARTYEAR], [ENDYEAR], [COMMENT], [SHORTPLACE]) VALUES (@RECNO, @STYLE" +
                "ID, @DSID, @TT, @STARTYEAR, @ENDYEAR, @COMMENT, @SHORTPLACE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STARTYEAR";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STARTYEAR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ENDYEAR";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ENDYEAR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMMENT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SHORTPLACE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SHORTPLACE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[PlaceFile] SET [RECNO] = @RECNO, [STYLEID] = @STYLEID, [DSID] = @DSID, [TT] = @TT, [STARTYEAR] = @STARTYEAR, [ENDYEAR] = @ENDYEAR, [COMMENT] = @COMMENT, [SHORTPLACE] = @SHORTPLACE WHERE (([RECNO] = @Original_RECNO) AND ((@IsNull_STYLEID = 1 AND [STYLEID] IS NULL) OR ([STYLEID] = @Original_STYLEID)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_STARTYEAR = 1 AND [STARTYEAR] IS NULL) OR ([STARTYEAR] = @Original_STARTYEAR)) AND ((@IsNull_ENDYEAR = 1 AND [ENDYEAR] IS NULL) OR ([ENDYEAR] = @Original_ENDYEAR)) AND ((@IsNull_COMMENT = 1 AND [COMMENT] IS NULL) OR ([COMMENT] = @Original_COMMENT)) AND ((@IsNull_SHORTPLACE = 1 AND [SHORTPLACE] IS NULL) OR ([SHORTPLACE] = @Original_SHORTPLACE)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STARTYEAR";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STARTYEAR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ENDYEAR";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ENDYEAR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMMENT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SHORTPLACE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SHORTPLACE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STYLEID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STARTYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STARTYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STARTYEAR";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STARTYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ENDYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ENDYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ENDYEAR";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ENDYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMMENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMMENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMMENT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SHORTPLACE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SHORTPLACE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SHORTPLACE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SHORTPLACE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [RECNO], [STYLEID], [DSID], [TT], [STARTYEAR], [ENDYEAR], [COMMENT], [SHOR" +
                "TPLACE] FROM [PlaceFile]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.PlaceFileDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.PlaceFileDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.PlaceFileDataTable dataTable = new tmgDataSet.PlaceFileDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.PlaceFileDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PlaceFile");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_RECNO, global::System.Nullable<long> Original_STYLEID, global::System.Nullable<long> Original_DSID, string Original_TT, string Original_STARTYEAR, string Original_ENDYEAR, string Original_COMMENT, string Original_SHORTPLACE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_RECNO));
            if ((Original_STYLEID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_STYLEID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_TT));
            }
            if ((Original_STARTYEAR == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_STARTYEAR));
            }
            if ((Original_ENDYEAR == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_ENDYEAR));
            }
            if ((Original_COMMENT == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_COMMENT));
            }
            if ((Original_SHORTPLACE == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_SHORTPLACE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long RECNO, global::System.Nullable<long> STYLEID, global::System.Nullable<long> DSID, string TT, string STARTYEAR, string ENDYEAR, string COMMENT, string SHORTPLACE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(RECNO));
            if ((STYLEID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(STYLEID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TT));
            }
            if ((STARTYEAR == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(STARTYEAR));
            }
            if ((ENDYEAR == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ENDYEAR));
            }
            if ((COMMENT == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(COMMENT));
            }
            if ((SHORTPLACE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(SHORTPLACE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long RECNO, 
                    global::System.Nullable<long> STYLEID, 
                    global::System.Nullable<long> DSID, 
                    string TT, 
                    string STARTYEAR, 
                    string ENDYEAR, 
                    string COMMENT, 
                    string SHORTPLACE, 
                    long Original_RECNO, 
                    global::System.Nullable<long> Original_STYLEID, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_TT, 
                    string Original_STARTYEAR, 
                    string Original_ENDYEAR, 
                    string Original_COMMENT, 
                    string Original_SHORTPLACE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(RECNO));
            if ((STYLEID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(STYLEID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TT));
            }
            if ((STARTYEAR == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(STARTYEAR));
            }
            if ((ENDYEAR == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ENDYEAR));
            }
            if ((COMMENT == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(COMMENT));
            }
            if ((SHORTPLACE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(SHORTPLACE));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_RECNO));
            if ((Original_STYLEID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_STYLEID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_TT));
            }
            if ((Original_STARTYEAR == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_STARTYEAR));
            }
            if ((Original_ENDYEAR == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_ENDYEAR));
            }
            if ((Original_COMMENT == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_COMMENT));
            }
            if ((Original_SHORTPLACE == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_SHORTPLACE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> STYLEID, global::System.Nullable<long> DSID, string TT, string STARTYEAR, string ENDYEAR, string COMMENT, string SHORTPLACE, long Original_RECNO, global::System.Nullable<long> Original_STYLEID, global::System.Nullable<long> Original_DSID, string Original_TT, string Original_STARTYEAR, string Original_ENDYEAR, string Original_COMMENT, string Original_SHORTPLACE) {
            return this.Update(Original_RECNO, STYLEID, DSID, TT, STARTYEAR, ENDYEAR, COMMENT, SHORTPLACE, Original_RECNO, Original_STYLEID, Original_DSID, Original_TT, Original_STARTYEAR, Original_ENDYEAR, Original_COMMENT, Original_SHORTPLACE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlacePartTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlacePartTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PlacePartType";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("VALUE", "VALUE");
            tableMapping.ColumnMappings.Add("SYSTEM", "SYSTEM");
            tableMapping.ColumnMappings.Add("SHORTVALUE", "SHORTVALUE");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("PlacePartType_ID", "PlacePartType_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[PlacePartType] WHERE (((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_SYSTEM = 1 AND [SYSTEM] IS NULL) OR ([SYSTEM] = @Original_SYSTEM)) AND ((@IsNull_SHORTVALUE = 1 AND [SHORTVALUE] IS NULL) OR ([SHORTVALUE] = @Original_SHORTVALUE)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([PlacePartType_ID] = @Original_PlacePartType_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SYSTEM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SYSTEM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SYSTEM";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "SYSTEM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SHORTVALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SHORTVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SHORTVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SHORTVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PlacePartType_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PlacePartType_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[PlacePartType] ([ID], [TYPE], [VALUE]" +
                ", [SYSTEM], [SHORTVALUE], [TT], [DSID]) VALUES (@ID, @TYPE, @VALUE, @SYSTEM, @SH" +
                "ORTVALUE, @TT, @DSID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "VALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SYSTEM";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "SYSTEM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SHORTVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SHORTVALUE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[PlacePartType] SET [ID] = @ID, [TYPE] = @TYPE, [VALUE] = @VALUE, [SYSTEM] = @SYSTEM, [SHORTVALUE] = @SHORTVALUE, [TT] = @TT, [DSID] = @DSID WHERE (((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_VALUE = 1 AND [VALUE] IS NULL) OR ([VALUE] = @Original_VALUE)) AND ((@IsNull_SYSTEM = 1 AND [SYSTEM] IS NULL) OR ([SYSTEM] = @Original_SYSTEM)) AND ((@IsNull_SHORTVALUE = 1 AND [SHORTVALUE] IS NULL) OR ([SHORTVALUE] = @Original_SHORTVALUE)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([PlacePartType_ID] = @Original_PlacePartType_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@VALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "VALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SYSTEM";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "SYSTEM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SHORTVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SHORTVALUE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_VALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_VALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "VALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SYSTEM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SYSTEM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SYSTEM";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "SYSTEM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SHORTVALUE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SHORTVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SHORTVALUE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SHORTVALUE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PlacePartType_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PlacePartType_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [ID], [TYPE], [VALUE], [SYSTEM], [SHORTVALUE], [TT], [DSID], [PlacePartTyp" +
                "e_ID] FROM [PlacePartType]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.PlacePartTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.PlacePartTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.PlacePartTypeDataTable dataTable = new tmgDataSet.PlacePartTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.PlacePartTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PlacePartType");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_ID, global::System.Nullable<long> Original_TYPE, string Original_VALUE, global::System.Nullable<bool> Original_SYSTEM, string Original_SHORTVALUE, string Original_TT, global::System.Nullable<long> Original_DSID, long Original_PlacePartType_ID) {
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_TYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUE == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_VALUE));
            }
            if ((Original_SYSTEM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((bool)(Original_SYSTEM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_SHORTVALUE == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_SHORTVALUE));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_PlacePartType_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> ID, global::System.Nullable<long> TYPE, string VALUE, global::System.Nullable<bool> SYSTEM, string SHORTVALUE, string TT, global::System.Nullable<long> DSID) {
            if ((ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((VALUE == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(VALUE));
            }
            if ((SYSTEM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(SYSTEM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SHORTVALUE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SHORTVALUE));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> ID, global::System.Nullable<long> TYPE, string VALUE, global::System.Nullable<bool> SYSTEM, string SHORTVALUE, string TT, global::System.Nullable<long> DSID, global::System.Nullable<long> Original_ID, global::System.Nullable<long> Original_TYPE, string Original_VALUE, global::System.Nullable<bool> Original_SYSTEM, string Original_SHORTVALUE, string Original_TT, global::System.Nullable<long> Original_DSID, long Original_PlacePartType_ID) {
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((VALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(VALUE));
            }
            if ((SYSTEM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(SYSTEM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SHORTVALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SHORTVALUE));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_VALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_VALUE));
            }
            if ((Original_SYSTEM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(Original_SYSTEM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_SHORTVALUE == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_SHORTVALUE));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(Original_PlacePartType_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PlacePartValueTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PlacePartValueTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PlacePartValue";
            tableMapping.ColumnMappings.Add("RECNO", "RECNO");
            tableMapping.ColumnMappings.Add("UID", "UID");
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("PlacePartValue_ID", "PlacePartValue_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[PlacePartValue] WHERE (((@IsNull_RECNO = 1 AND [RECNO] IS NULL) OR ([RECNO] = @Original_RECNO)) AND ((@IsNull_UID = 1 AND [UID] IS NULL) OR ([UID] = @Original_UID)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([PlacePartValue_ID] = @Original_PlacePartValue_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RECNO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PlacePartValue_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PlacePartValue_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[PlacePartValue] ([RECNO], [UID], [TYP" +
                "E], [ID], [TT], [DSID]) VALUES (@RECNO, @UID, @TYPE, @ID, @TT, @DSID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[PlacePartValue] SET [RECNO] = @RECNO, [UID] = @UID, [TYPE] = @TYPE, [ID] = @ID, [TT] = @TT, [DSID] = @DSID WHERE (((@IsNull_RECNO = 1 AND [RECNO] IS NULL) OR ([RECNO] = @Original_RECNO)) AND ((@IsNull_UID = 1 AND [UID] IS NULL) OR ([UID] = @Original_UID)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Original_TYPE)) AND ((@IsNull_ID = 1 AND [ID] IS NULL) OR ([ID] = @Original_ID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ([PlacePartValue_ID] = @Original_PlacePartValue_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RECNO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "UID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PlacePartValue_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "PlacePartValue_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [RECNO], [UID], [TYPE], [ID], [TT], [DSID], [PlacePartValue_ID] FROM [Plac" +
                "ePartValue]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.PlacePartValueDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.PlacePartValueDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.PlacePartValueDataTable dataTable = new tmgDataSet.PlacePartValueDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.PlacePartValueDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PlacePartValue");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_RECNO, global::System.Nullable<long> Original_UID, global::System.Nullable<long> Original_TYPE, global::System.Nullable<long> Original_ID, string Original_TT, global::System.Nullable<long> Original_DSID, long Original_PlacePartValue_ID) {
            if ((Original_RECNO.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_RECNO.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_UID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_UID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_TYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_PlacePartValue_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> RECNO, global::System.Nullable<long> UID, global::System.Nullable<long> TYPE, global::System.Nullable<long> ID, string TT, global::System.Nullable<long> DSID) {
            if ((RECNO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(RECNO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((UID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(UID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> RECNO, global::System.Nullable<long> UID, global::System.Nullable<long> TYPE, global::System.Nullable<long> ID, string TT, global::System.Nullable<long> DSID, global::System.Nullable<long> Original_RECNO, global::System.Nullable<long> Original_UID, global::System.Nullable<long> Original_TYPE, global::System.Nullable<long> Original_ID, string Original_TT, global::System.Nullable<long> Original_DSID, long Original_PlacePartValue_ID) {
            if ((RECNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(RECNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((UID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(UID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_RECNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_RECNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_UID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_UID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_PlacePartValue_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class RepositoryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public RepositoryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Repository";
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("RECNO", "RECNO");
            tableMapping.ColumnMappings.Add("REF_ID", "REF_ID");
            tableMapping.ColumnMappings.Add("ABBREV", "ABBREV");
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS");
            tableMapping.ColumnMappings.Add("RNOTE", "RNOTE");
            tableMapping.ColumnMappings.Add("RPERNO", "RPERNO");
            tableMapping.ColumnMappings.Add("ISPICKED", "ISPICKED");
            tableMapping.ColumnMappings.Add("TT", "TT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[Repository] WHERE (((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_NAME = 1 AND [NAME] IS NULL) OR ([NAME] = @Original_NAME)) AND ([RECNO] = @Original_RECNO) AND ((@IsNull_REF_ID = 1 AND [REF_ID] IS NULL) OR ([REF_ID] = @Original_REF_ID)) AND ((@IsNull_ABBREV = 1 AND [ABBREV] IS NULL) OR ([ABBREV] = @Original_ABBREV)) AND ((@IsNull_ADDRESS = 1 AND [ADDRESS] IS NULL) OR ([ADDRESS] = @Original_ADDRESS)) AND ((@IsNull_RNOTE = 1 AND [RNOTE] IS NULL) OR ([RNOTE] = @Original_RNOTE)) AND ((@IsNull_RPERNO = 1 AND [RPERNO] IS NULL) OR ([RPERNO] = @Original_RPERNO)) AND ((@IsNull_ISPICKED = 1 AND [ISPICKED] IS NULL) OR ([ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ABBREV";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ADDRESS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ADDRESS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ADDRESS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ADDRESS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RNOTE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RPERNO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RPERNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RPERNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RPERNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[Repository] ([DSID], [NAME], [REF_ID]" +
                ", [ABBREV], [ADDRESS], [RNOTE], [RPERNO], [ISPICKED], [TT]) VALUES (@DSID, @NAME" +
                ", @REF_ID, @ABBREV, @ADDRESS, @RNOTE, @RPERNO, @ISPICKED, @TT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "NAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ADDRESS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ADDRESS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RNOTE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RPERNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RPERNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[Repository] SET [DSID] = @DSID, [NAME] = @NAME, [REF_ID] = @REF_ID, [ABBREV] = @ABBREV, [ADDRESS] = @ADDRESS, [RNOTE] = @RNOTE, [RPERNO] = @RPERNO, [ISPICKED] = @ISPICKED, [TT] = @TT WHERE (((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_NAME = 1 AND [NAME] IS NULL) OR ([NAME] = @Original_NAME)) AND ([RECNO] = @Original_RECNO) AND ((@IsNull_REF_ID = 1 AND [REF_ID] IS NULL) OR ([REF_ID] = @Original_REF_ID)) AND ((@IsNull_ABBREV = 1 AND [ABBREV] IS NULL) OR ([ABBREV] = @Original_ABBREV)) AND ((@IsNull_ADDRESS = 1 AND [ADDRESS] IS NULL) OR ([ADDRESS] = @Original_ADDRESS)) AND ((@IsNull_RNOTE = 1 AND [RNOTE] IS NULL) OR ([RNOTE] = @Original_RNOTE)) AND ((@IsNull_RPERNO = 1 AND [RPERNO] IS NULL) OR ([RPERNO] = @Original_RPERNO)) AND ((@IsNull_ISPICKED = 1 AND [ISPICKED] IS NULL) OR ([ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "NAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ADDRESS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ADDRESS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RNOTE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RPERNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RPERNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAME";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ABBREV";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ADDRESS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ADDRESS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ADDRESS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ADDRESS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RNOTE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RPERNO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RPERNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RPERNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RPERNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [DSID], [NAME], [RECNO], [REF_ID], [ABBREV], [ADDRESS], [RNOTE], [RPERNO]," +
                " [ISPICKED], [TT] FROM [Repository]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.RepositoryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.RepositoryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.RepositoryDataTable dataTable = new tmgDataSet.RepositoryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.RepositoryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Repository");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_DSID, string Original_NAME, long Original_RECNO, global::System.Nullable<long> Original_REF_ID, string Original_ABBREV, global::System.Nullable<long> Original_ADDRESS, string Original_RNOTE, global::System.Nullable<long> Original_RPERNO, global::System.Nullable<bool> Original_ISPICKED, string Original_TT) {
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_NAME));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_RECNO));
            if ((Original_REF_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_REF_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_ABBREV == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_ABBREV));
            }
            if ((Original_ADDRESS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_ADDRESS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_RNOTE == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_RNOTE));
            }
            if ((Original_RPERNO.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_RPERNO.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> DSID, string NAME, global::System.Nullable<long> REF_ID, string ABBREV, global::System.Nullable<long> ADDRESS, string RNOTE, global::System.Nullable<long> RPERNO, global::System.Nullable<bool> ISPICKED, string TT) {
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((REF_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(REF_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ABBREV == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ABBREV));
            }
            if ((ADDRESS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(ADDRESS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((RNOTE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(RNOTE));
            }
            if ((RPERNO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(RPERNO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<long> DSID, 
                    string NAME, 
                    global::System.Nullable<long> REF_ID, 
                    string ABBREV, 
                    global::System.Nullable<long> ADDRESS, 
                    string RNOTE, 
                    global::System.Nullable<long> RPERNO, 
                    global::System.Nullable<bool> ISPICKED, 
                    string TT, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_NAME, 
                    long Original_RECNO, 
                    global::System.Nullable<long> Original_REF_ID, 
                    string Original_ABBREV, 
                    global::System.Nullable<long> Original_ADDRESS, 
                    string Original_RNOTE, 
                    global::System.Nullable<long> Original_RPERNO, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    string Original_TT) {
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((REF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(REF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ABBREV == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ABBREV));
            }
            if ((ADDRESS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(ADDRESS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((RNOTE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(RNOTE));
            }
            if ((RPERNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(RPERNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_NAME));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_RECNO));
            if ((Original_REF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_REF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_ABBREV == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_ABBREV));
            }
            if ((Original_ADDRESS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(Original_ADDRESS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_RNOTE == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_RNOTE));
            }
            if ((Original_RPERNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_RPERNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ResearchLogTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ResearchLogTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ResearchLog";
            tableMapping.ColumnMappings.Add("RLTYPE", "RLTYPE");
            tableMapping.ColumnMappings.Add("RLNUM", "RLNUM");
            tableMapping.ColumnMappings.Add("RLPER1", "RLPER1");
            tableMapping.ColumnMappings.Add("RLPER2", "RLPER2");
            tableMapping.ColumnMappings.Add("RLGTYPE", "RLGTYPE");
            tableMapping.ColumnMappings.Add("TASK", "TASK");
            tableMapping.ColumnMappings.Add("RLEDITED", "RLEDITED");
            tableMapping.ColumnMappings.Add("DESIGNED", "DESIGNED");
            tableMapping.ColumnMappings.Add("BEGUN", "BEGUN");
            tableMapping.ColumnMappings.Add("PROGRESS", "PROGRESS");
            tableMapping.ColumnMappings.Add("COMPLETED", "COMPLETED");
            tableMapping.ColumnMappings.Add("PLANNED", "PLANNED");
            tableMapping.ColumnMappings.Add("EXPENSES", "EXPENSES");
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS");
            tableMapping.ColumnMappings.Add("RLNOTE", "RLNOTE");
            tableMapping.ColumnMappings.Add("KEYWORDS", "KEYWORDS");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("ID_PERSON", "ID_PERSON");
            tableMapping.ColumnMappings.Add("ID_EVENT", "ID_EVENT");
            tableMapping.ColumnMappings.Add("ID_SOURCE", "ID_SOURCE");
            tableMapping.ColumnMappings.Add("ID_REPOS", "ID_REPOS");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("REFERENCE", "REFERENCE");
            tableMapping.ColumnMappings.Add("ResearchLog_ID", "ResearchLog_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[ResearchLog] WHERE (((@IsNull_RLTYPE " +
                "= 1 AND [RLTYPE] IS NULL) OR ([RLTYPE] = @Original_RLTYPE)) AND ((@IsNull_RLNUM " +
                "= 1 AND [RLNUM] IS NULL) OR ([RLNUM] = @Original_RLNUM)) AND ((@IsNull_RLPER1 = " +
                "1 AND [RLPER1] IS NULL) OR ([RLPER1] = @Original_RLPER1)) AND ((@IsNull_RLPER2 =" +
                " 1 AND [RLPER2] IS NULL) OR ([RLPER2] = @Original_RLPER2)) AND ((@IsNull_RLGTYPE" +
                " = 1 AND [RLGTYPE] IS NULL) OR ([RLGTYPE] = @Original_RLGTYPE)) AND ((@IsNull_TA" +
                "SK = 1 AND [TASK] IS NULL) OR ([TASK] = @Original_TASK)) AND ((@IsNull_RLEDITED " +
                "= 1 AND [RLEDITED] IS NULL) OR ([RLEDITED] = @Original_RLEDITED)) AND ((@IsNull_" +
                "DESIGNED = 1 AND [DESIGNED] IS NULL) OR ([DESIGNED] = @Original_DESIGNED)) AND (" +
                "(@IsNull_BEGUN = 1 AND [BEGUN] IS NULL) OR ([BEGUN] = @Original_BEGUN)) AND ((@I" +
                "sNull_PROGRESS = 1 AND [PROGRESS] IS NULL) OR ([PROGRESS] = @Original_PROGRESS))" +
                " AND ((@IsNull_COMPLETED = 1 AND [COMPLETED] IS NULL) OR ([COMPLETED] = @Origina" +
                "l_COMPLETED)) AND ((@IsNull_PLANNED = 1 AND [PLANNED] IS NULL) OR ([PLANNED] = @" +
                "Original_PLANNED)) AND ((@IsNull_EXPENSES = 1 AND [EXPENSES] IS NULL) OR ([EXPEN" +
                "SES] = @Original_EXPENSES)) AND ((@IsNull_COMMENTS = 1 AND [COMMENTS] IS NULL) O" +
                "R ([COMMENTS] = @Original_COMMENTS)) AND ((@IsNull_RLNOTE = 1 AND [RLNOTE] IS NU" +
                "LL) OR ([RLNOTE] = @Original_RLNOTE)) AND ((@IsNull_KEYWORDS = 1 AND [KEYWORDS] " +
                "IS NULL) OR ([KEYWORDS] = @Original_KEYWORDS)) AND ((@IsNull_DSID = 1 AND [DSID]" +
                " IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_ID_PERSON = 1 AND [ID_PERS" +
                "ON] IS NULL) OR ([ID_PERSON] = @Original_ID_PERSON)) AND ((@IsNull_ID_EVENT = 1 " +
                "AND [ID_EVENT] IS NULL) OR ([ID_EVENT] = @Original_ID_EVENT)) AND ((@IsNull_ID_S" +
                "OURCE = 1 AND [ID_SOURCE] IS NULL) OR ([ID_SOURCE] = @Original_ID_SOURCE)) AND (" +
                "(@IsNull_ID_REPOS = 1 AND [ID_REPOS] IS NULL) OR ([ID_REPOS] = @Original_ID_REPO" +
                "S)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNu" +
                "ll_REFERENCE = 1 AND [REFERENCE] IS NULL) OR ([REFERENCE] = @Original_REFERENCE)" +
                ") AND ([ResearchLog_ID] = @Original_ResearchLog_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLTYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLPER1";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLPER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLPER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLPER2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLPER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLPER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLGTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLGTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLGTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLGTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TASK";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TASK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TASK";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TASK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLEDITED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLEDITED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLEDITED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLEDITED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DESIGNED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DESIGNED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESIGNED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DESIGNED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BEGUN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BEGUN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BEGUN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "BEGUN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROGRESS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROGRESS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROGRESS";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PROGRESS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMPLETED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMPLETED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMPLETED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "COMPLETED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PLANNED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PLANNED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PLANNED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PLANNED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EXPENSES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EXPENSES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EXPENSES";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "EXPENSES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMMENTS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMMENTS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMMENTS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENTS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLNOTE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RLNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_KEYWORDS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "KEYWORDS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_KEYWORDS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "KEYWORDS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_EVENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_EVENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_EVENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_EVENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_SOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_SOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_REPOS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_REPOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_REPOS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_REPOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFERENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ResearchLog_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ResearchLog_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[ResearchLog] ([RLTYPE], [RLNUM], [RLPER1], [RLPER2], [RLGTYPE], [TASK], [RLEDITED], [DESIGNED], [BEGUN], [PROGRESS], [COMPLETED], [PLANNED], [EXPENSES], [COMMENTS], [RLNOTE], [KEYWORDS], [DSID], [ID_PERSON], [ID_EVENT], [ID_SOURCE], [ID_REPOS], [TT], [REFERENCE]) VALUES (@RLTYPE, @RLNUM, @RLPER1, @RLPER2, @RLGTYPE, @TASK, @RLEDITED, @DESIGNED, @BEGUN, @PROGRESS, @COMPLETED, @PLANNED, @EXPENSES, @COMMENTS, @RLNOTE, @KEYWORDS, @DSID, @ID_PERSON, @ID_EVENT, @ID_SOURCE, @ID_REPOS, @TT, @REFERENCE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLTYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLNUM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLPER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER1";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLPER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLGTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLGTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TASK";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TASK";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLEDITED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLEDITED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESIGNED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DESIGNED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BEGUN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "BEGUN";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROGRESS";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PROGRESS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMPLETED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "COMPLETED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PLANNED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PLANNED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EXPENSES";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "EXPENSES";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMMENTS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENTS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RLNOTE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@KEYWORDS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "KEYWORDS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_EVENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_EVENT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_SOURCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_REPOS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_REPOS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFERENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[ResearchLog] SET [RLTYPE] = @RLTYPE, [RLNU" +
                "M] = @RLNUM, [RLPER1] = @RLPER1, [RLPER2] = @RLPER2, [RLGTYPE] = @RLGTYPE, [TASK" +
                "] = @TASK, [RLEDITED] = @RLEDITED, [DESIGNED] = @DESIGNED, [BEGUN] = @BEGUN, [PR" +
                "OGRESS] = @PROGRESS, [COMPLETED] = @COMPLETED, [PLANNED] = @PLANNED, [EXPENSES] " +
                "= @EXPENSES, [COMMENTS] = @COMMENTS, [RLNOTE] = @RLNOTE, [KEYWORDS] = @KEYWORDS," +
                " [DSID] = @DSID, [ID_PERSON] = @ID_PERSON, [ID_EVENT] = @ID_EVENT, [ID_SOURCE] =" +
                " @ID_SOURCE, [ID_REPOS] = @ID_REPOS, [TT] = @TT, [REFERENCE] = @REFERENCE WHERE " +
                "(((@IsNull_RLTYPE = 1 AND [RLTYPE] IS NULL) OR ([RLTYPE] = @Original_RLTYPE)) AN" +
                "D ((@IsNull_RLNUM = 1 AND [RLNUM] IS NULL) OR ([RLNUM] = @Original_RLNUM)) AND (" +
                "(@IsNull_RLPER1 = 1 AND [RLPER1] IS NULL) OR ([RLPER1] = @Original_RLPER1)) AND " +
                "((@IsNull_RLPER2 = 1 AND [RLPER2] IS NULL) OR ([RLPER2] = @Original_RLPER2)) AND" +
                " ((@IsNull_RLGTYPE = 1 AND [RLGTYPE] IS NULL) OR ([RLGTYPE] = @Original_RLGTYPE)" +
                ") AND ((@IsNull_TASK = 1 AND [TASK] IS NULL) OR ([TASK] = @Original_TASK)) AND (" +
                "(@IsNull_RLEDITED = 1 AND [RLEDITED] IS NULL) OR ([RLEDITED] = @Original_RLEDITE" +
                "D)) AND ((@IsNull_DESIGNED = 1 AND [DESIGNED] IS NULL) OR ([DESIGNED] = @Origina" +
                "l_DESIGNED)) AND ((@IsNull_BEGUN = 1 AND [BEGUN] IS NULL) OR ([BEGUN] = @Origina" +
                "l_BEGUN)) AND ((@IsNull_PROGRESS = 1 AND [PROGRESS] IS NULL) OR ([PROGRESS] = @O" +
                "riginal_PROGRESS)) AND ((@IsNull_COMPLETED = 1 AND [COMPLETED] IS NULL) OR ([COM" +
                "PLETED] = @Original_COMPLETED)) AND ((@IsNull_PLANNED = 1 AND [PLANNED] IS NULL)" +
                " OR ([PLANNED] = @Original_PLANNED)) AND ((@IsNull_EXPENSES = 1 AND [EXPENSES] I" +
                "S NULL) OR ([EXPENSES] = @Original_EXPENSES)) AND ((@IsNull_COMMENTS = 1 AND [CO" +
                "MMENTS] IS NULL) OR ([COMMENTS] = @Original_COMMENTS)) AND ((@IsNull_RLNOTE = 1 " +
                "AND [RLNOTE] IS NULL) OR ([RLNOTE] = @Original_RLNOTE)) AND ((@IsNull_KEYWORDS =" +
                " 1 AND [KEYWORDS] IS NULL) OR ([KEYWORDS] = @Original_KEYWORDS)) AND ((@IsNull_D" +
                "SID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_ID_PERSO" +
                "N = 1 AND [ID_PERSON] IS NULL) OR ([ID_PERSON] = @Original_ID_PERSON)) AND ((@Is" +
                "Null_ID_EVENT = 1 AND [ID_EVENT] IS NULL) OR ([ID_EVENT] = @Original_ID_EVENT)) " +
                "AND ((@IsNull_ID_SOURCE = 1 AND [ID_SOURCE] IS NULL) OR ([ID_SOURCE] = @Original" +
                "_ID_SOURCE)) AND ((@IsNull_ID_REPOS = 1 AND [ID_REPOS] IS NULL) OR ([ID_REPOS] =" +
                " @Original_ID_REPOS)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Origina" +
                "l_TT)) AND ((@IsNull_REFERENCE = 1 AND [REFERENCE] IS NULL) OR ([REFERENCE] = @O" +
                "riginal_REFERENCE)) AND ([ResearchLog_ID] = @Original_ResearchLog_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLTYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLNUM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLPER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER1";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLPER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLGTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLGTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TASK";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TASK";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLEDITED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLEDITED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DESIGNED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DESIGNED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BEGUN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "BEGUN";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROGRESS";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PROGRESS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMPLETED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "COMPLETED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PLANNED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PLANNED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EXPENSES";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "EXPENSES";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMMENTS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENTS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RLNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RLNOTE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@KEYWORDS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "KEYWORDS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_EVENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_EVENT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_SOURCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ID_REPOS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_REPOS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFERENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLTYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLNUM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLPER1";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLPER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLPER1";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER1";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLPER2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLPER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLPER2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLPER2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLGTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLGTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLGTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RLGTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TASK";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TASK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TASK";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TASK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLEDITED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLEDITED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLEDITED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "RLEDITED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DESIGNED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DESIGNED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DESIGNED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DESIGNED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BEGUN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BEGUN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BEGUN";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "BEGUN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROGRESS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROGRESS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROGRESS";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PROGRESS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMPLETED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMPLETED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMPLETED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "COMPLETED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PLANNED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PLANNED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PLANNED";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PLANNED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EXPENSES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EXPENSES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EXPENSES";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "EXPENSES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMMENTS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMMENTS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMMENTS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "COMMENTS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RLNOTE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RLNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RLNOTE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "RLNOTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_KEYWORDS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "KEYWORDS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_KEYWORDS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "KEYWORDS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_PERSON";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_PERSON";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_EVENT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_EVENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_EVENT";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_EVENT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_SOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_SOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_SOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ID_REPOS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ID_REPOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ID_REPOS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ID_REPOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFERENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFERENCE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "REFERENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ResearchLog_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ResearchLog_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [RLTYPE], [RLNUM], [RLPER1], [RLPER2], [RLGTYPE], [TASK], [RLEDITED], [DESIGNED], [BEGUN], [PROGRESS], [COMPLETED], [PLANNED], [EXPENSES], [COMMENTS], [RLNOTE], [KEYWORDS], [DSID], [ID_PERSON], [ID_EVENT], [ID_SOURCE], [ID_REPOS], [TT], [REFERENCE], [ResearchLog_ID] FROM [ResearchLog]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.ResearchLogDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.ResearchLogDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.ResearchLogDataTable dataTable = new tmgDataSet.ResearchLogDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.ResearchLogDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ResearchLog");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    string Original_RLTYPE, 
                    global::System.Nullable<long> Original_RLNUM, 
                    global::System.Nullable<long> Original_RLPER1, 
                    global::System.Nullable<long> Original_RLPER2, 
                    global::System.Nullable<long> Original_RLGTYPE, 
                    string Original_TASK, 
                    string Original_RLEDITED, 
                    string Original_DESIGNED, 
                    string Original_BEGUN, 
                    string Original_PROGRESS, 
                    string Original_COMPLETED, 
                    string Original_PLANNED, 
                    global::System.Nullable<decimal> Original_EXPENSES, 
                    string Original_COMMENTS, 
                    string Original_RLNOTE, 
                    string Original_KEYWORDS, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<long> Original_ID_PERSON, 
                    global::System.Nullable<long> Original_ID_EVENT, 
                    global::System.Nullable<long> Original_ID_SOURCE, 
                    global::System.Nullable<long> Original_ID_REPOS, 
                    string Original_TT, 
                    string Original_REFERENCE, 
                    long Original_ResearchLog_ID) {
            if ((Original_RLTYPE == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_RLTYPE));
            }
            if ((Original_RLNUM.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_RLNUM.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_RLPER1.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_RLPER1.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_RLPER2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_RLPER2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_RLGTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((long)(Original_RLGTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_TASK == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_TASK));
            }
            if ((Original_RLEDITED == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_RLEDITED));
            }
            if ((Original_DESIGNED == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_DESIGNED));
            }
            if ((Original_BEGUN == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_BEGUN));
            }
            if ((Original_PROGRESS == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_PROGRESS));
            }
            if ((Original_COMPLETED == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_COMPLETED));
            }
            if ((Original_PLANNED == null)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_PLANNED));
            }
            if ((Original_EXPENSES.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((decimal)(Original_EXPENSES.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_COMMENTS == null)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((string)(Original_COMMENTS));
            }
            if ((Original_RLNOTE == null)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((string)(Original_RLNOTE));
            }
            if ((Original_KEYWORDS == null)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((string)(Original_KEYWORDS));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[33].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_PERSON.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[35].Value = ((long)(Original_ID_PERSON.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_EVENT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[37].Value = ((long)(Original_ID_EVENT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_SOURCE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[39].Value = ((long)(Original_ID_SOURCE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_REPOS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[41].Value = ((long)(Original_ID_REPOS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[43].Value = ((string)(Original_TT));
            }
            if ((Original_REFERENCE == null)) {
                this.Adapter.DeleteCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[45].Value = ((string)(Original_REFERENCE));
            }
            this.Adapter.DeleteCommand.Parameters[46].Value = ((long)(Original_ResearchLog_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string RLTYPE, 
                    global::System.Nullable<long> RLNUM, 
                    global::System.Nullable<long> RLPER1, 
                    global::System.Nullable<long> RLPER2, 
                    global::System.Nullable<long> RLGTYPE, 
                    string TASK, 
                    string RLEDITED, 
                    string DESIGNED, 
                    string BEGUN, 
                    string PROGRESS, 
                    string COMPLETED, 
                    string PLANNED, 
                    global::System.Nullable<decimal> EXPENSES, 
                    string COMMENTS, 
                    string RLNOTE, 
                    string KEYWORDS, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<long> ID_PERSON, 
                    global::System.Nullable<long> ID_EVENT, 
                    global::System.Nullable<long> ID_SOURCE, 
                    global::System.Nullable<long> ID_REPOS, 
                    string TT, 
                    string REFERENCE) {
            if ((RLTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RLTYPE));
            }
            if ((RLNUM.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(RLNUM.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RLPER1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(RLPER1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((RLPER2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(RLPER2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((RLGTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(RLGTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((TASK == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TASK));
            }
            if ((RLEDITED == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(RLEDITED));
            }
            if ((DESIGNED == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(DESIGNED));
            }
            if ((BEGUN == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(BEGUN));
            }
            if ((PROGRESS == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PROGRESS));
            }
            if ((COMPLETED == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(COMPLETED));
            }
            if ((PLANNED == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(PLANNED));
            }
            if ((EXPENSES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(EXPENSES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((COMMENTS == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(COMMENTS));
            }
            if ((RLNOTE == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(RLNOTE));
            }
            if ((KEYWORDS == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(KEYWORDS));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((ID_PERSON.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((long)(ID_PERSON.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((ID_EVENT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((long)(ID_EVENT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((ID_SOURCE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((long)(ID_SOURCE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((ID_REPOS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((long)(ID_REPOS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(TT));
            }
            if ((REFERENCE == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(REFERENCE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string RLTYPE, 
                    global::System.Nullable<long> RLNUM, 
                    global::System.Nullable<long> RLPER1, 
                    global::System.Nullable<long> RLPER2, 
                    global::System.Nullable<long> RLGTYPE, 
                    string TASK, 
                    string RLEDITED, 
                    string DESIGNED, 
                    string BEGUN, 
                    string PROGRESS, 
                    string COMPLETED, 
                    string PLANNED, 
                    global::System.Nullable<decimal> EXPENSES, 
                    string COMMENTS, 
                    string RLNOTE, 
                    string KEYWORDS, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<long> ID_PERSON, 
                    global::System.Nullable<long> ID_EVENT, 
                    global::System.Nullable<long> ID_SOURCE, 
                    global::System.Nullable<long> ID_REPOS, 
                    string TT, 
                    string REFERENCE, 
                    string Original_RLTYPE, 
                    global::System.Nullable<long> Original_RLNUM, 
                    global::System.Nullable<long> Original_RLPER1, 
                    global::System.Nullable<long> Original_RLPER2, 
                    global::System.Nullable<long> Original_RLGTYPE, 
                    string Original_TASK, 
                    string Original_RLEDITED, 
                    string Original_DESIGNED, 
                    string Original_BEGUN, 
                    string Original_PROGRESS, 
                    string Original_COMPLETED, 
                    string Original_PLANNED, 
                    global::System.Nullable<decimal> Original_EXPENSES, 
                    string Original_COMMENTS, 
                    string Original_RLNOTE, 
                    string Original_KEYWORDS, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<long> Original_ID_PERSON, 
                    global::System.Nullable<long> Original_ID_EVENT, 
                    global::System.Nullable<long> Original_ID_SOURCE, 
                    global::System.Nullable<long> Original_ID_REPOS, 
                    string Original_TT, 
                    string Original_REFERENCE, 
                    long Original_ResearchLog_ID) {
            if ((RLTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(RLTYPE));
            }
            if ((RLNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(RLNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((RLPER1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(RLPER1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((RLPER2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(RLPER2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((RLGTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(RLGTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((TASK == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TASK));
            }
            if ((RLEDITED == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(RLEDITED));
            }
            if ((DESIGNED == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(DESIGNED));
            }
            if ((BEGUN == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(BEGUN));
            }
            if ((PROGRESS == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(PROGRESS));
            }
            if ((COMPLETED == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(COMPLETED));
            }
            if ((PLANNED == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(PLANNED));
            }
            if ((EXPENSES.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(EXPENSES.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((COMMENTS == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(COMMENTS));
            }
            if ((RLNOTE == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(RLNOTE));
            }
            if ((KEYWORDS == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(KEYWORDS));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((ID_PERSON.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(ID_PERSON.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((ID_EVENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(ID_EVENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((ID_SOURCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(ID_SOURCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((ID_REPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((long)(ID_REPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(TT));
            }
            if ((REFERENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(REFERENCE));
            }
            if ((Original_RLTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_RLTYPE));
            }
            if ((Original_RLNUM.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((long)(Original_RLNUM.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_RLPER1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(Original_RLPER1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_RLPER2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((long)(Original_RLPER2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_RLGTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((long)(Original_RLGTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_TASK == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_TASK));
            }
            if ((Original_RLEDITED == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_RLEDITED));
            }
            if ((Original_DESIGNED == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_DESIGNED));
            }
            if ((Original_BEGUN == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_BEGUN));
            }
            if ((Original_PROGRESS == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_PROGRESS));
            }
            if ((Original_COMPLETED == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_COMPLETED));
            }
            if ((Original_PLANNED == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_PLANNED));
            }
            if ((Original_EXPENSES.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((decimal)(Original_EXPENSES.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_COMMENTS == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((string)(Original_COMMENTS));
            }
            if ((Original_RLNOTE == null)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((string)(Original_RLNOTE));
            }
            if ((Original_KEYWORDS == null)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((string)(Original_KEYWORDS));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_PERSON.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((long)(Original_ID_PERSON.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_EVENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((long)(Original_ID_EVENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_SOURCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[62].Value = ((long)(Original_ID_SOURCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_REPOS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[64].Value = ((long)(Original_ID_REPOS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[66].Value = ((string)(Original_TT));
            }
            if ((Original_REFERENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((string)(Original_REFERENCE));
            }
            this.Adapter.UpdateCommand.Parameters[69].Value = ((long)(Original_ResearchLog_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SourceTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SourceTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Source";
            tableMapping.ColumnMappings.Add("MACTIVE", "MACTIVE");
            tableMapping.ColumnMappings.Add("MAJNUM", "MAJNUM");
            tableMapping.ColumnMappings.Add("REF_ID", "REF_ID");
            tableMapping.ColumnMappings.Add("ABBREV", "ABBREV");
            tableMapping.ColumnMappings.Add("DEFSURE", "DEFSURE");
            tableMapping.ColumnMappings.Add("TITLE", "TITLE");
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("RECORDER", "RECORDER");
            tableMapping.ColumnMappings.Add("MEDIA", "MEDIA");
            tableMapping.ColumnMappings.Add("FIDELITY", "FIDELITY");
            tableMapping.ColumnMappings.Add("INDEXED", "INDEXED");
            tableMapping.ColumnMappings.Add("STATUS", "STATUS");
            tableMapping.ColumnMappings.Add("TEXT", "TEXT");
            tableMapping.ColumnMappings.Add("SPERNO", "SPERNO");
            tableMapping.ColumnMappings.Add("ISPICKED", "ISPICKED");
            tableMapping.ColumnMappings.Add("INFO", "INFO");
            tableMapping.ColumnMappings.Add("FFORM", "FFORM");
            tableMapping.ColumnMappings.Add("SFORM", "SFORM");
            tableMapping.ColumnMappings.Add("BFORM", "BFORM");
            tableMapping.ColumnMappings.Add("CITED", "CITED");
            tableMapping.ColumnMappings.Add("IBIDTYPE", "IBIDTYPE");
            tableMapping.ColumnMappings.Add("SUBJECTID", "SUBJECTID");
            tableMapping.ColumnMappings.Add("COMPILERID", "COMPILERID");
            tableMapping.ColumnMappings.Add("EDITORID", "EDITORID");
            tableMapping.ColumnMappings.Add("SPERNO2", "SPERNO2");
            tableMapping.ColumnMappings.Add("UNCITEDFLD", "UNCITEDFLD");
            tableMapping.ColumnMappings.Add("CUSTTYPE", "CUSTTYPE");
            tableMapping.ColumnMappings.Add("FIRSTCD", "FIRSTCD");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("REMINDERS", "REMINDERS");
            tableMapping.ColumnMappings.Add("TT", "TT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[Source] WHERE (((@IsNull_MACTIVE = 1 " +
                "AND [MACTIVE] IS NULL) OR ([MACTIVE] = @Original_MACTIVE)) AND ([MAJNUM] = @Orig" +
                "inal_MAJNUM) AND ((@IsNull_REF_ID = 1 AND [REF_ID] IS NULL) OR ([REF_ID] = @Orig" +
                "inal_REF_ID)) AND ((@IsNull_ABBREV = 1 AND [ABBREV] IS NULL) OR ([ABBREV] = @Ori" +
                "ginal_ABBREV)) AND ((@IsNull_DEFSURE = 1 AND [DEFSURE] IS NULL) OR ([DEFSURE] = " +
                "@Original_DEFSURE)) AND ((@IsNull_TITLE = 1 AND [TITLE] IS NULL) OR ([TITLE] = @" +
                "Original_TITLE)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Origin" +
                "al_TYPE)) AND ((@IsNull_RECORDER = 1 AND [RECORDER] IS NULL) OR ([RECORDER] = @O" +
                "riginal_RECORDER)) AND ((@IsNull_MEDIA = 1 AND [MEDIA] IS NULL) OR ([MEDIA] = @O" +
                "riginal_MEDIA)) AND ((@IsNull_FIDELITY = 1 AND [FIDELITY] IS NULL) OR ([FIDELITY" +
                "] = @Original_FIDELITY)) AND ((@IsNull_INDEXED = 1 AND [INDEXED] IS NULL) OR ([I" +
                "NDEXED] = @Original_INDEXED)) AND ((@IsNull_STATUS = 1 AND [STATUS] IS NULL) OR " +
                "([STATUS] = @Original_STATUS)) AND ((@IsNull_TEXT = 1 AND [TEXT] IS NULL) OR ([T" +
                "EXT] = @Original_TEXT)) AND ((@IsNull_SPERNO = 1 AND [SPERNO] IS NULL) OR ([SPER" +
                "NO] = @Original_SPERNO)) AND ((@IsNull_ISPICKED = 1 AND [ISPICKED] IS NULL) OR (" +
                "[ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_INFO = 1 AND [INFO] IS NULL) OR " +
                "([INFO] = @Original_INFO)) AND ((@IsNull_FFORM = 1 AND [FFORM] IS NULL) OR ([FFO" +
                "RM] = @Original_FFORM)) AND ((@IsNull_SFORM = 1 AND [SFORM] IS NULL) OR ([SFORM]" +
                " = @Original_SFORM)) AND ((@IsNull_BFORM = 1 AND [BFORM] IS NULL) OR ([BFORM] = " +
                "@Original_BFORM)) AND ((@IsNull_CITED = 1 AND [CITED] IS NULL) OR ([CITED] = @Or" +
                "iginal_CITED)) AND ((@IsNull_IBIDTYPE = 1 AND [IBIDTYPE] IS NULL) OR ([IBIDTYPE]" +
                " = @Original_IBIDTYPE)) AND ((@IsNull_SUBJECTID = 1 AND [SUBJECTID] IS NULL) OR " +
                "([SUBJECTID] = @Original_SUBJECTID)) AND ((@IsNull_COMPILERID = 1 AND [COMPILERI" +
                "D] IS NULL) OR ([COMPILERID] = @Original_COMPILERID)) AND ((@IsNull_EDITORID = 1" +
                " AND [EDITORID] IS NULL) OR ([EDITORID] = @Original_EDITORID)) AND ((@IsNull_SPE" +
                "RNO2 = 1 AND [SPERNO2] IS NULL) OR ([SPERNO2] = @Original_SPERNO2)) AND ((@IsNul" +
                "l_UNCITEDFLD = 1 AND [UNCITEDFLD] IS NULL) OR ([UNCITEDFLD] = @Original_UNCITEDF" +
                "LD)) AND ((@IsNull_CUSTTYPE = 1 AND [CUSTTYPE] IS NULL) OR ([CUSTTYPE] = @Origin" +
                "al_CUSTTYPE)) AND ((@IsNull_FIRSTCD = 1 AND [FIRSTCD] IS NULL) OR ([FIRSTCD] = @" +
                "Original_FIRSTCD)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Orig" +
                "inal_DSID)) AND ((@IsNull_REMINDERS = 1 AND [REMINDERS] IS NULL) OR ([REMINDERS]" +
                " = @Original_REMINDERS)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Orig" +
                "inal_TT)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MACTIVE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "MACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MAJNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MAJNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ABBREV";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DEFSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DEFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DEFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DEFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TITLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TITLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TITLE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TITLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RECORDER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RECORDER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECORDER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "RECORDER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MEDIA";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MEDIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MEDIA";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MEDIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FIDELITY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FIDELITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FIDELITY";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FIDELITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INDEXED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INDEXED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INDEXED";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "INDEXED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STATUS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STATUS";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TEXT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TEXT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPERNO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPERNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPERNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPERNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INFO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "INFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FFORM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SFORM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BFORM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "BFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CITED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CITED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CITED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "CITED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IBIDTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IBIDTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IBIDTYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "IBIDTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBJECTID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBJECTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBJECTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBJECTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMPILERID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMPILERID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMPILERID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COMPILERID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EDITORID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EDITORID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EDITORID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EDITORID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPERNO2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPERNO2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPERNO2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPERNO2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UNCITEDFLD";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UNCITEDFLD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UNCITEDFLD";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "UNCITEDFLD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CUSTTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CUSTTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CUSTTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CUSTTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FIRSTCD";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FIRSTCD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FIRSTCD";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FIRSTCD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REMINDERS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[Source] ([MACTIVE], [MAJNUM], [REF_ID], [ABBREV], [DEFSURE], [TITLE], [TYPE], [RECORDER], [MEDIA], [FIDELITY], [INDEXED], [STATUS], [TEXT], [SPERNO], [ISPICKED], [INFO], [FFORM], [SFORM], [BFORM], [CITED], [IBIDTYPE], [SUBJECTID], [COMPILERID], [EDITORID], [SPERNO2], [UNCITEDFLD], [CUSTTYPE], [FIRSTCD], [DSID], [REMINDERS], [TT]) VALUES (@MACTIVE, @MAJNUM, @REF_ID, @ABBREV, @DEFSURE, @TITLE, @TYPE, @RECORDER, @MEDIA, @FIDELITY, @INDEXED, @STATUS, @TEXT, @SPERNO, @ISPICKED, @INFO, @FFORM, @SFORM, @BFORM, @CITED, @IBIDTYPE, @SUBJECTID, @COMPILERID, @EDITORID, @SPERNO2, @UNCITEDFLD, @CUSTTYPE, @FIRSTCD, @DSID, @REMINDERS, @TT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "MACTIVE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MAJNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MAJNUM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DEFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DEFSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TITLE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TITLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECORDER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "RECORDER";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MEDIA";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MEDIA";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FIDELITY";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FIDELITY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INDEXED";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "INDEXED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STATUS";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "STATUS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TEXT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TEXT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPERNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPERNO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "INFO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FFORM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SFORM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "BFORM";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CITED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "CITED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IBIDTYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "IBIDTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBJECTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBJECTID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMPILERID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COMPILERID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EDITORID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EDITORID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPERNO2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPERNO2";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UNCITEDFLD";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "UNCITEDFLD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CUSTTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CUSTTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FIRSTCD";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FIRSTCD";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[Source] SET [MACTIVE] = @MACTIVE, [MAJNUM]" +
                " = @MAJNUM, [REF_ID] = @REF_ID, [ABBREV] = @ABBREV, [DEFSURE] = @DEFSURE, [TITLE" +
                "] = @TITLE, [TYPE] = @TYPE, [RECORDER] = @RECORDER, [MEDIA] = @MEDIA, [FIDELITY]" +
                " = @FIDELITY, [INDEXED] = @INDEXED, [STATUS] = @STATUS, [TEXT] = @TEXT, [SPERNO]" +
                " = @SPERNO, [ISPICKED] = @ISPICKED, [INFO] = @INFO, [FFORM] = @FFORM, [SFORM] = " +
                "@SFORM, [BFORM] = @BFORM, [CITED] = @CITED, [IBIDTYPE] = @IBIDTYPE, [SUBJECTID] " +
                "= @SUBJECTID, [COMPILERID] = @COMPILERID, [EDITORID] = @EDITORID, [SPERNO2] = @S" +
                "PERNO2, [UNCITEDFLD] = @UNCITEDFLD, [CUSTTYPE] = @CUSTTYPE, [FIRSTCD] = @FIRSTCD" +
                ", [DSID] = @DSID, [REMINDERS] = @REMINDERS, [TT] = @TT WHERE (((@IsNull_MACTIVE " +
                "= 1 AND [MACTIVE] IS NULL) OR ([MACTIVE] = @Original_MACTIVE)) AND ([MAJNUM] = @" +
                "Original_MAJNUM) AND ((@IsNull_REF_ID = 1 AND [REF_ID] IS NULL) OR ([REF_ID] = @" +
                "Original_REF_ID)) AND ((@IsNull_ABBREV = 1 AND [ABBREV] IS NULL) OR ([ABBREV] = " +
                "@Original_ABBREV)) AND ((@IsNull_DEFSURE = 1 AND [DEFSURE] IS NULL) OR ([DEFSURE" +
                "] = @Original_DEFSURE)) AND ((@IsNull_TITLE = 1 AND [TITLE] IS NULL) OR ([TITLE]" +
                " = @Original_TITLE)) AND ((@IsNull_TYPE = 1 AND [TYPE] IS NULL) OR ([TYPE] = @Or" +
                "iginal_TYPE)) AND ((@IsNull_RECORDER = 1 AND [RECORDER] IS NULL) OR ([RECORDER] " +
                "= @Original_RECORDER)) AND ((@IsNull_MEDIA = 1 AND [MEDIA] IS NULL) OR ([MEDIA] " +
                "= @Original_MEDIA)) AND ((@IsNull_FIDELITY = 1 AND [FIDELITY] IS NULL) OR ([FIDE" +
                "LITY] = @Original_FIDELITY)) AND ((@IsNull_INDEXED = 1 AND [INDEXED] IS NULL) OR" +
                " ([INDEXED] = @Original_INDEXED)) AND ((@IsNull_STATUS = 1 AND [STATUS] IS NULL)" +
                " OR ([STATUS] = @Original_STATUS)) AND ((@IsNull_TEXT = 1 AND [TEXT] IS NULL) OR" +
                " ([TEXT] = @Original_TEXT)) AND ((@IsNull_SPERNO = 1 AND [SPERNO] IS NULL) OR ([" +
                "SPERNO] = @Original_SPERNO)) AND ((@IsNull_ISPICKED = 1 AND [ISPICKED] IS NULL) " +
                "OR ([ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_INFO = 1 AND [INFO] IS NULL)" +
                " OR ([INFO] = @Original_INFO)) AND ((@IsNull_FFORM = 1 AND [FFORM] IS NULL) OR (" +
                "[FFORM] = @Original_FFORM)) AND ((@IsNull_SFORM = 1 AND [SFORM] IS NULL) OR ([SF" +
                "ORM] = @Original_SFORM)) AND ((@IsNull_BFORM = 1 AND [BFORM] IS NULL) OR ([BFORM" +
                "] = @Original_BFORM)) AND ((@IsNull_CITED = 1 AND [CITED] IS NULL) OR ([CITED] =" +
                " @Original_CITED)) AND ((@IsNull_IBIDTYPE = 1 AND [IBIDTYPE] IS NULL) OR ([IBIDT" +
                "YPE] = @Original_IBIDTYPE)) AND ((@IsNull_SUBJECTID = 1 AND [SUBJECTID] IS NULL)" +
                " OR ([SUBJECTID] = @Original_SUBJECTID)) AND ((@IsNull_COMPILERID = 1 AND [COMPI" +
                "LERID] IS NULL) OR ([COMPILERID] = @Original_COMPILERID)) AND ((@IsNull_EDITORID" +
                " = 1 AND [EDITORID] IS NULL) OR ([EDITORID] = @Original_EDITORID)) AND ((@IsNull" +
                "_SPERNO2 = 1 AND [SPERNO2] IS NULL) OR ([SPERNO2] = @Original_SPERNO2)) AND ((@I" +
                "sNull_UNCITEDFLD = 1 AND [UNCITEDFLD] IS NULL) OR ([UNCITEDFLD] = @Original_UNCI" +
                "TEDFLD)) AND ((@IsNull_CUSTTYPE = 1 AND [CUSTTYPE] IS NULL) OR ([CUSTTYPE] = @Or" +
                "iginal_CUSTTYPE)) AND ((@IsNull_FIRSTCD = 1 AND [FIRSTCD] IS NULL) OR ([FIRSTCD]" +
                " = @Original_FIRSTCD)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @" +
                "Original_DSID)) AND ((@IsNull_REMINDERS = 1 AND [REMINDERS] IS NULL) OR ([REMIND" +
                "ERS] = @Original_REMINDERS)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @" +
                "Original_TT)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "MACTIVE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MAJNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MAJNUM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DEFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DEFSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TITLE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TITLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RECORDER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "RECORDER";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MEDIA";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MEDIA";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FIDELITY";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FIDELITY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INDEXED";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "INDEXED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STATUS";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "STATUS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TEXT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TEXT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPERNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPERNO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@INFO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "INFO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FFORM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SFORM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "BFORM";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CITED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "CITED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IBIDTYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "IBIDTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBJECTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBJECTID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@COMPILERID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COMPILERID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EDITORID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EDITORID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPERNO2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPERNO2";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@UNCITEDFLD";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "UNCITEDFLD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CUSTTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CUSTTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FIRSTCD";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FIRSTCD";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MACTIVE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "MACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MAJNUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MAJNUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REF_ID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REF_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REF_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ABBREV";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DEFSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DEFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DEFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "DEFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TITLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TITLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TITLE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TITLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "TYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RECORDER";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RECORDER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECORDER";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "RECORDER";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MEDIA";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MEDIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MEDIA";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MEDIA";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FIDELITY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FIDELITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FIDELITY";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "FIDELITY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INDEXED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INDEXED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INDEXED";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "INDEXED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STATUS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STATUS";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "STATUS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TEXT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TEXT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TEXT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPERNO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPERNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPERNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPERNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_INFO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "INFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_INFO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "INFO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FFORM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SFORM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BFORM";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BFORM";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "BFORM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CITED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CITED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CITED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "CITED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IBIDTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IBIDTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IBIDTYPE";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "IBIDTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBJECTID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBJECTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBJECTID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SUBJECTID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_COMPILERID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "COMPILERID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_COMPILERID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "COMPILERID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EDITORID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EDITORID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EDITORID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "EDITORID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPERNO2";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPERNO2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPERNO2";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SPERNO2";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_UNCITEDFLD";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "UNCITEDFLD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_UNCITEDFLD";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "UNCITEDFLD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CUSTTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CUSTTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CUSTTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "CUSTTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FIRSTCD";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FIRSTCD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FIRSTCD";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FIRSTCD";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REMINDERS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [MACTIVE], [MAJNUM], [REF_ID], [ABBREV], [DEFSURE], [TITLE], [TYPE], [RECORDER], [MEDIA], [FIDELITY], [INDEXED], [STATUS], [TEXT], [SPERNO], [ISPICKED], [INFO], [FFORM], [SFORM], [BFORM], [CITED], [IBIDTYPE], [SUBJECTID], [COMPILERID], [EDITORID], [SPERNO2], [UNCITEDFLD], [CUSTTYPE], [FIRSTCD], [DSID], [REMINDERS], [TT] FROM [Source]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.SourceDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.SourceDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.SourceDataTable dataTable = new tmgDataSet.SourceDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.SourceDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Source");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    global::System.Nullable<bool> Original_MACTIVE, 
                    long Original_MAJNUM, 
                    global::System.Nullable<long> Original_REF_ID, 
                    string Original_ABBREV, 
                    string Original_DEFSURE, 
                    string Original_TITLE, 
                    global::System.Nullable<decimal> Original_TYPE, 
                    global::System.Nullable<decimal> Original_RECORDER, 
                    global::System.Nullable<decimal> Original_MEDIA, 
                    global::System.Nullable<decimal> Original_FIDELITY, 
                    global::System.Nullable<decimal> Original_INDEXED, 
                    global::System.Nullable<decimal> Original_STATUS, 
                    string Original_TEXT, 
                    global::System.Nullable<long> Original_SPERNO, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    string Original_INFO, 
                    string Original_FFORM, 
                    string Original_SFORM, 
                    string Original_BFORM, 
                    global::System.Nullable<bool> Original_CITED, 
                    global::System.Nullable<decimal> Original_IBIDTYPE, 
                    global::System.Nullable<long> Original_SUBJECTID, 
                    global::System.Nullable<long> Original_COMPILERID, 
                    global::System.Nullable<long> Original_EDITORID, 
                    global::System.Nullable<long> Original_SPERNO2, 
                    string Original_UNCITEDFLD, 
                    global::System.Nullable<long> Original_CUSTTYPE, 
                    string Original_FIRSTCD, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_REMINDERS, 
                    string Original_TT) {
            if ((Original_MACTIVE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_MACTIVE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_MAJNUM));
            if ((Original_REF_ID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_REF_ID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_ABBREV == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ABBREV));
            }
            if ((Original_DEFSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_DEFSURE));
            }
            if ((Original_TITLE == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_TITLE));
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_TYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_RECORDER.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_RECORDER.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_MEDIA.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_MEDIA.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_FIDELITY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((decimal)(Original_FIDELITY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_INDEXED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((decimal)(Original_INDEXED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_STATUS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_STATUS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_TEXT == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_TEXT));
            }
            if ((Original_SPERNO.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((long)(Original_SPERNO.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_INFO == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_INFO));
            }
            if ((Original_FFORM == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_FFORM));
            }
            if ((Original_SFORM == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_SFORM));
            }
            if ((Original_BFORM == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_BFORM));
            }
            if ((Original_CITED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((bool)(Original_CITED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_IBIDTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((decimal)(Original_IBIDTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBJECTID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((long)(Original_SUBJECTID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_COMPILERID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((long)(Original_COMPILERID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_EDITORID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((long)(Original_EDITORID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_SPERNO2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((long)(Original_SPERNO2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_UNCITEDFLD == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_UNCITEDFLD));
            }
            if ((Original_CUSTTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((long)(Original_CUSTTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_FIRSTCD == null)) {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[54].Value = ((string)(Original_FIRSTCD));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((Original_REMINDERS == null)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((string)(Original_REMINDERS));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<bool> MACTIVE, 
                    long MAJNUM, 
                    global::System.Nullable<long> REF_ID, 
                    string ABBREV, 
                    string DEFSURE, 
                    string TITLE, 
                    global::System.Nullable<decimal> TYPE, 
                    global::System.Nullable<decimal> RECORDER, 
                    global::System.Nullable<decimal> MEDIA, 
                    global::System.Nullable<decimal> FIDELITY, 
                    global::System.Nullable<decimal> INDEXED, 
                    global::System.Nullable<decimal> STATUS, 
                    string TEXT, 
                    global::System.Nullable<long> SPERNO, 
                    global::System.Nullable<bool> ISPICKED, 
                    string INFO, 
                    string FFORM, 
                    string SFORM, 
                    string BFORM, 
                    global::System.Nullable<bool> CITED, 
                    global::System.Nullable<decimal> IBIDTYPE, 
                    global::System.Nullable<long> SUBJECTID, 
                    global::System.Nullable<long> COMPILERID, 
                    global::System.Nullable<long> EDITORID, 
                    global::System.Nullable<long> SPERNO2, 
                    string UNCITEDFLD, 
                    global::System.Nullable<long> CUSTTYPE, 
                    string FIRSTCD, 
                    global::System.Nullable<long> DSID, 
                    string REMINDERS, 
                    string TT) {
            if ((MACTIVE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(MACTIVE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(MAJNUM));
            if ((REF_ID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(REF_ID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ABBREV == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ABBREV));
            }
            if ((DEFSURE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DEFSURE));
            }
            if ((TITLE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TITLE));
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((RECORDER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(RECORDER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((MEDIA.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(MEDIA.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((FIDELITY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(FIDELITY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((INDEXED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(INDEXED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((STATUS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(STATUS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TEXT == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(TEXT));
            }
            if ((SPERNO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((long)(SPERNO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((INFO == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(INFO));
            }
            if ((FFORM == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(FFORM));
            }
            if ((SFORM == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(SFORM));
            }
            if ((BFORM == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(BFORM));
            }
            if ((CITED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((bool)(CITED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((IBIDTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(IBIDTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((SUBJECTID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((long)(SUBJECTID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((COMPILERID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((long)(COMPILERID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((EDITORID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((long)(EDITORID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((SPERNO2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((long)(SPERNO2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((UNCITEDFLD == null)) {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((string)(UNCITEDFLD));
            }
            if ((CUSTTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((long)(CUSTTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((FIRSTCD == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(FIRSTCD));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((REMINDERS == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(REMINDERS));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<bool> MACTIVE, 
                    long MAJNUM, 
                    global::System.Nullable<long> REF_ID, 
                    string ABBREV, 
                    string DEFSURE, 
                    string TITLE, 
                    global::System.Nullable<decimal> TYPE, 
                    global::System.Nullable<decimal> RECORDER, 
                    global::System.Nullable<decimal> MEDIA, 
                    global::System.Nullable<decimal> FIDELITY, 
                    global::System.Nullable<decimal> INDEXED, 
                    global::System.Nullable<decimal> STATUS, 
                    string TEXT, 
                    global::System.Nullable<long> SPERNO, 
                    global::System.Nullable<bool> ISPICKED, 
                    string INFO, 
                    string FFORM, 
                    string SFORM, 
                    string BFORM, 
                    global::System.Nullable<bool> CITED, 
                    global::System.Nullable<decimal> IBIDTYPE, 
                    global::System.Nullable<long> SUBJECTID, 
                    global::System.Nullable<long> COMPILERID, 
                    global::System.Nullable<long> EDITORID, 
                    global::System.Nullable<long> SPERNO2, 
                    string UNCITEDFLD, 
                    global::System.Nullable<long> CUSTTYPE, 
                    string FIRSTCD, 
                    global::System.Nullable<long> DSID, 
                    string REMINDERS, 
                    string TT, 
                    global::System.Nullable<bool> Original_MACTIVE, 
                    long Original_MAJNUM, 
                    global::System.Nullable<long> Original_REF_ID, 
                    string Original_ABBREV, 
                    string Original_DEFSURE, 
                    string Original_TITLE, 
                    global::System.Nullable<decimal> Original_TYPE, 
                    global::System.Nullable<decimal> Original_RECORDER, 
                    global::System.Nullable<decimal> Original_MEDIA, 
                    global::System.Nullable<decimal> Original_FIDELITY, 
                    global::System.Nullable<decimal> Original_INDEXED, 
                    global::System.Nullable<decimal> Original_STATUS, 
                    string Original_TEXT, 
                    global::System.Nullable<long> Original_SPERNO, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    string Original_INFO, 
                    string Original_FFORM, 
                    string Original_SFORM, 
                    string Original_BFORM, 
                    global::System.Nullable<bool> Original_CITED, 
                    global::System.Nullable<decimal> Original_IBIDTYPE, 
                    global::System.Nullable<long> Original_SUBJECTID, 
                    global::System.Nullable<long> Original_COMPILERID, 
                    global::System.Nullable<long> Original_EDITORID, 
                    global::System.Nullable<long> Original_SPERNO2, 
                    string Original_UNCITEDFLD, 
                    global::System.Nullable<long> Original_CUSTTYPE, 
                    string Original_FIRSTCD, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_REMINDERS, 
                    string Original_TT) {
            if ((MACTIVE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(MACTIVE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(MAJNUM));
            if ((REF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(REF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ABBREV == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ABBREV));
            }
            if ((DEFSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DEFSURE));
            }
            if ((TITLE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TITLE));
            }
            if ((TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((RECORDER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(RECORDER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((MEDIA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(MEDIA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((FIDELITY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(FIDELITY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((INDEXED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(INDEXED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((STATUS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(STATUS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TEXT == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(TEXT));
            }
            if ((SPERNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(SPERNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((INFO == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(INFO));
            }
            if ((FFORM == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(FFORM));
            }
            if ((SFORM == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(SFORM));
            }
            if ((BFORM == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(BFORM));
            }
            if ((CITED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((bool)(CITED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((IBIDTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(IBIDTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((SUBJECTID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(SUBJECTID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((COMPILERID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(COMPILERID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((EDITORID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(EDITORID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((SPERNO2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(SPERNO2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((UNCITEDFLD == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(UNCITEDFLD));
            }
            if ((CUSTTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((long)(CUSTTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((FIRSTCD == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(FIRSTCD));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((REMINDERS == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(REMINDERS));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(TT));
            }
            if ((Original_MACTIVE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(Original_MACTIVE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[33].Value = ((long)(Original_MAJNUM));
            if ((Original_REF_ID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((long)(Original_REF_ID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((Original_ABBREV == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_ABBREV));
            }
            if ((Original_DEFSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((string)(Original_DEFSURE));
            }
            if ((Original_TITLE == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_TITLE));
            }
            if ((Original_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((decimal)(Original_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_RECORDER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((decimal)(Original_RECORDER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((Original_MEDIA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((decimal)(Original_MEDIA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            if ((Original_FIDELITY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[49].Value = ((decimal)(Original_FIDELITY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[48].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            if ((Original_INDEXED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[51].Value = ((decimal)(Original_INDEXED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((Original_STATUS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((decimal)(Original_STATUS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((Original_TEXT == null)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((string)(Original_TEXT));
            }
            if ((Original_SPERNO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((long)(Original_SPERNO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[59].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Original_INFO == null)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(Original_INFO));
            }
            if ((Original_FFORM == null)) {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[63].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[62].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[63].Value = ((string)(Original_FFORM));
            }
            if ((Original_SFORM == null)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(Original_SFORM));
            }
            if ((Original_BFORM == null)) {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[67].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[66].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[67].Value = ((string)(Original_BFORM));
            }
            if ((Original_CITED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[69].Value = ((bool)(Original_CITED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[68].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[69].Value = global::System.DBNull.Value;
            }
            if ((Original_IBIDTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[71].Value = ((decimal)(Original_IBIDTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[70].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[71].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBJECTID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[73].Value = ((long)(Original_SUBJECTID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[72].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[73].Value = global::System.DBNull.Value;
            }
            if ((Original_COMPILERID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[75].Value = ((long)(Original_COMPILERID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[74].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[75].Value = global::System.DBNull.Value;
            }
            if ((Original_EDITORID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[77].Value = ((long)(Original_EDITORID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[76].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[77].Value = global::System.DBNull.Value;
            }
            if ((Original_SPERNO2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[79].Value = ((long)(Original_SPERNO2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[78].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[79].Value = global::System.DBNull.Value;
            }
            if ((Original_UNCITEDFLD == null)) {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[81].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[80].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[81].Value = ((string)(Original_UNCITEDFLD));
            }
            if ((Original_CUSTTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[83].Value = ((long)(Original_CUSTTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[82].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[83].Value = global::System.DBNull.Value;
            }
            if ((Original_FIRSTCD == null)) {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[85].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[84].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[85].Value = ((string)(Original_FIRSTCD));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[87].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[86].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[87].Value = global::System.DBNull.Value;
            }
            if ((Original_REMINDERS == null)) {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[89].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[88].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[89].Value = ((string)(Original_REMINDERS));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[91].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[90].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[91].Value = ((string)(Original_TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<bool> MACTIVE, 
                    global::System.Nullable<long> REF_ID, 
                    string ABBREV, 
                    string DEFSURE, 
                    string TITLE, 
                    global::System.Nullable<decimal> TYPE, 
                    global::System.Nullable<decimal> RECORDER, 
                    global::System.Nullable<decimal> MEDIA, 
                    global::System.Nullable<decimal> FIDELITY, 
                    global::System.Nullable<decimal> INDEXED, 
                    global::System.Nullable<decimal> STATUS, 
                    string TEXT, 
                    global::System.Nullable<long> SPERNO, 
                    global::System.Nullable<bool> ISPICKED, 
                    string INFO, 
                    string FFORM, 
                    string SFORM, 
                    string BFORM, 
                    global::System.Nullable<bool> CITED, 
                    global::System.Nullable<decimal> IBIDTYPE, 
                    global::System.Nullable<long> SUBJECTID, 
                    global::System.Nullable<long> COMPILERID, 
                    global::System.Nullable<long> EDITORID, 
                    global::System.Nullable<long> SPERNO2, 
                    string UNCITEDFLD, 
                    global::System.Nullable<long> CUSTTYPE, 
                    string FIRSTCD, 
                    global::System.Nullable<long> DSID, 
                    string REMINDERS, 
                    string TT, 
                    global::System.Nullable<bool> Original_MACTIVE, 
                    long Original_MAJNUM, 
                    global::System.Nullable<long> Original_REF_ID, 
                    string Original_ABBREV, 
                    string Original_DEFSURE, 
                    string Original_TITLE, 
                    global::System.Nullable<decimal> Original_TYPE, 
                    global::System.Nullable<decimal> Original_RECORDER, 
                    global::System.Nullable<decimal> Original_MEDIA, 
                    global::System.Nullable<decimal> Original_FIDELITY, 
                    global::System.Nullable<decimal> Original_INDEXED, 
                    global::System.Nullable<decimal> Original_STATUS, 
                    string Original_TEXT, 
                    global::System.Nullable<long> Original_SPERNO, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    string Original_INFO, 
                    string Original_FFORM, 
                    string Original_SFORM, 
                    string Original_BFORM, 
                    global::System.Nullable<bool> Original_CITED, 
                    global::System.Nullable<decimal> Original_IBIDTYPE, 
                    global::System.Nullable<long> Original_SUBJECTID, 
                    global::System.Nullable<long> Original_COMPILERID, 
                    global::System.Nullable<long> Original_EDITORID, 
                    global::System.Nullable<long> Original_SPERNO2, 
                    string Original_UNCITEDFLD, 
                    global::System.Nullable<long> Original_CUSTTYPE, 
                    string Original_FIRSTCD, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_REMINDERS, 
                    string Original_TT) {
            return this.Update(MACTIVE, Original_MAJNUM, REF_ID, ABBREV, DEFSURE, TITLE, TYPE, RECORDER, MEDIA, FIDELITY, INDEXED, STATUS, TEXT, SPERNO, ISPICKED, INFO, FFORM, SFORM, BFORM, CITED, IBIDTYPE, SUBJECTID, COMPILERID, EDITORID, SPERNO2, UNCITEDFLD, CUSTTYPE, FIRSTCD, DSID, REMINDERS, TT, Original_MACTIVE, Original_MAJNUM, Original_REF_ID, Original_ABBREV, Original_DEFSURE, Original_TITLE, Original_TYPE, Original_RECORDER, Original_MEDIA, Original_FIDELITY, Original_INDEXED, Original_STATUS, Original_TEXT, Original_SPERNO, Original_ISPICKED, Original_INFO, Original_FFORM, Original_SFORM, Original_BFORM, Original_CITED, Original_IBIDTYPE, Original_SUBJECTID, Original_COMPILERID, Original_EDITORID, Original_SPERNO2, Original_UNCITEDFLD, Original_CUSTTYPE, Original_FIRSTCD, Original_DSID, Original_REMINDERS, Original_TT);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SourceCitationTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SourceCitationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SourceCitation";
            tableMapping.ColumnMappings.Add("RECNO", "RECNO");
            tableMapping.ColumnMappings.Add("STYPE", "STYPE");
            tableMapping.ColumnMappings.Add("REFREC", "REFREC");
            tableMapping.ColumnMappings.Add("MAJSOURCE", "MAJSOURCE");
            tableMapping.ColumnMappings.Add("SUBSOURCE", "SUBSOURCE");
            tableMapping.ColumnMappings.Add("SNSURE", "SNSURE");
            tableMapping.ColumnMappings.Add("SSSURE", "SSSURE");
            tableMapping.ColumnMappings.Add("SDSURE", "SDSURE");
            tableMapping.ColumnMappings.Add("SPSURE", "SPSURE");
            tableMapping.ColumnMappings.Add("SFSURE", "SFSURE");
            tableMapping.ColumnMappings.Add("ISPICKED", "ISPICKED");
            tableMapping.ColumnMappings.Add("SEQUENCE", "SEQUENCE");
            tableMapping.ColumnMappings.Add("CITMEMO", "CITMEMO");
            tableMapping.ColumnMappings.Add("EXCLUDE", "EXCLUDE");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("CITREF", "CITREF");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[SourceCitation] WHERE (([RECNO] = @Original_RECNO) AND ((@IsNull_STYPE = 1 AND [STYPE] IS NULL) OR ([STYPE] = @Original_STYPE)) AND ((@IsNull_REFREC = 1 AND [REFREC] IS NULL) OR ([REFREC] = @Original_REFREC)) AND ((@IsNull_MAJSOURCE = 1 AND [MAJSOURCE] IS NULL) OR ([MAJSOURCE] = @Original_MAJSOURCE)) AND ((@IsNull_SUBSOURCE = 1 AND [SUBSOURCE] IS NULL) OR ([SUBSOURCE] = @Original_SUBSOURCE)) AND ((@IsNull_SNSURE = 1 AND [SNSURE] IS NULL) OR ([SNSURE] = @Original_SNSURE)) AND ((@IsNull_SSSURE = 1 AND [SSSURE] IS NULL) OR ([SSSURE] = @Original_SSSURE)) AND ((@IsNull_SDSURE = 1 AND [SDSURE] IS NULL) OR ([SDSURE] = @Original_SDSURE)) AND ((@IsNull_SPSURE = 1 AND [SPSURE] IS NULL) OR ([SPSURE] = @Original_SPSURE)) AND ((@IsNull_SFSURE = 1 AND [SFSURE] IS NULL) OR ([SFSURE] = @Original_SFSURE)) AND ((@IsNull_ISPICKED = 1 AND [ISPICKED] IS NULL) OR ([ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_SEQUENCE = 1 AND [SEQUENCE] IS NULL) OR ([SEQUENCE] = @Original_SEQUENCE)) AND ((@IsNull_CITMEMO = 1 AND [CITMEMO] IS NULL) OR ([CITMEMO] = @Original_CITMEMO)) AND ((@IsNull_EXCLUDE = 1 AND [EXCLUDE] IS NULL) OR ([EXCLUDE] = @Original_EXCLUDE)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_CITREF = 1 AND [CITREF] IS NULL) OR ([CITREF] = @Original_CITREF)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFREC";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REFREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MAJSOURCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MAJSOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MAJSOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MAJSOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBSOURCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBSOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBSOURCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SUBSOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SNSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SNSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SNSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SSSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SSSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SSSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SSSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SDSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SDSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SDSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SPSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SFSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CITMEMO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CITMEMO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CITMEMO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CITMEMO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EXCLUDE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EXCLUDE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EXCLUDE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "EXCLUDE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CITREF";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CITREF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CITREF";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "CITREF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[SourceCitation] ([STYPE], [REFREC], [MAJSOURCE], [SUBSOURCE], [SNSURE], [SSSURE], [SDSURE], [SPSURE], [SFSURE], [ISPICKED], [SEQUENCE], [CITMEMO], [EXCLUDE], [TT], [DSID], [CITREF]) VALUES (@STYPE, @REFREC, @MAJSOURCE, @SUBSOURCE, @SNSURE, @SSSURE, @SDSURE, @SPSURE, @SFSURE, @ISPICKED, @SEQUENCE, @CITMEMO, @EXCLUDE, @TT, @DSID, @CITREF)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REFREC";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MAJSOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MAJSOURCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBSOURCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SUBSOURCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SNSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SSSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SSSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SDSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SPSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SFSURE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CITMEMO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CITMEMO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EXCLUDE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "EXCLUDE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CITREF";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "CITREF";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[SourceCitation] SET [STYPE] = @STYPE, [REF" +
                "REC] = @REFREC, [MAJSOURCE] = @MAJSOURCE, [SUBSOURCE] = @SUBSOURCE, [SNSURE] = @" +
                "SNSURE, [SSSURE] = @SSSURE, [SDSURE] = @SDSURE, [SPSURE] = @SPSURE, [SFSURE] = @" +
                "SFSURE, [ISPICKED] = @ISPICKED, [SEQUENCE] = @SEQUENCE, [CITMEMO] = @CITMEMO, [E" +
                "XCLUDE] = @EXCLUDE, [TT] = @TT, [DSID] = @DSID, [CITREF] = @CITREF WHERE (([RECN" +
                "O] = @Original_RECNO) AND ((@IsNull_STYPE = 1 AND [STYPE] IS NULL) OR ([STYPE] =" +
                " @Original_STYPE)) AND ((@IsNull_REFREC = 1 AND [REFREC] IS NULL) OR ([REFREC] =" +
                " @Original_REFREC)) AND ((@IsNull_MAJSOURCE = 1 AND [MAJSOURCE] IS NULL) OR ([MA" +
                "JSOURCE] = @Original_MAJSOURCE)) AND ((@IsNull_SUBSOURCE = 1 AND [SUBSOURCE] IS " +
                "NULL) OR ([SUBSOURCE] = @Original_SUBSOURCE)) AND ((@IsNull_SNSURE = 1 AND [SNSU" +
                "RE] IS NULL) OR ([SNSURE] = @Original_SNSURE)) AND ((@IsNull_SSSURE = 1 AND [SSS" +
                "URE] IS NULL) OR ([SSSURE] = @Original_SSSURE)) AND ((@IsNull_SDSURE = 1 AND [SD" +
                "SURE] IS NULL) OR ([SDSURE] = @Original_SDSURE)) AND ((@IsNull_SPSURE = 1 AND [S" +
                "PSURE] IS NULL) OR ([SPSURE] = @Original_SPSURE)) AND ((@IsNull_SFSURE = 1 AND [" +
                "SFSURE] IS NULL) OR ([SFSURE] = @Original_SFSURE)) AND ((@IsNull_ISPICKED = 1 AN" +
                "D [ISPICKED] IS NULL) OR ([ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_SEQUEN" +
                "CE = 1 AND [SEQUENCE] IS NULL) OR ([SEQUENCE] = @Original_SEQUENCE)) AND ((@IsNu" +
                "ll_CITMEMO = 1 AND [CITMEMO] IS NULL) OR ([CITMEMO] = @Original_CITMEMO)) AND ((" +
                "@IsNull_EXCLUDE = 1 AND [EXCLUDE] IS NULL) OR ([EXCLUDE] = @Original_EXCLUDE)) A" +
                "ND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DS" +
                "ID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_CITREF = " +
                "1 AND [CITREF] IS NULL) OR ([CITREF] = @Original_CITREF)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REFREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REFREC";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MAJSOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MAJSOURCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SUBSOURCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SUBSOURCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SNSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SSSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SSSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SDSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SPSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SPSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SFSURE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CITMEMO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CITMEMO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@EXCLUDE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "EXCLUDE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CITREF";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "CITREF";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RECNO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "RECNO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYPE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REFREC";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REFREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REFREC";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "REFREC";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MAJSOURCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MAJSOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MAJSOURCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "MAJSOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SUBSOURCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SUBSOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SUBSOURCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SUBSOURCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SNSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SNSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SNSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SNSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SSSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SSSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SSSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SSSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SDSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SDSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SDSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SDSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SPSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SPSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SPSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SPSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SFSURE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SFSURE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "SFSURE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SEQUENCE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SEQUENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CITMEMO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CITMEMO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CITMEMO";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CITMEMO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_EXCLUDE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "EXCLUDE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_EXCLUDE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "EXCLUDE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CITREF";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CITREF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CITREF";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "CITREF";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [RECNO], [STYPE], [REFREC], [MAJSOURCE], [SUBSOURCE], [SNSURE], [SSSURE], " +
                "[SDSURE], [SPSURE], [SFSURE], [ISPICKED], [SEQUENCE], [CITMEMO], [EXCLUDE], [TT]" +
                ", [DSID], [CITREF] FROM [SourceCitation]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.SourceCitationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.SourceCitationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.SourceCitationDataTable dataTable = new tmgDataSet.SourceCitationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.SourceCitationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SourceCitation");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_RECNO, 
                    string Original_STYPE, 
                    global::System.Nullable<long> Original_REFREC, 
                    global::System.Nullable<long> Original_MAJSOURCE, 
                    string Original_SUBSOURCE, 
                    string Original_SNSURE, 
                    string Original_SSSURE, 
                    string Original_SDSURE, 
                    string Original_SPSURE, 
                    string Original_SFSURE, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    global::System.Nullable<long> Original_SEQUENCE, 
                    string Original_CITMEMO, 
                    global::System.Nullable<bool> Original_EXCLUDE, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_CITREF) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_RECNO));
            if ((Original_STYPE == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_STYPE));
            }
            if ((Original_REFREC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_REFREC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_MAJSOURCE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_MAJSOURCE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBSOURCE == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_SUBSOURCE));
            }
            if ((Original_SNSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_SNSURE));
            }
            if ((Original_SSSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_SSSURE));
            }
            if ((Original_SDSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_SDSURE));
            }
            if ((Original_SPSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_SPSURE));
            }
            if ((Original_SFSURE == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_SFSURE));
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_SEQUENCE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((long)(Original_SEQUENCE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_CITMEMO == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_CITMEMO));
            }
            if ((Original_EXCLUDE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((bool)(Original_EXCLUDE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_CITREF == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_CITREF));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string STYPE, 
                    global::System.Nullable<long> REFREC, 
                    global::System.Nullable<long> MAJSOURCE, 
                    string SUBSOURCE, 
                    string SNSURE, 
                    string SSSURE, 
                    string SDSURE, 
                    string SPSURE, 
                    string SFSURE, 
                    global::System.Nullable<bool> ISPICKED, 
                    global::System.Nullable<long> SEQUENCE, 
                    string CITMEMO, 
                    global::System.Nullable<bool> EXCLUDE, 
                    string TT, 
                    global::System.Nullable<long> DSID, 
                    string CITREF) {
            if ((STYPE == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(STYPE));
            }
            if ((REFREC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(REFREC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MAJSOURCE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(MAJSOURCE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SUBSOURCE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SUBSOURCE));
            }
            if ((SNSURE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SNSURE));
            }
            if ((SSSURE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(SSSURE));
            }
            if ((SDSURE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SDSURE));
            }
            if ((SPSURE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(SPSURE));
            }
            if ((SFSURE == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(SFSURE));
            }
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((SEQUENCE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((long)(SEQUENCE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((CITMEMO == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(CITMEMO));
            }
            if ((EXCLUDE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(EXCLUDE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CITREF == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(CITREF));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string STYPE, 
                    global::System.Nullable<long> REFREC, 
                    global::System.Nullable<long> MAJSOURCE, 
                    string SUBSOURCE, 
                    string SNSURE, 
                    string SSSURE, 
                    string SDSURE, 
                    string SPSURE, 
                    string SFSURE, 
                    global::System.Nullable<bool> ISPICKED, 
                    global::System.Nullable<long> SEQUENCE, 
                    string CITMEMO, 
                    global::System.Nullable<bool> EXCLUDE, 
                    string TT, 
                    global::System.Nullable<long> DSID, 
                    string CITREF, 
                    long Original_RECNO, 
                    string Original_STYPE, 
                    global::System.Nullable<long> Original_REFREC, 
                    global::System.Nullable<long> Original_MAJSOURCE, 
                    string Original_SUBSOURCE, 
                    string Original_SNSURE, 
                    string Original_SSSURE, 
                    string Original_SDSURE, 
                    string Original_SPSURE, 
                    string Original_SFSURE, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    global::System.Nullable<long> Original_SEQUENCE, 
                    string Original_CITMEMO, 
                    global::System.Nullable<bool> Original_EXCLUDE, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_CITREF) {
            if ((STYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(STYPE));
            }
            if ((REFREC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(REFREC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((MAJSOURCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(MAJSOURCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SUBSOURCE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SUBSOURCE));
            }
            if ((SNSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SNSURE));
            }
            if ((SSSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(SSSURE));
            }
            if ((SDSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SDSURE));
            }
            if ((SPSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(SPSURE));
            }
            if ((SFSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(SFSURE));
            }
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((SEQUENCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(SEQUENCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((CITMEMO == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(CITMEMO));
            }
            if ((EXCLUDE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(EXCLUDE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CITREF == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(CITREF));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_RECNO));
            if ((Original_STYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_STYPE));
            }
            if ((Original_REFREC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((long)(Original_REFREC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_MAJSOURCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(Original_MAJSOURCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_SUBSOURCE == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_SUBSOURCE));
            }
            if ((Original_SNSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_SNSURE));
            }
            if ((Original_SSSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_SSSURE));
            }
            if ((Original_SDSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_SDSURE));
            }
            if ((Original_SPSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_SPSURE));
            }
            if ((Original_SFSURE == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_SFSURE));
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_SEQUENCE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((long)(Original_SEQUENCE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_CITMEMO == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_CITMEMO));
            }
            if ((Original_EXCLUDE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((bool)(Original_EXCLUDE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_CITREF == null)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((string)(Original_CITREF));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class sourcetypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public sourcetypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "sourcetype";
            tableMapping.ColumnMappings.Add("RULESET", "RULESET");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("SOURTYPE", "SOURTYPE");
            tableMapping.ColumnMappings.Add("TRANS_TO", "TRANS_TO");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("FOOT", "FOOT");
            tableMapping.ColumnMappings.Add("SHORT", "SHORT");
            tableMapping.ColumnMappings.Add("BIB", "BIB");
            tableMapping.ColumnMappings.Add("CUSTFOOT", "CUSTFOOT");
            tableMapping.ColumnMappings.Add("CUSTSHORT", "CUSTSHORT");
            tableMapping.ColumnMappings.Add("CUSTBIB", "CUSTBIB");
            tableMapping.ColumnMappings.Add("SAMEAS", "SAMEAS");
            tableMapping.ColumnMappings.Add("SAMEASMSG", "SAMEASMSG");
            tableMapping.ColumnMappings.Add("PRIMARY", "PRIMARY");
            tableMapping.ColumnMappings.Add("REMINDERS", "REMINDERS");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("SourceType_ID", "SourceType_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[sourcetype] WHERE (((@IsNull_RULESET = 1 AND [RULESET] IS NULL) OR ([RULESET] = @Original_RULESET)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_SOURTYPE = 1 AND [SOURTYPE] IS NULL) OR ([SOURTYPE] = @Original_SOURTYPE)) AND ((@IsNull_TRANS_TO = 1 AND [TRANS_TO] IS NULL) OR ([TRANS_TO] = @Original_TRANS_TO)) AND ((@IsNull_NAME = 1 AND [NAME] IS NULL) OR ([NAME] = @Original_NAME)) AND ((@IsNull_FOOT = 1 AND [FOOT] IS NULL) OR ([FOOT] = @Original_FOOT)) AND ((@IsNull_SHORT = 1 AND [SHORT] IS NULL) OR ([SHORT] = @Original_SHORT)) AND ((@IsNull_BIB = 1 AND [BIB] IS NULL) OR ([BIB] = @Original_BIB)) AND ((@IsNull_CUSTFOOT = 1 AND [CUSTFOOT] IS NULL) OR ([CUSTFOOT] = @Original_CUSTFOOT)) AND ((@IsNull_CUSTSHORT = 1 AND [CUSTSHORT] IS NULL) OR ([CUSTSHORT] = @Original_CUSTSHORT)) AND ((@IsNull_CUSTBIB = 1 AND [CUSTBIB] IS NULL) OR ([CUSTBIB] = @Original_CUSTBIB)) AND ((@IsNull_SAMEAS = 1 AND [SAMEAS] IS NULL) OR ([SAMEAS] = @Original_SAMEAS)) AND ((@IsNull_SAMEASMSG = 1 AND [SAMEASMSG] IS NULL) OR ([SAMEASMSG] = @Original_SAMEASMSG)) AND ((@IsNull_PRIMARY = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @Original_PRIMARY)) AND ((@IsNull_REMINDERS = 1 AND [REMINDERS] IS NULL) OR ([REMINDERS] = @Original_REMINDERS)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ([SourceType_ID] = @Original_SourceType_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RULESET";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RULESET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RULESET";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "RULESET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SOURTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SOURTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SOURTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SOURTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANS_TO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANS_TO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANS_TO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANS_TO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FOOT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SHORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SHORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SHORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SHORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BIB";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BIB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BIB";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "BIB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CUSTFOOT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CUSTFOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CUSTFOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTFOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CUSTSHORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CUSTSHORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CUSTSHORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTSHORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CUSTBIB";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CUSTBIB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CUSTBIB";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTBIB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SAMEAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SAMEAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SAMEAS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SAMEAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SAMEASMSG";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SAMEASMSG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SAMEASMSG";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SAMEASMSG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REMINDERS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SourceType_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SourceType_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[sourcetype] ([RULESET], [DSID], [SOURTYPE], [TRANS_TO], [NAME], [FOOT], [SHORT], [BIB], [CUSTFOOT], [CUSTSHORT], [CUSTBIB], [SAMEAS], [SAMEASMSG], [PRIMARY], [REMINDERS], [TT]) VALUES (@RULESET, @DSID, @SOURTYPE, @TRANS_TO, @NAME, @FOOT, @SHORT, @BIB, @CUSTFOOT, @CUSTSHORT, @CUSTBIB, @SAMEAS, @SAMEASMSG, @PRIMARY, @REMINDERS, @TT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RULESET";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "RULESET";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SOURTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SOURTYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANS_TO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANS_TO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FOOT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SHORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SHORT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BIB";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "BIB";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CUSTFOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTFOOT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CUSTSHORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTSHORT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CUSTBIB";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTBIB";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SAMEAS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SAMEAS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SAMEASMSG";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SAMEASMSG";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[sourcetype] SET [RULESET] = @RULESET, [DSI" +
                "D] = @DSID, [SOURTYPE] = @SOURTYPE, [TRANS_TO] = @TRANS_TO, [NAME] = @NAME, [FOO" +
                "T] = @FOOT, [SHORT] = @SHORT, [BIB] = @BIB, [CUSTFOOT] = @CUSTFOOT, [CUSTSHORT] " +
                "= @CUSTSHORT, [CUSTBIB] = @CUSTBIB, [SAMEAS] = @SAMEAS, [SAMEASMSG] = @SAMEASMSG" +
                ", [PRIMARY] = @PRIMARY, [REMINDERS] = @REMINDERS, [TT] = @TT WHERE (((@IsNull_RU" +
                "LESET = 1 AND [RULESET] IS NULL) OR ([RULESET] = @Original_RULESET)) AND ((@IsNu" +
                "ll_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_SOUR" +
                "TYPE = 1 AND [SOURTYPE] IS NULL) OR ([SOURTYPE] = @Original_SOURTYPE)) AND ((@Is" +
                "Null_TRANS_TO = 1 AND [TRANS_TO] IS NULL) OR ([TRANS_TO] = @Original_TRANS_TO)) " +
                "AND ((@IsNull_NAME = 1 AND [NAME] IS NULL) OR ([NAME] = @Original_NAME)) AND ((@" +
                "IsNull_FOOT = 1 AND [FOOT] IS NULL) OR ([FOOT] = @Original_FOOT)) AND ((@IsNull_" +
                "SHORT = 1 AND [SHORT] IS NULL) OR ([SHORT] = @Original_SHORT)) AND ((@IsNull_BIB" +
                " = 1 AND [BIB] IS NULL) OR ([BIB] = @Original_BIB)) AND ((@IsNull_CUSTFOOT = 1 A" +
                "ND [CUSTFOOT] IS NULL) OR ([CUSTFOOT] = @Original_CUSTFOOT)) AND ((@IsNull_CUSTS" +
                "HORT = 1 AND [CUSTSHORT] IS NULL) OR ([CUSTSHORT] = @Original_CUSTSHORT)) AND ((" +
                "@IsNull_CUSTBIB = 1 AND [CUSTBIB] IS NULL) OR ([CUSTBIB] = @Original_CUSTBIB)) A" +
                "ND ((@IsNull_SAMEAS = 1 AND [SAMEAS] IS NULL) OR ([SAMEAS] = @Original_SAMEAS)) " +
                "AND ((@IsNull_SAMEASMSG = 1 AND [SAMEASMSG] IS NULL) OR ([SAMEASMSG] = @Original" +
                "_SAMEASMSG)) AND ((@IsNull_PRIMARY = 1 AND [PRIMARY] IS NULL) OR ([PRIMARY] = @O" +
                "riginal_PRIMARY)) AND ((@IsNull_REMINDERS = 1 AND [REMINDERS] IS NULL) OR ([REMI" +
                "NDERS] = @Original_REMINDERS)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] =" +
                " @Original_TT)) AND ([SourceType_ID] = @Original_SourceType_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@RULESET";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "RULESET";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SOURTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SOURTYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TRANS_TO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANS_TO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@NAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@FOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FOOT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SHORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SHORT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@BIB";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "BIB";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CUSTFOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTFOOT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CUSTSHORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTSHORT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@CUSTBIB";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTBIB";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SAMEAS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SAMEAS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SAMEASMSG";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SAMEASMSG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_RULESET";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "RULESET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_RULESET";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "RULESET";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SOURTYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SOURTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SOURTYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SOURTYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TRANS_TO";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TRANS_TO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TRANS_TO";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TRANS_TO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_NAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_NAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "NAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_FOOT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "FOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_FOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "FOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SHORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SHORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SHORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SHORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_BIB";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "BIB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_BIB";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "BIB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CUSTFOOT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CUSTFOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CUSTFOOT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTFOOT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CUSTSHORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CUSTSHORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CUSTSHORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTSHORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_CUSTBIB";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "CUSTBIB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_CUSTBIB";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "CUSTBIB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SAMEAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SAMEAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SAMEAS";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SAMEAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SAMEASMSG";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SAMEASMSG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SAMEASMSG";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SAMEASMSG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRIMARY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRIMARY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRIMARY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REMINDERS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SourceType_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "SourceType_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [RULESET], [DSID], [SOURTYPE], [TRANS_TO], [NAME], [FOOT], [SHORT], [BIB]," +
                " [CUSTFOOT], [CUSTSHORT], [CUSTBIB], [SAMEAS], [SAMEASMSG], [PRIMARY], [REMINDER" +
                "S], [TT], [SourceType_ID] FROM [sourcetype]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.sourcetypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.sourcetypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.sourcetypeDataTable dataTable = new tmgDataSet.sourcetypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.sourcetypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "sourcetype");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    global::System.Nullable<decimal> Original_RULESET, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<long> Original_SOURTYPE, 
                    global::System.Nullable<long> Original_TRANS_TO, 
                    string Original_NAME, 
                    string Original_FOOT, 
                    string Original_SHORT, 
                    string Original_BIB, 
                    string Original_CUSTFOOT, 
                    string Original_CUSTSHORT, 
                    string Original_CUSTBIB, 
                    global::System.Nullable<long> Original_SAMEAS, 
                    string Original_SAMEASMSG, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    string Original_REMINDERS, 
                    string Original_TT, 
                    long Original_SourceType_ID) {
            if ((Original_RULESET.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_RULESET.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_SOURTYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_SOURTYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_TRANS_TO.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_TRANS_TO.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_NAME));
            }
            if ((Original_FOOT == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_FOOT));
            }
            if ((Original_SHORT == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_SHORT));
            }
            if ((Original_BIB == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_BIB));
            }
            if ((Original_CUSTFOOT == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_CUSTFOOT));
            }
            if ((Original_CUSTSHORT == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_CUSTSHORT));
            }
            if ((Original_CUSTBIB == null)) {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[21].Value = ((string)(Original_CUSTBIB));
            }
            if ((Original_SAMEAS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[23].Value = ((long)(Original_SAMEAS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_SAMEASMSG == null)) {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[25].Value = ((string)(Original_SAMEASMSG));
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[27].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_REMINDERS == null)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((string)(Original_REMINDERS));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((string)(Original_TT));
            }
            this.Adapter.DeleteCommand.Parameters[32].Value = ((long)(Original_SourceType_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<decimal> RULESET, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<long> SOURTYPE, 
                    global::System.Nullable<long> TRANS_TO, 
                    string NAME, 
                    string FOOT, 
                    string SHORT, 
                    string BIB, 
                    string CUSTFOOT, 
                    string CUSTSHORT, 
                    string CUSTBIB, 
                    global::System.Nullable<long> SAMEAS, 
                    string SAMEASMSG, 
                    global::System.Nullable<bool> PRIMARY, 
                    string REMINDERS, 
                    string TT) {
            if ((RULESET.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(RULESET.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((SOURTYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(SOURTYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TRANS_TO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(TRANS_TO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(NAME));
            }
            if ((FOOT == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(FOOT));
            }
            if ((SHORT == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SHORT));
            }
            if ((BIB == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(BIB));
            }
            if ((CUSTFOOT == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CUSTFOOT));
            }
            if ((CUSTSHORT == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CUSTSHORT));
            }
            if ((CUSTBIB == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(CUSTBIB));
            }
            if ((SAMEAS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((long)(SAMEAS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((SAMEASMSG == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(SAMEASMSG));
            }
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((REMINDERS == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(REMINDERS));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<decimal> RULESET, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<long> SOURTYPE, 
                    global::System.Nullable<long> TRANS_TO, 
                    string NAME, 
                    string FOOT, 
                    string SHORT, 
                    string BIB, 
                    string CUSTFOOT, 
                    string CUSTSHORT, 
                    string CUSTBIB, 
                    global::System.Nullable<long> SAMEAS, 
                    string SAMEASMSG, 
                    global::System.Nullable<bool> PRIMARY, 
                    string REMINDERS, 
                    string TT, 
                    global::System.Nullable<decimal> Original_RULESET, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<long> Original_SOURTYPE, 
                    global::System.Nullable<long> Original_TRANS_TO, 
                    string Original_NAME, 
                    string Original_FOOT, 
                    string Original_SHORT, 
                    string Original_BIB, 
                    string Original_CUSTFOOT, 
                    string Original_CUSTSHORT, 
                    string Original_CUSTBIB, 
                    global::System.Nullable<long> Original_SAMEAS, 
                    string Original_SAMEASMSG, 
                    global::System.Nullable<bool> Original_PRIMARY, 
                    string Original_REMINDERS, 
                    string Original_TT, 
                    long Original_SourceType_ID) {
            if ((RULESET.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(RULESET.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((SOURTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(SOURTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TRANS_TO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(TRANS_TO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(NAME));
            }
            if ((FOOT == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(FOOT));
            }
            if ((SHORT == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SHORT));
            }
            if ((BIB == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(BIB));
            }
            if ((CUSTFOOT == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CUSTFOOT));
            }
            if ((CUSTSHORT == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CUSTSHORT));
            }
            if ((CUSTBIB == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(CUSTBIB));
            }
            if ((SAMEAS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(SAMEAS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((SAMEASMSG == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(SAMEASMSG));
            }
            if ((PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((REMINDERS == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(REMINDERS));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(TT));
            }
            if ((Original_RULESET.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(Original_RULESET.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_SOURTYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(Original_SOURTYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_TRANS_TO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_TRANS_TO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_NAME));
            }
            if ((Original_FOOT == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_FOOT));
            }
            if ((Original_SHORT == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_SHORT));
            }
            if ((Original_BIB == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_BIB));
            }
            if ((Original_CUSTFOOT == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_CUSTFOOT));
            }
            if ((Original_CUSTSHORT == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_CUSTSHORT));
            }
            if ((Original_CUSTBIB == null)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((string)(Original_CUSTBIB));
            }
            if ((Original_SAMEAS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[39].Value = ((long)(Original_SAMEAS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((Original_SAMEASMSG == null)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[41].Value = ((string)(Original_SAMEASMSG));
            }
            if ((Original_PRIMARY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[43].Value = ((bool)(Original_PRIMARY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[42].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((Original_REMINDERS == null)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[45].Value = ((string)(Original_REMINDERS));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[47].Value = ((string)(Original_TT));
            }
            this.Adapter.UpdateCommand.Parameters[48].Value = ((long)(Original_SourceType_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StyleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public StyleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Style";
            tableMapping.ColumnMappings.Add("STYLEID", "STYLEID");
            tableMapping.ColumnMappings.Add("ST_DISPLAY", "ST_DISPLAY");
            tableMapping.ColumnMappings.Add("ST_OUTPUT", "ST_OUTPUT");
            tableMapping.ColumnMappings.Add("GROUP", "GROUP");
            tableMapping.ColumnMappings.Add("SRNAMESORT", "SRNAMESORT");
            tableMapping.ColumnMappings.Add("SRNAMEDISP", "SRNAMEDISP");
            tableMapping.ColumnMappings.Add("GVNAMESORT", "GVNAMESORT");
            tableMapping.ColumnMappings.Add("GVNAMEDISP", "GVNAMEDISP");
            tableMapping.ColumnMappings.Add("OTHERDISP", "OTHERDISP");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("STYLENAME", "STYLENAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[Style] WHERE (([STYLEID] = @Original_STYLEID) AND ((@IsNull_ST_DISPLAY = 1 AND [ST_DISPLAY] IS NULL) OR ([ST_DISPLAY] = @Original_ST_DISPLAY)) AND ((@IsNull_ST_OUTPUT = 1 AND [ST_OUTPUT] IS NULL) OR ([ST_OUTPUT] = @Original_ST_OUTPUT)) AND ((@IsNull_GROUP = 1 AND [GROUP] IS NULL) OR ([GROUP] = @Original_GROUP)) AND ((@IsNull_SRNAMESORT = 1 AND [SRNAMESORT] IS NULL) OR ([SRNAMESORT] = @Original_SRNAMESORT)) AND ((@IsNull_SRNAMEDISP = 1 AND [SRNAMEDISP] IS NULL) OR ([SRNAMEDISP] = @Original_SRNAMEDISP)) AND ((@IsNull_GVNAMESORT = 1 AND [GVNAMESORT] IS NULL) OR ([GVNAMESORT] = @Original_GVNAMESORT)) AND ((@IsNull_GVNAMEDISP = 1 AND [GVNAMEDISP] IS NULL) OR ([GVNAMEDISP] = @Original_GVNAMEDISP)) AND ((@IsNull_OTHERDISP = 1 AND [OTHERDISP] IS NULL) OR ([OTHERDISP] = @Original_OTHERDISP)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_STYLENAME = 1 AND [STYLENAME] IS NULL) OR ([STYLENAME] = @Original_STYLENAME)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ST_DISPLAY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ST_DISPLAY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ST_DISPLAY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "ST_DISPLAY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ST_OUTPUT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ST_OUTPUT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ST_OUTPUT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "ST_OUTPUT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GROUP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GROUP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GROUP";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GROUP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRNAMESORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SRNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRNAMEDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SRNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GVNAMESORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GVNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GVNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "GVNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GVNAMEDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GVNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GVNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "GVNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_OTHERDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "OTHERDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_OTHERDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "OTHERDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STYLENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STYLENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYLENAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STYLENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[Style] ([ST_DISPLAY], [ST_OUTPUT], [GROUP], [SRNAMESORT], [SRNAMEDISP], [GVNAMESORT], [GVNAMEDISP], [OTHERDISP], [TT], [DSID], [STYLENAME]) VALUES (@ST_DISPLAY, @ST_OUTPUT, @GROUP, @SRNAMESORT, @SRNAMEDISP, @GVNAMESORT, @GVNAMEDISP, @OTHERDISP, @TT, @DSID, @STYLENAME)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ST_DISPLAY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "ST_DISPLAY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ST_OUTPUT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "ST_OUTPUT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GROUP";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GROUP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SRNAMESORT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SRNAMEDISP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GVNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "GVNAMESORT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GVNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "GVNAMEDISP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@OTHERDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "OTHERDISP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STYLENAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STYLENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[Style] SET [ST_DISPLAY] = @ST_DISPLAY, [ST_OUTPUT] = @ST_OUTPUT, [GROUP] = @GROUP, [SRNAMESORT] = @SRNAMESORT, [SRNAMEDISP] = @SRNAMEDISP, [GVNAMESORT] = @GVNAMESORT, [GVNAMEDISP] = @GVNAMEDISP, [OTHERDISP] = @OTHERDISP, [TT] = @TT, [DSID] = @DSID, [STYLENAME] = @STYLENAME WHERE (([STYLEID] = @Original_STYLEID) AND ((@IsNull_ST_DISPLAY = 1 AND [ST_DISPLAY] IS NULL) OR ([ST_DISPLAY] = @Original_ST_DISPLAY)) AND ((@IsNull_ST_OUTPUT = 1 AND [ST_OUTPUT] IS NULL) OR ([ST_OUTPUT] = @Original_ST_OUTPUT)) AND ((@IsNull_GROUP = 1 AND [GROUP] IS NULL) OR ([GROUP] = @Original_GROUP)) AND ((@IsNull_SRNAMESORT = 1 AND [SRNAMESORT] IS NULL) OR ([SRNAMESORT] = @Original_SRNAMESORT)) AND ((@IsNull_SRNAMEDISP = 1 AND [SRNAMEDISP] IS NULL) OR ([SRNAMEDISP] = @Original_SRNAMEDISP)) AND ((@IsNull_GVNAMESORT = 1 AND [GVNAMESORT] IS NULL) OR ([GVNAMESORT] = @Original_GVNAMESORT)) AND ((@IsNull_GVNAMEDISP = 1 AND [GVNAMEDISP] IS NULL) OR ([GVNAMEDISP] = @Original_GVNAMEDISP)) AND ((@IsNull_OTHERDISP = 1 AND [OTHERDISP] IS NULL) OR ([OTHERDISP] = @Original_OTHERDISP)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_STYLENAME = 1 AND [STYLENAME] IS NULL) OR ([STYLENAME] = @Original_STYLENAME)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ST_DISPLAY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "ST_DISPLAY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ST_OUTPUT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "ST_OUTPUT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GROUP";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GROUP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SRNAMESORT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@SRNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SRNAMEDISP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GVNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "GVNAMESORT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GVNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "GVNAMEDISP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@OTHERDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "OTHERDISP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@STYLENAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STYLENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYLEID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "STYLEID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ST_DISPLAY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ST_DISPLAY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ST_DISPLAY";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "ST_DISPLAY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ST_OUTPUT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ST_OUTPUT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ST_OUTPUT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "ST_OUTPUT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GROUP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GROUP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GROUP";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GROUP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRNAMESORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SRNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_SRNAMEDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "SRNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_SRNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "SRNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GVNAMESORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GVNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GVNAMESORT";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "GVNAMESORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GVNAMEDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GVNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GVNAMEDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "GVNAMEDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_OTHERDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "OTHERDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_OTHERDISP";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "OTHERDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_STYLENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "STYLENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_STYLENAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "STYLENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [STYLEID], [ST_DISPLAY], [ST_OUTPUT], [GROUP], [SRNAMESORT], [SRNAMEDISP]," +
                " [GVNAMESORT], [GVNAMEDISP], [OTHERDISP], [TT], [DSID], [STYLENAME] FROM [Style]" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.StyleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.StyleDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.StyleDataTable dataTable = new tmgDataSet.StyleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.StyleDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Style");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_STYLEID, string Original_ST_DISPLAY, string Original_ST_OUTPUT, string Original_GROUP, string Original_SRNAMESORT, string Original_SRNAMEDISP, string Original_GVNAMESORT, string Original_GVNAMEDISP, string Original_OTHERDISP, string Original_TT, global::System.Nullable<long> Original_DSID, string Original_STYLENAME) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_STYLEID));
            if ((Original_ST_DISPLAY == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ST_DISPLAY));
            }
            if ((Original_ST_OUTPUT == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ST_OUTPUT));
            }
            if ((Original_GROUP == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_GROUP));
            }
            if ((Original_SRNAMESORT == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_SRNAMESORT));
            }
            if ((Original_SRNAMEDISP == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_SRNAMEDISP));
            }
            if ((Original_GVNAMESORT == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_GVNAMESORT));
            }
            if ((Original_GVNAMEDISP == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_GVNAMEDISP));
            }
            if ((Original_OTHERDISP == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_OTHERDISP));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_STYLENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_STYLENAME));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ST_DISPLAY, string ST_OUTPUT, string GROUP, string SRNAMESORT, string SRNAMEDISP, string GVNAMESORT, string GVNAMEDISP, string OTHERDISP, string TT, global::System.Nullable<long> DSID, string STYLENAME) {
            if ((ST_DISPLAY == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ST_DISPLAY));
            }
            if ((ST_OUTPUT == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ST_OUTPUT));
            }
            if ((GROUP == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(GROUP));
            }
            if ((SRNAMESORT == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SRNAMESORT));
            }
            if ((SRNAMEDISP == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SRNAMEDISP));
            }
            if ((GVNAMESORT == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(GVNAMESORT));
            }
            if ((GVNAMEDISP == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(GVNAMEDISP));
            }
            if ((OTHERDISP == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(OTHERDISP));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((STYLENAME == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(STYLENAME));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ST_DISPLAY, 
                    string ST_OUTPUT, 
                    string GROUP, 
                    string SRNAMESORT, 
                    string SRNAMEDISP, 
                    string GVNAMESORT, 
                    string GVNAMEDISP, 
                    string OTHERDISP, 
                    string TT, 
                    global::System.Nullable<long> DSID, 
                    string STYLENAME, 
                    long Original_STYLEID, 
                    string Original_ST_DISPLAY, 
                    string Original_ST_OUTPUT, 
                    string Original_GROUP, 
                    string Original_SRNAMESORT, 
                    string Original_SRNAMEDISP, 
                    string Original_GVNAMESORT, 
                    string Original_GVNAMEDISP, 
                    string Original_OTHERDISP, 
                    string Original_TT, 
                    global::System.Nullable<long> Original_DSID, 
                    string Original_STYLENAME) {
            if ((ST_DISPLAY == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ST_DISPLAY));
            }
            if ((ST_OUTPUT == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ST_OUTPUT));
            }
            if ((GROUP == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(GROUP));
            }
            if ((SRNAMESORT == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SRNAMESORT));
            }
            if ((SRNAMEDISP == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SRNAMEDISP));
            }
            if ((GVNAMESORT == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(GVNAMESORT));
            }
            if ((GVNAMEDISP == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(GVNAMEDISP));
            }
            if ((OTHERDISP == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(OTHERDISP));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(TT));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((STYLENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(STYLENAME));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_STYLEID));
            if ((Original_ST_DISPLAY == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_ST_DISPLAY));
            }
            if ((Original_ST_OUTPUT == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_ST_OUTPUT));
            }
            if ((Original_GROUP == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_GROUP));
            }
            if ((Original_SRNAMESORT == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_SRNAMESORT));
            }
            if ((Original_SRNAMEDISP == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_SRNAMEDISP));
            }
            if ((Original_GVNAMESORT == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_GVNAMESORT));
            }
            if ((Original_GVNAMEDISP == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_GVNAMEDISP));
            }
            if ((Original_OTHERDISP == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_OTHERDISP));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_TT));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_STYLENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_STYLENAME));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TagTypeTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TagTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TagType";
            tableMapping.ColumnMappings.Add("ISPICKED", "ISPICKED");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("ACTIVE", "ACTIVE");
            tableMapping.ColumnMappings.Add("ETYPENUM", "ETYPENUM");
            tableMapping.ColumnMappings.Add("ORIGETYPE", "ORIGETYPE");
            tableMapping.ColumnMappings.Add("ADMIN", "ADMIN");
            tableMapping.ColumnMappings.Add("LDSONLY", "LDSONLY");
            tableMapping.ColumnMappings.Add("ETYPENAME", "ETYPENAME");
            tableMapping.ColumnMappings.Add("GEDCOM_TAG", "GEDCOM_TAG");
            tableMapping.ColumnMappings.Add("ISREPORT", "ISREPORT");
            tableMapping.ColumnMappings.Add("TSENTENCE", "TSENTENCE");
            tableMapping.ColumnMappings.Add("ABBREV", "ABBREV");
            tableMapping.ColumnMappings.Add("WITDISP", "WITDISP");
            tableMapping.ColumnMappings.Add("PASTTENSE", "PASTTENSE");
            tableMapping.ColumnMappings.Add("PRINROLE", "PRINROLE");
            tableMapping.ColumnMappings.Add("WITROLE", "WITROLE");
            tableMapping.ColumnMappings.Add("MAXYEAR", "MAXYEAR");
            tableMapping.ColumnMappings.Add("MINYEAR", "MINYEAR");
            tableMapping.ColumnMappings.Add("REMINDERS", "REMINDERS");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("PROPERTIES", "PROPERTIES");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [main].[sqlite_default_schema].[TagType] WHERE (((@IsNull_ISPICKED = " +
                "1 AND [ISPICKED] IS NULL) OR ([ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_DS" +
                "ID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_ACTIVE = " +
                "1 AND [ACTIVE] IS NULL) OR ([ACTIVE] = @Original_ACTIVE)) AND ([ETYPENUM] = @Ori" +
                "ginal_ETYPENUM) AND ((@IsNull_ORIGETYPE = 1 AND [ORIGETYPE] IS NULL) OR ([ORIGET" +
                "YPE] = @Original_ORIGETYPE)) AND ((@IsNull_ADMIN = 1 AND [ADMIN] IS NULL) OR ([A" +
                "DMIN] = @Original_ADMIN)) AND ((@IsNull_LDSONLY = 1 AND [LDSONLY] IS NULL) OR ([" +
                "LDSONLY] = @Original_LDSONLY)) AND ((@IsNull_ETYPENAME = 1 AND [ETYPENAME] IS NU" +
                "LL) OR ([ETYPENAME] = @Original_ETYPENAME)) AND ((@IsNull_GEDCOM_TAG = 1 AND [GE" +
                "DCOM_TAG] IS NULL) OR ([GEDCOM_TAG] = @Original_GEDCOM_TAG)) AND ((@IsNull_ISREP" +
                "ORT = 1 AND [ISREPORT] IS NULL) OR ([ISREPORT] = @Original_ISREPORT)) AND ((@IsN" +
                "ull_TSENTENCE = 1 AND [TSENTENCE] IS NULL) OR ([TSENTENCE] = @Original_TSENTENCE" +
                ")) AND ((@IsNull_ABBREV = 1 AND [ABBREV] IS NULL) OR ([ABBREV] = @Original_ABBRE" +
                "V)) AND ((@IsNull_WITDISP = 1 AND [WITDISP] IS NULL) OR ([WITDISP] = @Original_W" +
                "ITDISP)) AND ((@IsNull_PASTTENSE = 1 AND [PASTTENSE] IS NULL) OR ([PASTTENSE] = " +
                "@Original_PASTTENSE)) AND ((@IsNull_PRINROLE = 1 AND [PRINROLE] IS NULL) OR ([PR" +
                "INROLE] = @Original_PRINROLE)) AND ((@IsNull_WITROLE = 1 AND [WITROLE] IS NULL) " +
                "OR ([WITROLE] = @Original_WITROLE)) AND ((@IsNull_MAXYEAR = 1 AND [MAXYEAR] IS N" +
                "ULL) OR ([MAXYEAR] = @Original_MAXYEAR)) AND ((@IsNull_MINYEAR = 1 AND [MINYEAR]" +
                " IS NULL) OR ([MINYEAR] = @Original_MINYEAR)) AND ((@IsNull_REMINDERS = 1 AND [R" +
                "EMINDERS] IS NULL) OR ([REMINDERS] = @Original_REMINDERS)) AND ((@IsNull_TT = 1 " +
                "AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ((@IsNull_PROPERTIES = 1 AND [PR" +
                "OPERTIES] IS NULL) OR ([PROPERTIES] = @Original_PROPERTIES)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ACTIVE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ETYPENUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ETYPENUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ORIGETYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ORIGETYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ORIGETYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ORIGETYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ADMIN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ADMIN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ADMIN";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "ADMIN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LDSONLY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LDSONLY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LDSONLY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "LDSONLY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ETYPENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ETYPENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ETYPENAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ETYPENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GEDCOM_TAG";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GEDCOM_TAG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GEDCOM_TAG";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GEDCOM_TAG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISREPORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISREPORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISREPORT";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISREPORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TSENTENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TSENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TSENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TSENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ABBREV";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WITDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WITDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WITDISP";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "WITDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PASTTENSE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PASTTENSE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PASTTENSE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PASTTENSE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRINROLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRINROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRINROLE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRINROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WITROLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WITROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WITROLE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "WITROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MAXYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MAXYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MAXYEAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MAXYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MINYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MINYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MINYEAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MINYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REMINDERS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROPERTIES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROPERTIES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROPERTIES";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTIES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [main].[sqlite_default_schema].[TagType] ([ISPICKED], [DSID], [ACTIVE], [ORIGETYPE], [ADMIN], [LDSONLY], [ETYPENAME], [GEDCOM_TAG], [ISREPORT], [TSENTENCE], [ABBREV], [WITDISP], [PASTTENSE], [PRINROLE], [WITROLE], [MAXYEAR], [MINYEAR], [REMINDERS], [TT], [PROPERTIES]) VALUES (@ISPICKED, @DSID, @ACTIVE, @ORIGETYPE, @ADMIN, @LDSONLY, @ETYPENAME, @GEDCOM_TAG, @ISREPORT, @TSENTENCE, @ABBREV, @WITDISP, @PASTTENSE, @PRINROLE, @WITROLE, @MAXYEAR, @MINYEAR, @REMINDERS, @TT, @PROPERTIES)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ACTIVE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ORIGETYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ORIGETYPE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ADMIN";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "ADMIN";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LDSONLY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "LDSONLY";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ETYPENAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ETYPENAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GEDCOM_TAG";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GEDCOM_TAG";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISREPORT";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISREPORT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TSENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TSENTENCE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WITDISP";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "WITDISP";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PASTTENSE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PASTTENSE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRINROLE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRINROLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WITROLE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "WITROLE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MAXYEAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MAXYEAR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MINYEAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MINYEAR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROPERTIES";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTIES";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [main].[sqlite_default_schema].[TagType] SET [ISPICKED] = @ISPICKED, [DSID" +
                "] = @DSID, [ACTIVE] = @ACTIVE, [ORIGETYPE] = @ORIGETYPE, [ADMIN] = @ADMIN, [LDSO" +
                "NLY] = @LDSONLY, [ETYPENAME] = @ETYPENAME, [GEDCOM_TAG] = @GEDCOM_TAG, [ISREPORT" +
                "] = @ISREPORT, [TSENTENCE] = @TSENTENCE, [ABBREV] = @ABBREV, [WITDISP] = @WITDIS" +
                "P, [PASTTENSE] = @PASTTENSE, [PRINROLE] = @PRINROLE, [WITROLE] = @WITROLE, [MAXY" +
                "EAR] = @MAXYEAR, [MINYEAR] = @MINYEAR, [REMINDERS] = @REMINDERS, [TT] = @TT, [PR" +
                "OPERTIES] = @PROPERTIES WHERE (((@IsNull_ISPICKED = 1 AND [ISPICKED] IS NULL) OR" +
                " ([ISPICKED] = @Original_ISPICKED)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) O" +
                "R ([DSID] = @Original_DSID)) AND ((@IsNull_ACTIVE = 1 AND [ACTIVE] IS NULL) OR (" +
                "[ACTIVE] = @Original_ACTIVE)) AND ([ETYPENUM] = @Original_ETYPENUM) AND ((@IsNul" +
                "l_ORIGETYPE = 1 AND [ORIGETYPE] IS NULL) OR ([ORIGETYPE] = @Original_ORIGETYPE))" +
                " AND ((@IsNull_ADMIN = 1 AND [ADMIN] IS NULL) OR ([ADMIN] = @Original_ADMIN)) AN" +
                "D ((@IsNull_LDSONLY = 1 AND [LDSONLY] IS NULL) OR ([LDSONLY] = @Original_LDSONLY" +
                ")) AND ((@IsNull_ETYPENAME = 1 AND [ETYPENAME] IS NULL) OR ([ETYPENAME] = @Origi" +
                "nal_ETYPENAME)) AND ((@IsNull_GEDCOM_TAG = 1 AND [GEDCOM_TAG] IS NULL) OR ([GEDC" +
                "OM_TAG] = @Original_GEDCOM_TAG)) AND ((@IsNull_ISREPORT = 1 AND [ISREPORT] IS NU" +
                "LL) OR ([ISREPORT] = @Original_ISREPORT)) AND ((@IsNull_TSENTENCE = 1 AND [TSENT" +
                "ENCE] IS NULL) OR ([TSENTENCE] = @Original_TSENTENCE)) AND ((@IsNull_ABBREV = 1 " +
                "AND [ABBREV] IS NULL) OR ([ABBREV] = @Original_ABBREV)) AND ((@IsNull_WITDISP = " +
                "1 AND [WITDISP] IS NULL) OR ([WITDISP] = @Original_WITDISP)) AND ((@IsNull_PASTT" +
                "ENSE = 1 AND [PASTTENSE] IS NULL) OR ([PASTTENSE] = @Original_PASTTENSE)) AND ((" +
                "@IsNull_PRINROLE = 1 AND [PRINROLE] IS NULL) OR ([PRINROLE] = @Original_PRINROLE" +
                ")) AND ((@IsNull_WITROLE = 1 AND [WITROLE] IS NULL) OR ([WITROLE] = @Original_WI" +
                "TROLE)) AND ((@IsNull_MAXYEAR = 1 AND [MAXYEAR] IS NULL) OR ([MAXYEAR] = @Origin" +
                "al_MAXYEAR)) AND ((@IsNull_MINYEAR = 1 AND [MINYEAR] IS NULL) OR ([MINYEAR] = @O" +
                "riginal_MINYEAR)) AND ((@IsNull_REMINDERS = 1 AND [REMINDERS] IS NULL) OR ([REMI" +
                "NDERS] = @Original_REMINDERS)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] =" +
                " @Original_TT)) AND ((@IsNull_PROPERTIES = 1 AND [PROPERTIES] IS NULL) OR ([PROP" +
                "ERTIES] = @Original_PROPERTIES)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ACTIVE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ORIGETYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ORIGETYPE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ADMIN";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "ADMIN";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@LDSONLY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "LDSONLY";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ETYPENAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ETYPENAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@GEDCOM_TAG";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GEDCOM_TAG";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ISREPORT";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISREPORT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TSENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TSENTENCE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WITDISP";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "WITDISP";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PASTTENSE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PASTTENSE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PRINROLE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRINROLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@WITROLE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "WITROLE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MAXYEAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MAXYEAR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@MINYEAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MINYEAR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@PROPERTIES";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTIES";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISPICKED";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISPICKED";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISPICKED";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ACTIVE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ACTIVE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ACTIVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ETYPENUM";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ETYPENUM";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ORIGETYPE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ORIGETYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ORIGETYPE";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "ORIGETYPE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ADMIN";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ADMIN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ADMIN";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "ADMIN";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_LDSONLY";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "LDSONLY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_LDSONLY";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "LDSONLY";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ETYPENAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ETYPENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ETYPENAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ETYPENAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_GEDCOM_TAG";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "GEDCOM_TAG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_GEDCOM_TAG";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "GEDCOM_TAG";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ISREPORT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ISREPORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ISREPORT";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "ISREPORT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TSENTENCE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TSENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TSENTENCE";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "TSENTENCE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_ABBREV";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_ABBREV";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "ABBREV";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WITDISP";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WITDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WITDISP";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "WITDISP";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PASTTENSE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PASTTENSE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PASTTENSE";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "PASTTENSE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PRINROLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PRINROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PRINROLE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "PRINROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_WITROLE";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "WITROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_WITROLE";
            param.DbType = global::System.Data.DbType.Boolean;
            param.DbType = global::System.Data.DbType.Boolean;
            param.SourceColumn = "WITROLE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MAXYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MAXYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MAXYEAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MAXYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_MINYEAR";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "MINYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_MINYEAR";
            param.DbType = global::System.Data.DbType.Decimal;
            param.DbType = global::System.Data.DbType.Decimal;
            param.SourceColumn = "MINYEAR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_REMINDERS";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_REMINDERS";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "REMINDERS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_PROPERTIES";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "PROPERTIES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_PROPERTIES";
            param.DbType = global::System.Data.DbType.AnsiString;
            param.DbType = global::System.Data.DbType.AnsiString;
            param.SourceColumn = "PROPERTIES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [ISPICKED], [DSID], [ACTIVE], [ETYPENUM], [ORIGETYPE], [ADMIN], [LDSONLY], [ETYPENAME], [GEDCOM_TAG], [ISREPORT], [TSENTENCE], [ABBREV], [WITDISP], [PASTTENSE], [PRINROLE], [WITROLE], [MAXYEAR], [MINYEAR], [REMINDERS], [TT], [PROPERTIES] FROM [TagType]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.TagTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.TagTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.TagTypeDataTable dataTable = new tmgDataSet.TagTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.TagTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TagType");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    global::System.Nullable<bool> Original_ISPICKED, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<bool> Original_ACTIVE, 
                    long Original_ETYPENUM, 
                    global::System.Nullable<long> Original_ORIGETYPE, 
                    global::System.Nullable<decimal> Original_ADMIN, 
                    global::System.Nullable<bool> Original_LDSONLY, 
                    string Original_ETYPENAME, 
                    string Original_GEDCOM_TAG, 
                    global::System.Nullable<bool> Original_ISREPORT, 
                    string Original_TSENTENCE, 
                    string Original_ABBREV, 
                    global::System.Nullable<bool> Original_WITDISP, 
                    string Original_PASTTENSE, 
                    global::System.Nullable<bool> Original_PRINROLE, 
                    global::System.Nullable<bool> Original_WITROLE, 
                    global::System.Nullable<decimal> Original_MAXYEAR, 
                    global::System.Nullable<decimal> Original_MINYEAR, 
                    string Original_REMINDERS, 
                    string Original_TT, 
                    string Original_PROPERTIES) {
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_ACTIVE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_ACTIVE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_ETYPENUM));
            if ((Original_ORIGETYPE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_ORIGETYPE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_ADMIN.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_ADMIN.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_LDSONLY.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_LDSONLY.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ETYPENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_ETYPENAME));
            }
            if ((Original_GEDCOM_TAG == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_GEDCOM_TAG));
            }
            if ((Original_ISREPORT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((bool)(Original_ISREPORT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_TSENTENCE == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_TSENTENCE));
            }
            if ((Original_ABBREV == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_ABBREV));
            }
            if ((Original_WITDISP.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((bool)(Original_WITDISP.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_PASTTENSE == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_PASTTENSE));
            }
            if ((Original_PRINROLE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((bool)(Original_PRINROLE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_WITROLE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((bool)(Original_WITROLE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_MAXYEAR.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((decimal)(Original_MAXYEAR.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_MINYEAR.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((decimal)(Original_MINYEAR.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_REMINDERS == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_REMINDERS));
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_TT));
            }
            if ((Original_PROPERTIES == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_PROPERTIES));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<bool> ISPICKED, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<bool> ACTIVE, 
                    global::System.Nullable<long> ORIGETYPE, 
                    global::System.Nullable<decimal> ADMIN, 
                    global::System.Nullable<bool> LDSONLY, 
                    string ETYPENAME, 
                    string GEDCOM_TAG, 
                    global::System.Nullable<bool> ISREPORT, 
                    string TSENTENCE, 
                    string ABBREV, 
                    global::System.Nullable<bool> WITDISP, 
                    string PASTTENSE, 
                    global::System.Nullable<bool> PRINROLE, 
                    global::System.Nullable<bool> WITROLE, 
                    global::System.Nullable<decimal> MAXYEAR, 
                    global::System.Nullable<decimal> MINYEAR, 
                    string REMINDERS, 
                    string TT, 
                    string PROPERTIES) {
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ACTIVE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(ACTIVE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ORIGETYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(ORIGETYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ADMIN.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(ADMIN.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((LDSONLY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(LDSONLY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ETYPENAME == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ETYPENAME));
            }
            if ((GEDCOM_TAG == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(GEDCOM_TAG));
            }
            if ((ISREPORT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(ISREPORT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((TSENTENCE == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(TSENTENCE));
            }
            if ((ABBREV == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ABBREV));
            }
            if ((WITDISP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(WITDISP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((PASTTENSE == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(PASTTENSE));
            }
            if ((PRINROLE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(PRINROLE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((WITROLE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((bool)(WITROLE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((MAXYEAR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(MAXYEAR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MINYEAR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(MINYEAR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((REMINDERS == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(REMINDERS));
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(TT));
            }
            if ((PROPERTIES == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(PROPERTIES));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<bool> ISPICKED, 
                    global::System.Nullable<long> DSID, 
                    global::System.Nullable<bool> ACTIVE, 
                    global::System.Nullable<long> ORIGETYPE, 
                    global::System.Nullable<decimal> ADMIN, 
                    global::System.Nullable<bool> LDSONLY, 
                    string ETYPENAME, 
                    string GEDCOM_TAG, 
                    global::System.Nullable<bool> ISREPORT, 
                    string TSENTENCE, 
                    string ABBREV, 
                    global::System.Nullable<bool> WITDISP, 
                    string PASTTENSE, 
                    global::System.Nullable<bool> PRINROLE, 
                    global::System.Nullable<bool> WITROLE, 
                    global::System.Nullable<decimal> MAXYEAR, 
                    global::System.Nullable<decimal> MINYEAR, 
                    string REMINDERS, 
                    string TT, 
                    string PROPERTIES, 
                    global::System.Nullable<bool> Original_ISPICKED, 
                    global::System.Nullable<long> Original_DSID, 
                    global::System.Nullable<bool> Original_ACTIVE, 
                    long Original_ETYPENUM, 
                    global::System.Nullable<long> Original_ORIGETYPE, 
                    global::System.Nullable<decimal> Original_ADMIN, 
                    global::System.Nullable<bool> Original_LDSONLY, 
                    string Original_ETYPENAME, 
                    string Original_GEDCOM_TAG, 
                    global::System.Nullable<bool> Original_ISREPORT, 
                    string Original_TSENTENCE, 
                    string Original_ABBREV, 
                    global::System.Nullable<bool> Original_WITDISP, 
                    string Original_PASTTENSE, 
                    global::System.Nullable<bool> Original_PRINROLE, 
                    global::System.Nullable<bool> Original_WITROLE, 
                    global::System.Nullable<decimal> Original_MAXYEAR, 
                    global::System.Nullable<decimal> Original_MINYEAR, 
                    string Original_REMINDERS, 
                    string Original_TT, 
                    string Original_PROPERTIES) {
            if ((ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((bool)(ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ACTIVE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(ACTIVE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ORIGETYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(ORIGETYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((ADMIN.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(ADMIN.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((LDSONLY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(LDSONLY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ETYPENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ETYPENAME));
            }
            if ((GEDCOM_TAG == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(GEDCOM_TAG));
            }
            if ((ISREPORT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(ISREPORT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((TSENTENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(TSENTENCE));
            }
            if ((ABBREV == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ABBREV));
            }
            if ((WITDISP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(WITDISP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((PASTTENSE == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(PASTTENSE));
            }
            if ((PRINROLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(PRINROLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((WITROLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(WITROLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((MAXYEAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(MAXYEAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MINYEAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(MINYEAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((REMINDERS == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(REMINDERS));
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(TT));
            }
            if ((PROPERTIES == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(PROPERTIES));
            }
            if ((Original_ISPICKED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(Original_ISPICKED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_ACTIVE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(Original_ACTIVE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((long)(Original_ETYPENUM));
            if ((Original_ORIGETYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(Original_ORIGETYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_ADMIN.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(Original_ADMIN.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_LDSONLY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(Original_LDSONLY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_ETYPENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_ETYPENAME));
            }
            if ((Original_GEDCOM_TAG == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_GEDCOM_TAG));
            }
            if ((Original_ISREPORT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((bool)(Original_ISREPORT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_TSENTENCE == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_TSENTENCE));
            }
            if ((Original_ABBREV == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_ABBREV));
            }
            if ((Original_WITDISP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((bool)(Original_WITDISP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_PASTTENSE == null)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_PASTTENSE));
            }
            if ((Original_PRINROLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((bool)(Original_PRINROLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_WITROLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((bool)(Original_WITROLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((Original_MAXYEAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[52].Value = ((decimal)(Original_MAXYEAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((Original_MINYEAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[54].Value = ((decimal)(Original_MINYEAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((Original_REMINDERS == null)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[56].Value = ((string)(Original_REMINDERS));
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[58].Value = ((string)(Original_TT));
            }
            if ((Original_PROPERTIES == null)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[60].Value = ((string)(Original_PROPERTIES));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TimelineLockTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SQLite.SQLiteDataAdapter _adapter;
        
        private global::System.Data.SQLite.SQLiteConnection _connection;
        
        private global::System.Data.SQLite.SQLiteTransaction _transaction;
        
        private global::System.Data.SQLite.SQLiteCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TimelineLockTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SQLite.SQLiteDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SQLite.SQLiteCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SQLite.SQLiteTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SQLite.SQLiteCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SQLite.SQLiteDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TimelineLock";
            tableMapping.ColumnMappings.Add("IDLOCK", "IDLOCK");
            tableMapping.ColumnMappings.Add("TNAME", "TNAME");
            tableMapping.ColumnMappings.Add("DSID", "DSID");
            tableMapping.ColumnMappings.Add("TT", "TT");
            tableMapping.ColumnMappings.Add("TimelineLock_ID", "TimelineLock_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [main].[sqlite_default_schema].[TimelineLock] WHERE (((@IsNull_IDLOCK = 1 AND [IDLOCK] IS NULL) OR ([IDLOCK] = @Original_IDLOCK)) AND ((@IsNull_TNAME = 1 AND [TNAME] IS NULL) OR ([TNAME] = @Original_TNAME)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ([TimelineLock_ID] = @Original_TimelineLock_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.SQLite.SQLiteParameter param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IDLOCK";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IDLOCK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IDLOCK";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDLOCK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TimelineLock_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TimelineLock_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [main].[sqlite_default_schema].[TimelineLock] ([IDLOCK], [TNAME], [DS" +
                "ID], [TT]) VALUES (@IDLOCK, @TNAME, @DSID, @TT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IDLOCK";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDLOCK";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TNAME";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.SQLite.SQLiteCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [main].[sqlite_default_schema].[TimelineLock] SET [IDLOCK] = @IDLOCK, [TNAME] = @TNAME, [DSID] = @DSID, [TT] = @TT WHERE (((@IsNull_IDLOCK = 1 AND [IDLOCK] IS NULL) OR ([IDLOCK] = @Original_IDLOCK)) AND ((@IsNull_TNAME = 1 AND [TNAME] IS NULL) OR ([TNAME] = @Original_TNAME)) AND ((@IsNull_DSID = 1 AND [DSID] IS NULL) OR ([DSID] = @Original_DSID)) AND ((@IsNull_TT = 1 AND [TT] IS NULL) OR ([TT] = @Original_TT)) AND ([TimelineLock_ID] = @Original_TimelineLock_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IDLOCK";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDLOCK";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TNAME";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_IDLOCK";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "IDLOCK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_IDLOCK";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "IDLOCK";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TNAME";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TNAME";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TNAME";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_DSID";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_DSID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "DSID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@IsNull_TT";
            param.DbType = global::System.Data.DbType.Int32;
            param.DbType = global::System.Data.DbType.Int32;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TT";
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.DbType = global::System.Data.DbType.AnsiStringFixedLength;
            param.SourceColumn = "TT";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.SQLite.SQLiteParameter();
            param.ParameterName = "@Original_TimelineLock_ID";
            param.DbType = global::System.Data.DbType.Int64;
            param.DbType = global::System.Data.DbType.Int64;
            param.SourceColumn = "TimelineLock_ID";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SQLite.SQLiteConnection();
            this._connection.ConnectionString = global::TMG.DataExtractor.Properties.Settings.Default.tmgConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SQLite.SQLiteCommand[1];
            this._commandCollection[0] = new global::System.Data.SQLite.SQLiteCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [IDLOCK], [TNAME], [DSID], [TT], [TimelineLock_ID] FROM [TimelineLock]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(tmgDataSet.TimelineLockDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual tmgDataSet.TimelineLockDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            tmgDataSet.TimelineLockDataTable dataTable = new tmgDataSet.TimelineLockDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet.TimelineLockDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(tmgDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TimelineLock");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(global::System.Nullable<long> Original_IDLOCK, string Original_TNAME, global::System.Nullable<long> Original_DSID, string Original_TT, long Original_TimelineLock_ID) {
            if ((Original_IDLOCK.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_IDLOCK.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((Original_TNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_TNAME));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_TT));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_TimelineLock_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<long> IDLOCK, string TNAME, global::System.Nullable<long> DSID, string TT) {
            if ((IDLOCK.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((long)(IDLOCK.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((TNAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TNAME));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<long> IDLOCK, string TNAME, global::System.Nullable<long> DSID, string TT, global::System.Nullable<long> Original_IDLOCK, string Original_TNAME, global::System.Nullable<long> Original_DSID, string Original_TT, long Original_TimelineLock_ID) {
            if ((IDLOCK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(IDLOCK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((TNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TNAME));
            }
            if ((DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((TT == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TT));
            }
            if ((Original_IDLOCK.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_IDLOCK.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_TNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_TNAME));
            }
            if ((Original_DSID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_DSID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_TT == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_TT));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_TimelineLock_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private DataSetTableAdapter _dataSetTableAdapter;
        
        private DNATableAdapter _dNATableAdapter;
        
        private EventTableAdapter _eventTableAdapter;
        
        private EventWitnessTableAdapter _eventWitnessTableAdapter;
        
        private ExhibitTableAdapter _exhibitTableAdapter;
        
        private FlagTableAdapter _flagTableAdapter;
        
        private FocusGroupTableAdapter _focusGroupTableAdapter;
        
        private FocusGroupMemberTableAdapter _focusGroupMemberTableAdapter;
        
        private NameTableAdapter _nameTableAdapter;
        
        private NameDictionaryTableAdapter _nameDictionaryTableAdapter;
        
        private NamePartTypeTableAdapter _namePartTypeTableAdapter;
        
        private NamePartValueTableAdapter _namePartValueTableAdapter;
        
        private ParentChildRelationshipTableAdapter _parentChildRelationshipTableAdapter;
        
        private personTableAdapter _personTableAdapter;
        
        private PlaceDictionaryTableAdapter _placeDictionaryTableAdapter;
        
        private PlaceFileTableAdapter _placeFileTableAdapter;
        
        private PlacePartTypeTableAdapter _placePartTypeTableAdapter;
        
        private PlacePartValueTableAdapter _placePartValueTableAdapter;
        
        private RepositoryTableAdapter _repositoryTableAdapter;
        
        private ResearchLogTableAdapter _researchLogTableAdapter;
        
        private SourceTableAdapter _sourceTableAdapter;
        
        private SourceCitationTableAdapter _sourceCitationTableAdapter;
        
        private sourcetypeTableAdapter _sourcetypeTableAdapter;
        
        private StyleTableAdapter _styleTableAdapter;
        
        private TagTypeTableAdapter _tagTypeTableAdapter;
        
        private TimelineLockTableAdapter _timelineLockTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public DataSetTableAdapter DataSetTableAdapter {
            get {
                return this._dataSetTableAdapter;
            }
            set {
                this._dataSetTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public DNATableAdapter DNATableAdapter {
            get {
                return this._dNATableAdapter;
            }
            set {
                this._dNATableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public EventTableAdapter EventTableAdapter {
            get {
                return this._eventTableAdapter;
            }
            set {
                this._eventTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public EventWitnessTableAdapter EventWitnessTableAdapter {
            get {
                return this._eventWitnessTableAdapter;
            }
            set {
                this._eventWitnessTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ExhibitTableAdapter ExhibitTableAdapter {
            get {
                return this._exhibitTableAdapter;
            }
            set {
                this._exhibitTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public FlagTableAdapter FlagTableAdapter {
            get {
                return this._flagTableAdapter;
            }
            set {
                this._flagTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public FocusGroupTableAdapter FocusGroupTableAdapter {
            get {
                return this._focusGroupTableAdapter;
            }
            set {
                this._focusGroupTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public FocusGroupMemberTableAdapter FocusGroupMemberTableAdapter {
            get {
                return this._focusGroupMemberTableAdapter;
            }
            set {
                this._focusGroupMemberTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public NameTableAdapter NameTableAdapter {
            get {
                return this._nameTableAdapter;
            }
            set {
                this._nameTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public NameDictionaryTableAdapter NameDictionaryTableAdapter {
            get {
                return this._nameDictionaryTableAdapter;
            }
            set {
                this._nameDictionaryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public NamePartTypeTableAdapter NamePartTypeTableAdapter {
            get {
                return this._namePartTypeTableAdapter;
            }
            set {
                this._namePartTypeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public NamePartValueTableAdapter NamePartValueTableAdapter {
            get {
                return this._namePartValueTableAdapter;
            }
            set {
                this._namePartValueTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ParentChildRelationshipTableAdapter ParentChildRelationshipTableAdapter {
            get {
                return this._parentChildRelationshipTableAdapter;
            }
            set {
                this._parentChildRelationshipTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public personTableAdapter personTableAdapter {
            get {
                return this._personTableAdapter;
            }
            set {
                this._personTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PlaceDictionaryTableAdapter PlaceDictionaryTableAdapter {
            get {
                return this._placeDictionaryTableAdapter;
            }
            set {
                this._placeDictionaryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PlaceFileTableAdapter PlaceFileTableAdapter {
            get {
                return this._placeFileTableAdapter;
            }
            set {
                this._placeFileTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PlacePartTypeTableAdapter PlacePartTypeTableAdapter {
            get {
                return this._placePartTypeTableAdapter;
            }
            set {
                this._placePartTypeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PlacePartValueTableAdapter PlacePartValueTableAdapter {
            get {
                return this._placePartValueTableAdapter;
            }
            set {
                this._placePartValueTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public RepositoryTableAdapter RepositoryTableAdapter {
            get {
                return this._repositoryTableAdapter;
            }
            set {
                this._repositoryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ResearchLogTableAdapter ResearchLogTableAdapter {
            get {
                return this._researchLogTableAdapter;
            }
            set {
                this._researchLogTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SourceTableAdapter SourceTableAdapter {
            get {
                return this._sourceTableAdapter;
            }
            set {
                this._sourceTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SourceCitationTableAdapter SourceCitationTableAdapter {
            get {
                return this._sourceCitationTableAdapter;
            }
            set {
                this._sourceCitationTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public sourcetypeTableAdapter sourcetypeTableAdapter {
            get {
                return this._sourcetypeTableAdapter;
            }
            set {
                this._sourcetypeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public StyleTableAdapter StyleTableAdapter {
            get {
                return this._styleTableAdapter;
            }
            set {
                this._styleTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TagTypeTableAdapter TagTypeTableAdapter {
            get {
                return this._tagTypeTableAdapter;
            }
            set {
                this._tagTypeTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TimelineLockTableAdapter TimelineLockTableAdapter {
            get {
                return this._timelineLockTableAdapter;
            }
            set {
                this._timelineLockTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._dataSetTableAdapter != null) 
                            && (this._dataSetTableAdapter.Connection != null))) {
                    return this._dataSetTableAdapter.Connection;
                }
                if (((this._dNATableAdapter != null) 
                            && (this._dNATableAdapter.Connection != null))) {
                    return this._dNATableAdapter.Connection;
                }
                if (((this._eventTableAdapter != null) 
                            && (this._eventTableAdapter.Connection != null))) {
                    return this._eventTableAdapter.Connection;
                }
                if (((this._eventWitnessTableAdapter != null) 
                            && (this._eventWitnessTableAdapter.Connection != null))) {
                    return this._eventWitnessTableAdapter.Connection;
                }
                if (((this._exhibitTableAdapter != null) 
                            && (this._exhibitTableAdapter.Connection != null))) {
                    return this._exhibitTableAdapter.Connection;
                }
                if (((this._flagTableAdapter != null) 
                            && (this._flagTableAdapter.Connection != null))) {
                    return this._flagTableAdapter.Connection;
                }
                if (((this._focusGroupTableAdapter != null) 
                            && (this._focusGroupTableAdapter.Connection != null))) {
                    return this._focusGroupTableAdapter.Connection;
                }
                if (((this._focusGroupMemberTableAdapter != null) 
                            && (this._focusGroupMemberTableAdapter.Connection != null))) {
                    return this._focusGroupMemberTableAdapter.Connection;
                }
                if (((this._nameTableAdapter != null) 
                            && (this._nameTableAdapter.Connection != null))) {
                    return this._nameTableAdapter.Connection;
                }
                if (((this._nameDictionaryTableAdapter != null) 
                            && (this._nameDictionaryTableAdapter.Connection != null))) {
                    return this._nameDictionaryTableAdapter.Connection;
                }
                if (((this._namePartTypeTableAdapter != null) 
                            && (this._namePartTypeTableAdapter.Connection != null))) {
                    return this._namePartTypeTableAdapter.Connection;
                }
                if (((this._namePartValueTableAdapter != null) 
                            && (this._namePartValueTableAdapter.Connection != null))) {
                    return this._namePartValueTableAdapter.Connection;
                }
                if (((this._parentChildRelationshipTableAdapter != null) 
                            && (this._parentChildRelationshipTableAdapter.Connection != null))) {
                    return this._parentChildRelationshipTableAdapter.Connection;
                }
                if (((this._personTableAdapter != null) 
                            && (this._personTableAdapter.Connection != null))) {
                    return this._personTableAdapter.Connection;
                }
                if (((this._placeDictionaryTableAdapter != null) 
                            && (this._placeDictionaryTableAdapter.Connection != null))) {
                    return this._placeDictionaryTableAdapter.Connection;
                }
                if (((this._placeFileTableAdapter != null) 
                            && (this._placeFileTableAdapter.Connection != null))) {
                    return this._placeFileTableAdapter.Connection;
                }
                if (((this._placePartTypeTableAdapter != null) 
                            && (this._placePartTypeTableAdapter.Connection != null))) {
                    return this._placePartTypeTableAdapter.Connection;
                }
                if (((this._placePartValueTableAdapter != null) 
                            && (this._placePartValueTableAdapter.Connection != null))) {
                    return this._placePartValueTableAdapter.Connection;
                }
                if (((this._repositoryTableAdapter != null) 
                            && (this._repositoryTableAdapter.Connection != null))) {
                    return this._repositoryTableAdapter.Connection;
                }
                if (((this._researchLogTableAdapter != null) 
                            && (this._researchLogTableAdapter.Connection != null))) {
                    return this._researchLogTableAdapter.Connection;
                }
                if (((this._sourceTableAdapter != null) 
                            && (this._sourceTableAdapter.Connection != null))) {
                    return this._sourceTableAdapter.Connection;
                }
                if (((this._sourceCitationTableAdapter != null) 
                            && (this._sourceCitationTableAdapter.Connection != null))) {
                    return this._sourceCitationTableAdapter.Connection;
                }
                if (((this._sourcetypeTableAdapter != null) 
                            && (this._sourcetypeTableAdapter.Connection != null))) {
                    return this._sourcetypeTableAdapter.Connection;
                }
                if (((this._styleTableAdapter != null) 
                            && (this._styleTableAdapter.Connection != null))) {
                    return this._styleTableAdapter.Connection;
                }
                if (((this._tagTypeTableAdapter != null) 
                            && (this._tagTypeTableAdapter.Connection != null))) {
                    return this._tagTypeTableAdapter.Connection;
                }
                if (((this._timelineLockTableAdapter != null) 
                            && (this._timelineLockTableAdapter.Connection != null))) {
                    return this._timelineLockTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._dataSetTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dNATableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._eventTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._eventWitnessTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._exhibitTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._flagTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._focusGroupTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._focusGroupMemberTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._nameTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._nameDictionaryTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._namePartTypeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._namePartValueTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._parentChildRelationshipTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._personTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._placeDictionaryTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._placeFileTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._placePartTypeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._placePartValueTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._repositoryTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._researchLogTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sourceTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sourceCitationTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sourcetypeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._styleTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tagTypeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._timelineLockTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(tmgDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._placePartTypeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PlacePartType.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._placePartTypeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._placePartValueTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PlacePartValue.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._placePartValueTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._repositoryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Repository.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._repositoryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._personTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.person.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._personTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._placeDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PlaceDictionary.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._placeDictionaryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._placeFileTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PlaceFile.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._placeFileTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._researchLogTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ResearchLog.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._researchLogTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._styleTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Style.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._styleTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tagTypeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TagType.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tagTypeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._timelineLockTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TimelineLock.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._timelineLockTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sourceTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Source.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sourceTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sourceCitationTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SourceCitation.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sourceCitationTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sourcetypeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.sourcetype.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sourcetypeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._eventWitnessTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.EventWitness.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._eventWitnessTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._exhibitTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Exhibit.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._exhibitTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._flagTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Flag.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._flagTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dataSetTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DataSet.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dataSetTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dNATableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DNA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dNATableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._eventTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Event.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._eventTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._focusGroupTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FocusGroup.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._focusGroupTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._namePartTypeTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.NamePartType.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._namePartTypeTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._namePartValueTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.NamePartValue.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._namePartValueTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._parentChildRelationshipTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ParentChildRelationship.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._parentChildRelationshipTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._focusGroupMemberTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FocusGroupMember.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._focusGroupMemberTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._nameTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Name.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._nameTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._nameDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.NameDictionary.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._nameDictionaryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(tmgDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._placePartTypeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PlacePartType.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._placePartTypeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._placePartValueTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PlacePartValue.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._placePartValueTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._repositoryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Repository.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._repositoryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._personTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.person.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._personTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._placeDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PlaceDictionary.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._placeDictionaryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._placeFileTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PlaceFile.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._placeFileTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._researchLogTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ResearchLog.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._researchLogTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._styleTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Style.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._styleTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tagTypeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TagType.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tagTypeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._timelineLockTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TimelineLock.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._timelineLockTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sourceTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Source.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sourceTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sourceCitationTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SourceCitation.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sourceCitationTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sourcetypeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.sourcetype.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sourcetypeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._eventWitnessTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.EventWitness.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._eventWitnessTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._exhibitTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Exhibit.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._exhibitTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._flagTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Flag.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._flagTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dataSetTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DataSet.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dataSetTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dNATableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DNA.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dNATableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._eventTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Event.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._eventTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._focusGroupTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FocusGroup.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._focusGroupTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._namePartTypeTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.NamePartType.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._namePartTypeTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._namePartValueTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.NamePartValue.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._namePartValueTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._parentChildRelationshipTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ParentChildRelationship.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._parentChildRelationshipTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._focusGroupMemberTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FocusGroupMember.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._focusGroupMemberTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._nameTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Name.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._nameTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._nameDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.NameDictionary.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._nameDictionaryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(tmgDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._nameDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.NameDictionary.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._nameDictionaryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._nameTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Name.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._nameTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._focusGroupMemberTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FocusGroupMember.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._focusGroupMemberTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._parentChildRelationshipTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ParentChildRelationship.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._parentChildRelationshipTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._namePartValueTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.NamePartValue.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._namePartValueTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._namePartTypeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.NamePartType.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._namePartTypeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._focusGroupTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FocusGroup.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._focusGroupTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._eventTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Event.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._eventTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dNATableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DNA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dNATableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dataSetTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DataSet.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dataSetTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._flagTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Flag.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._flagTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._exhibitTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Exhibit.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._exhibitTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._eventWitnessTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.EventWitness.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._eventWitnessTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sourcetypeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.sourcetype.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sourcetypeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sourceCitationTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SourceCitation.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sourceCitationTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sourceTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Source.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sourceTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._timelineLockTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TimelineLock.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._timelineLockTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tagTypeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TagType.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tagTypeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._styleTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Style.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._styleTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._researchLogTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ResearchLog.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._researchLogTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._placeFileTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PlaceFile.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._placeFileTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._placeDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PlaceDictionary.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._placeDictionaryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._personTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.person.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._personTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._repositoryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Repository.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._repositoryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._placePartValueTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PlacePartValue.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._placePartValueTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._placePartTypeTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PlacePartType.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._placePartTypeTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(tmgDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._dataSetTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dataSetTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._dNATableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dNATableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._eventTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._eventTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._eventWitnessTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._eventWitnessTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._exhibitTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._exhibitTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._flagTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._flagTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._focusGroupTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._focusGroupTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._focusGroupMemberTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._focusGroupMemberTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._nameTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._nameTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._nameDictionaryTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._nameDictionaryTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._namePartTypeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._namePartTypeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._namePartValueTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._namePartValueTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._parentChildRelationshipTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._parentChildRelationshipTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._personTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._personTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._placeDictionaryTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._placeDictionaryTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._placeFileTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._placeFileTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._placePartTypeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._placePartTypeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._placePartValueTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._placePartValueTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._repositoryTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._repositoryTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._researchLogTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._researchLogTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sourceTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sourceTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sourceCitationTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sourceCitationTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sourcetypeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sourcetypeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._styleTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._styleTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tagTypeTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tagTypeTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._timelineLockTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._timelineLockTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._dataSetTableAdapter != null)) {
                    revertConnections.Add(this._dataSetTableAdapter, this._dataSetTableAdapter.Connection);
                    this._dataSetTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._dataSetTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._dataSetTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dataSetTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dataSetTableAdapter.Adapter);
                    }
                }
                if ((this._dNATableAdapter != null)) {
                    revertConnections.Add(this._dNATableAdapter, this._dNATableAdapter.Connection);
                    this._dNATableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._dNATableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._dNATableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dNATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dNATableAdapter.Adapter);
                    }
                }
                if ((this._eventTableAdapter != null)) {
                    revertConnections.Add(this._eventTableAdapter, this._eventTableAdapter.Connection);
                    this._eventTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._eventTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._eventTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._eventTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._eventTableAdapter.Adapter);
                    }
                }
                if ((this._eventWitnessTableAdapter != null)) {
                    revertConnections.Add(this._eventWitnessTableAdapter, this._eventWitnessTableAdapter.Connection);
                    this._eventWitnessTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._eventWitnessTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._eventWitnessTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._eventWitnessTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._eventWitnessTableAdapter.Adapter);
                    }
                }
                if ((this._exhibitTableAdapter != null)) {
                    revertConnections.Add(this._exhibitTableAdapter, this._exhibitTableAdapter.Connection);
                    this._exhibitTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._exhibitTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._exhibitTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._exhibitTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._exhibitTableAdapter.Adapter);
                    }
                }
                if ((this._flagTableAdapter != null)) {
                    revertConnections.Add(this._flagTableAdapter, this._flagTableAdapter.Connection);
                    this._flagTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._flagTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._flagTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._flagTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._flagTableAdapter.Adapter);
                    }
                }
                if ((this._focusGroupTableAdapter != null)) {
                    revertConnections.Add(this._focusGroupTableAdapter, this._focusGroupTableAdapter.Connection);
                    this._focusGroupTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._focusGroupTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._focusGroupTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._focusGroupTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._focusGroupTableAdapter.Adapter);
                    }
                }
                if ((this._focusGroupMemberTableAdapter != null)) {
                    revertConnections.Add(this._focusGroupMemberTableAdapter, this._focusGroupMemberTableAdapter.Connection);
                    this._focusGroupMemberTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._focusGroupMemberTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._focusGroupMemberTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._focusGroupMemberTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._focusGroupMemberTableAdapter.Adapter);
                    }
                }
                if ((this._nameTableAdapter != null)) {
                    revertConnections.Add(this._nameTableAdapter, this._nameTableAdapter.Connection);
                    this._nameTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._nameTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._nameTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._nameTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._nameTableAdapter.Adapter);
                    }
                }
                if ((this._nameDictionaryTableAdapter != null)) {
                    revertConnections.Add(this._nameDictionaryTableAdapter, this._nameDictionaryTableAdapter.Connection);
                    this._nameDictionaryTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._nameDictionaryTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._nameDictionaryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._nameDictionaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._nameDictionaryTableAdapter.Adapter);
                    }
                }
                if ((this._namePartTypeTableAdapter != null)) {
                    revertConnections.Add(this._namePartTypeTableAdapter, this._namePartTypeTableAdapter.Connection);
                    this._namePartTypeTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._namePartTypeTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._namePartTypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._namePartTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._namePartTypeTableAdapter.Adapter);
                    }
                }
                if ((this._namePartValueTableAdapter != null)) {
                    revertConnections.Add(this._namePartValueTableAdapter, this._namePartValueTableAdapter.Connection);
                    this._namePartValueTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._namePartValueTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._namePartValueTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._namePartValueTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._namePartValueTableAdapter.Adapter);
                    }
                }
                if ((this._parentChildRelationshipTableAdapter != null)) {
                    revertConnections.Add(this._parentChildRelationshipTableAdapter, this._parentChildRelationshipTableAdapter.Connection);
                    this._parentChildRelationshipTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._parentChildRelationshipTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._parentChildRelationshipTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._parentChildRelationshipTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._parentChildRelationshipTableAdapter.Adapter);
                    }
                }
                if ((this._personTableAdapter != null)) {
                    revertConnections.Add(this._personTableAdapter, this._personTableAdapter.Connection);
                    this._personTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._personTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._personTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._personTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._personTableAdapter.Adapter);
                    }
                }
                if ((this._placeDictionaryTableAdapter != null)) {
                    revertConnections.Add(this._placeDictionaryTableAdapter, this._placeDictionaryTableAdapter.Connection);
                    this._placeDictionaryTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._placeDictionaryTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._placeDictionaryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._placeDictionaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._placeDictionaryTableAdapter.Adapter);
                    }
                }
                if ((this._placeFileTableAdapter != null)) {
                    revertConnections.Add(this._placeFileTableAdapter, this._placeFileTableAdapter.Connection);
                    this._placeFileTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._placeFileTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._placeFileTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._placeFileTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._placeFileTableAdapter.Adapter);
                    }
                }
                if ((this._placePartTypeTableAdapter != null)) {
                    revertConnections.Add(this._placePartTypeTableAdapter, this._placePartTypeTableAdapter.Connection);
                    this._placePartTypeTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._placePartTypeTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._placePartTypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._placePartTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._placePartTypeTableAdapter.Adapter);
                    }
                }
                if ((this._placePartValueTableAdapter != null)) {
                    revertConnections.Add(this._placePartValueTableAdapter, this._placePartValueTableAdapter.Connection);
                    this._placePartValueTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._placePartValueTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._placePartValueTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._placePartValueTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._placePartValueTableAdapter.Adapter);
                    }
                }
                if ((this._repositoryTableAdapter != null)) {
                    revertConnections.Add(this._repositoryTableAdapter, this._repositoryTableAdapter.Connection);
                    this._repositoryTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._repositoryTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._repositoryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._repositoryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._repositoryTableAdapter.Adapter);
                    }
                }
                if ((this._researchLogTableAdapter != null)) {
                    revertConnections.Add(this._researchLogTableAdapter, this._researchLogTableAdapter.Connection);
                    this._researchLogTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._researchLogTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._researchLogTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._researchLogTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._researchLogTableAdapter.Adapter);
                    }
                }
                if ((this._sourceTableAdapter != null)) {
                    revertConnections.Add(this._sourceTableAdapter, this._sourceTableAdapter.Connection);
                    this._sourceTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._sourceTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._sourceTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sourceTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sourceTableAdapter.Adapter);
                    }
                }
                if ((this._sourceCitationTableAdapter != null)) {
                    revertConnections.Add(this._sourceCitationTableAdapter, this._sourceCitationTableAdapter.Connection);
                    this._sourceCitationTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._sourceCitationTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._sourceCitationTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sourceCitationTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sourceCitationTableAdapter.Adapter);
                    }
                }
                if ((this._sourcetypeTableAdapter != null)) {
                    revertConnections.Add(this._sourcetypeTableAdapter, this._sourcetypeTableAdapter.Connection);
                    this._sourcetypeTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._sourcetypeTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._sourcetypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sourcetypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sourcetypeTableAdapter.Adapter);
                    }
                }
                if ((this._styleTableAdapter != null)) {
                    revertConnections.Add(this._styleTableAdapter, this._styleTableAdapter.Connection);
                    this._styleTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._styleTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._styleTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._styleTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._styleTableAdapter.Adapter);
                    }
                }
                if ((this._tagTypeTableAdapter != null)) {
                    revertConnections.Add(this._tagTypeTableAdapter, this._tagTypeTableAdapter.Connection);
                    this._tagTypeTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._tagTypeTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._tagTypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tagTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tagTypeTableAdapter.Adapter);
                    }
                }
                if ((this._timelineLockTableAdapter != null)) {
                    revertConnections.Add(this._timelineLockTableAdapter, this._timelineLockTableAdapter.Connection);
                    this._timelineLockTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(workConnection));
                    this._timelineLockTableAdapter.Transaction = ((global::System.Data.SQLite.SQLiteTransaction)(workTransaction));
                    if (this._timelineLockTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._timelineLockTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._timelineLockTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._dataSetTableAdapter != null)) {
                    this._dataSetTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._dataSetTableAdapter]));
                    this._dataSetTableAdapter.Transaction = null;
                }
                if ((this._dNATableAdapter != null)) {
                    this._dNATableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._dNATableAdapter]));
                    this._dNATableAdapter.Transaction = null;
                }
                if ((this._eventTableAdapter != null)) {
                    this._eventTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._eventTableAdapter]));
                    this._eventTableAdapter.Transaction = null;
                }
                if ((this._eventWitnessTableAdapter != null)) {
                    this._eventWitnessTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._eventWitnessTableAdapter]));
                    this._eventWitnessTableAdapter.Transaction = null;
                }
                if ((this._exhibitTableAdapter != null)) {
                    this._exhibitTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._exhibitTableAdapter]));
                    this._exhibitTableAdapter.Transaction = null;
                }
                if ((this._flagTableAdapter != null)) {
                    this._flagTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._flagTableAdapter]));
                    this._flagTableAdapter.Transaction = null;
                }
                if ((this._focusGroupTableAdapter != null)) {
                    this._focusGroupTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._focusGroupTableAdapter]));
                    this._focusGroupTableAdapter.Transaction = null;
                }
                if ((this._focusGroupMemberTableAdapter != null)) {
                    this._focusGroupMemberTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._focusGroupMemberTableAdapter]));
                    this._focusGroupMemberTableAdapter.Transaction = null;
                }
                if ((this._nameTableAdapter != null)) {
                    this._nameTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._nameTableAdapter]));
                    this._nameTableAdapter.Transaction = null;
                }
                if ((this._nameDictionaryTableAdapter != null)) {
                    this._nameDictionaryTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._nameDictionaryTableAdapter]));
                    this._nameDictionaryTableAdapter.Transaction = null;
                }
                if ((this._namePartTypeTableAdapter != null)) {
                    this._namePartTypeTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._namePartTypeTableAdapter]));
                    this._namePartTypeTableAdapter.Transaction = null;
                }
                if ((this._namePartValueTableAdapter != null)) {
                    this._namePartValueTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._namePartValueTableAdapter]));
                    this._namePartValueTableAdapter.Transaction = null;
                }
                if ((this._parentChildRelationshipTableAdapter != null)) {
                    this._parentChildRelationshipTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._parentChildRelationshipTableAdapter]));
                    this._parentChildRelationshipTableAdapter.Transaction = null;
                }
                if ((this._personTableAdapter != null)) {
                    this._personTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._personTableAdapter]));
                    this._personTableAdapter.Transaction = null;
                }
                if ((this._placeDictionaryTableAdapter != null)) {
                    this._placeDictionaryTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._placeDictionaryTableAdapter]));
                    this._placeDictionaryTableAdapter.Transaction = null;
                }
                if ((this._placeFileTableAdapter != null)) {
                    this._placeFileTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._placeFileTableAdapter]));
                    this._placeFileTableAdapter.Transaction = null;
                }
                if ((this._placePartTypeTableAdapter != null)) {
                    this._placePartTypeTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._placePartTypeTableAdapter]));
                    this._placePartTypeTableAdapter.Transaction = null;
                }
                if ((this._placePartValueTableAdapter != null)) {
                    this._placePartValueTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._placePartValueTableAdapter]));
                    this._placePartValueTableAdapter.Transaction = null;
                }
                if ((this._repositoryTableAdapter != null)) {
                    this._repositoryTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._repositoryTableAdapter]));
                    this._repositoryTableAdapter.Transaction = null;
                }
                if ((this._researchLogTableAdapter != null)) {
                    this._researchLogTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._researchLogTableAdapter]));
                    this._researchLogTableAdapter.Transaction = null;
                }
                if ((this._sourceTableAdapter != null)) {
                    this._sourceTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._sourceTableAdapter]));
                    this._sourceTableAdapter.Transaction = null;
                }
                if ((this._sourceCitationTableAdapter != null)) {
                    this._sourceCitationTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._sourceCitationTableAdapter]));
                    this._sourceCitationTableAdapter.Transaction = null;
                }
                if ((this._sourcetypeTableAdapter != null)) {
                    this._sourcetypeTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._sourcetypeTableAdapter]));
                    this._sourcetypeTableAdapter.Transaction = null;
                }
                if ((this._styleTableAdapter != null)) {
                    this._styleTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._styleTableAdapter]));
                    this._styleTableAdapter.Transaction = null;
                }
                if ((this._tagTypeTableAdapter != null)) {
                    this._tagTypeTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._tagTypeTableAdapter]));
                    this._tagTypeTableAdapter.Transaction = null;
                }
                if ((this._timelineLockTableAdapter != null)) {
                    this._timelineLockTableAdapter.Connection = ((global::System.Data.SQLite.SQLiteConnection)(revertConnections[this._timelineLockTableAdapter]));
                    this._timelineLockTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591